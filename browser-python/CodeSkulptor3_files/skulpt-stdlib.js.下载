Sk.builtinFiles={"files":{"src/builtin/sys.js":"var $builtinmodule=function(){var b,a=Math.pow,c={},d=[],e=Sk.getSysArgv();for(b=0;b<e.length;++b)d.push(new Sk.builtin.str(e[b]));return c.argv=new Sk.builtins.list(d),c.copyright=Sk.builtin.str(\"Copyright 2009-2010 Scott Graham.\\nAll Rights Reserved.\\n\"),c.maxint=new Sk.builtin.int_(a(2,53)-1),c.maxsize=new Sk.builtin.int_(a(2,53)-1),c.modules=Sk.sysmodules,c.path=Sk.realsyspath,c.getExecutionLimit=new Sk.builtin.func(function(){return null===Sk.execLimit?Sk.builtin.none.none$:new Sk.builtin.int_(Sk.execLimit)}),c.setExecutionLimit=new Sk.builtin.func(function(a){void 0!==a&&(a=Sk.builtin.asnum$(a),Sk.setExecLimit(a))}),c.resetTimeout=new Sk.builtin.func(function(){Sk.setExecStartNow(!0)}),c.getYieldLimit=new Sk.builtin.func(function(){return null===Sk.yieldLimit?Sk.builtin.none.none$:new Sk.builtin.int_(Sk.yieldLimit)}),c.setYieldLimit=new Sk.builtin.func(function(a){if(null===Sk.yieldLimit)throw new Sk.builtin.NotImplementedError(\"Yielding is not enabled\");void 0!==a&&(Sk.yieldLimit=Sk.builtin.asnum$(a))}),c.debug=new Sk.builtin.func(function(){return Sk.builtin.none.none$}),c.__stdout__=new Sk.builtin.file(new Sk.builtin.str(\"/dev/stdout\"),new Sk.builtin.str(\"w\")),c.__stdin__=new Sk.builtin.file(new Sk.builtin.str(\"/dev/stdin\"),new Sk.builtin.str(\"r\")),c.stdout=c.__stdout__,c.stdin=c.__stdin__,c};","src/builtin/this.py":"s = \"\"\"Gur Mra bs Clguba, ol Gvz Crgref\n\nOrnhgvshy vf orggre guna htyl.\nRkcyvpvg vf orggre guna vzcyvpvg.\nFvzcyr vf orggre guna pbzcyrk.\nPbzcyrk vf orggre guna pbzcyvpngrq.\nSyng vf orggre guna arfgrq.\nFcnefr vf orggre guna qrafr.\nErnqnovyvgl pbhagf.\nFcrpvny pnfrf nera'g fcrpvny rabhtu gb oernx gur ehyrf.\nNygubhtu cenpgvpnyvgl orngf chevgl.\nReebef fubhyq arire cnff fvyragyl.\nHayrff rkcyvpvgyl fvyraprq.\nVa gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff.\nGurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg.\nNygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh'er Qhgpu.\nAbj vf orggre guna arire.\nNygubhtu arire vf bsgra orggre guna *evtug* abj.\nVs gur vzcyrzragngvba vf uneq gb rkcynva, vg'f n onq vqrn.\nVs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn.\nAnzrfcnprf ner bar ubaxvat terng vqrn -- yrg'f qb zber bs gubfr!\"\"\"\n\nd = {}\nfor c in (65, 97):\n    for i in range(26):\n        d[chr(i+c)] = chr((i+13) % 26 + c)\n\nprint \"\".join([d.get(c, c) for c in s])\n","src/lib/BaseHTTPServer.py":"raise NotImplementedError(\"BaseHTTPServer is not yet implemented in Skulpt\")\n","src/lib/Bastion.py":"raise NotImplementedError(\"Bastion is not yet implemented in Skulpt\")\n","src/lib/CGIHTTPServer.py":"raise NotImplementedError(\"CGIHTTPServer is not yet implemented in Skulpt\")\n","src/lib/ConfigParser.py":"raise NotImplementedError(\"ConfigParser is not yet implemented in Skulpt\")\n","src/lib/Cookie.py":"raise NotImplementedError(\"Cookie is not yet implemented in Skulpt\")\n","src/lib/DocXMLRPCServer.py":"raise NotImplementedError(\"DocXMLRPCServer is not yet implemented in Skulpt\")\n","src/lib/HTMLParser.py":"raise NotImplementedError(\"HTMLParser is not yet implemented in Skulpt\")\n","src/lib/MimeWriter.py":"raise NotImplementedError(\"MimeWriter is not yet implemented in Skulpt\")\n","src/lib/Queue.py":"raise NotImplementedError(\"Queue is not yet implemented in Skulpt\")\n","src/lib/SimpleHTTPServer.py":"raise NotImplementedError(\"SimpleHTTPServer is not yet implemented in Skulpt\")\n","src/lib/SimpleXMLRPCServer.py":"raise NotImplementedError(\"SimpleXMLRPCServer is not yet implemented in Skulpt\")\n","src/lib/SocketServer.py":"raise NotImplementedError(\"SocketServer is not yet implemented in Skulpt\")\n","src/lib/StringIO.py":"r\"\"\"File-like objects that read from or write to a string buffer.\n\"\"\"\n\n__all__ = [\"StringIO\"]\n\ndef _complain_ifclosed(closed):\n    if closed:\n        raise ValueError(\"I/O operation on closed file\")\n\nclass StringIO:\n    def __init__(self, buf = ''):\n        # Force self.buf to be a string or unicode\n        if not isinstance(buf, str):\n            buf = str(buf)\n        self.buf = buf\n        self.len = len(buf)\n        self.buflist = []\n        self.pos = 0\n        self.closed = False\n        self.softspace = 0\n\n    def __iter__(self):\n        return self\n\n    def next(self):\n        _complain_ifclosed(self.closed)\n        r = self.readline()\n        if not r:\n            raise StopIteration\n        return r\n\n    def close(self):\n        \"\"\"Free the memory buffer.\n        \"\"\"\n        if not self.closed:\n            self.closed = True\n            self.buf = None\n            self.pos = None\n\n    def isatty(self):\n        _complain_ifclosed(self.closed)\n        return False\n\n    def seek(self, pos, mode = 0):\n        _complain_ifclosed(self.closed)\n        if self.buflist:\n            self.buf += ''.join(self.buflist)\n            self.buflist = []\n        if mode == 1:\n            pos += self.pos\n        elif mode == 2:\n            pos += self.len\n        self.pos = max(0, pos)\n\n    def tell(self):\n        _complain_ifclosed(self.closed)\n        return self.pos\n\n    def read(self, n = -1):\n        _complain_ifclosed(self.closed)\n        if self.buflist:\n            self.buf += ''.join(self.buflist)\n            self.buflist = []\n        if n is None or n < 0:\n            newpos = self.len\n        else:\n            newpos = min(self.pos+n, self.len)\n        r = self.buf[self.pos:newpos]\n        self.pos = newpos\n        return r\n\n    def readline(self, length=None):\n        _complain_ifclosed(self.closed)\n        if self.buflist:\n            self.buf += ''.join(self.buflist)\n            self.buflist = []\n        i = self.buf.find('\\n', self.pos)\n        if i < 0:\n            newpos = self.len\n        else:\n            newpos = i+1\n        if length is not None and length >= 0:\n            if self.pos + length < newpos:\n                newpos = self.pos + length\n        r = self.buf[self.pos:newpos]\n        self.pos = newpos\n        return r\n\n    def readlines(self, sizehint = 0):\n        total = 0\n        lines = []\n        line = self.readline()\n        while line:\n            lines.append(line)\n            total += len(line)\n            if 0 < sizehint <= total:\n                break\n            line = self.readline()\n        return lines\n\n    def truncate(self, size=None):\n        _complain_ifclosed(self.closed)\n        if size is None:\n            size = self.pos\n        elif size < 0:\n            raise IOError(22, \"Negative size not allowed\")\n        elif size < self.pos:\n            self.pos = size\n        self.buf = self.getvalue()[:size]\n        self.len = size\n\n    def write(self, s):\n        _complain_ifclosed(self.closed)\n        if not s: return\n        # Force s to be a string or unicode\n        if not isinstance(s, str):\n            s = str(s)\n        spos = self.pos\n        slen = self.len\n        if spos == slen:\n            self.buflist.append(s)\n            self.len = self.pos = spos + len(s)\n            return\n        if spos > slen:\n            self.buflist.append('\\0'*(spos - slen))\n            slen = spos\n        newpos = spos + len(s)\n        if spos < slen:\n            if self.buflist:\n                self.buf += ''.join(self.buflist)\n            self.buflist = [self.buf[:spos], s, self.buf[newpos:]]\n            self.buf = ''\n            if newpos > slen:\n                slen = newpos\n        else:\n            self.buflist.append(s)\n            slen = newpos\n        self.len = slen\n        self.pos = newpos\n\n    def writelines(self, iterable):\n        write = self.write\n        for line in iterable:\n            write(line)\n\n    def flush(self):\n        _complain_ifclosed(self.closed)\n\n    def getvalue(self):\n        _complain_ifclosed(self.closed)\n        if self.buflist:\n            self.buf += ''.join(self.buflist)\n            self.buflist = []\n        return self.buf\n","src/lib/UserDict.py":"raise NotImplementedError(\"UserDict is not yet implemented in Skulpt\")\n","src/lib/UserList.py":"raise NotImplementedError(\"UserList is not yet implemented in Skulpt\")\n","src/lib/UserString.py":"raise NotImplementedError(\"UserString is not yet implemented in Skulpt\")\n","src/lib/_LWPCookieJar.py":"raise NotImplementedError(\"_LWPCookieJar is not yet implemented in Skulpt\")\n","src/lib/_MozillaCookieJar.py":"raise NotImplementedError(\"_MozillaCookieJar is not yet implemented in Skulpt\")\n","src/lib/__future__.py":"raise NotImplementedError(\"__future__ is not yet implemented in Skulpt\")\n","src/lib/_abcoll.py":"raise NotImplementedError(\"_abcoll is not yet implemented in Skulpt\")\n","src/lib/_strptime.py":"raise NotImplementedError(\"_strptime is not yet implemented in Skulpt\")\n","src/lib/_threading_local.py":"raise NotImplementedError(\"_threading_local is not yet implemented in Skulpt\")\n","src/lib/abc.py":"raise NotImplementedError(\"abc is not yet implemented in Skulpt\")\n","src/lib/aifc.py":"raise NotImplementedError(\"aifc is not yet implemented in Skulpt\")\n","src/lib/antigravity.js":"window.open(\"https://xkcd.com/353/\",\"_blank\");","src/lib/anydbm.py":"raise NotImplementedError(\"anydbm is not yet implemented in Skulpt\")\n","src/lib/array.js":"$builtinmodule=function(){var a={},b=[\"c\",\"b\",\"B\",\"u\",\"h\",\"H\",\"i\",\"I\",\"l\",\"L\",\"f\",\"d\"];return a.array=Sk.misceval.buildClass(a,function(a,c){c.__init__=new Sk.builtin.func(function(a,c,d){if(Sk.builtin.pyCheckArgsLen(\"__init__\",arguments.length,2,3),-1==b.indexOf(Sk.ffi.remapToJs(c)))throw new Sk.builtin.ValueError(\"bad typecode (must be c, b, B, u, h, H, i, I, l, L, f or d)\");if(d&&!Sk.builtin.checkIterable(d))throw new Sk.builtin.TypeError(\"iteration over non-sequence\");if(a.$d.mp$ass_subscript(new Sk.builtin.str(\"typecode\"),c),a.$d.mp$ass_subscript(new Sk.builtin.str(\"__module__\"),new Sk.builtin.str(\"array\")),a.typecode=c,void 0===d)a.internalIterable=new Sk.builtin.list;else if(d instanceof Sk.builtin.list)a.internalIterable=d;else for(a.internalIterable=new Sk.builtin.list,iter=Sk.abstr.iter(d),item=iter.tp$iternext();void 0!==item;item=iter.tp$iternext())Sk.misceval.callsimArray(a.internalIterable.append,[a.internalIterable,item])}),c.__repr__=new Sk.builtin.func(function(a){var b=Sk.ffi.remapToJs(a.typecode),c=\"\";return Sk.ffi.remapToJs(a.internalIterable).length&&(\"c\"==Sk.ffi.remapToJs(a.typecode)?c=\", '\"+Sk.ffi.remapToJs(a.internalIterable).join(\"\")+\"'\":c=\", \"+Sk.ffi.remapToJs(Sk.misceval.callsimArray(a.internalIterable.__repr__,[a.internalIterable]))),new Sk.builtin.str(\"array('\"+b+\"'\"+c+\")\")}),c.__str__=c.__repr__,c.__getattribute__=new Sk.builtin.func(function(a,b){return a.tp$getattr(b)}),c.append=new Sk.builtin.func(function(a,b){return Sk.misceval.callsimArray(a.internalIterable.append,[a.internalIterable,b]),Sk.builtin.none.none$}),c.extend=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgsLen(\"__init__\",arguments.length,2,2),!Sk.builtin.checkIterable(b))throw new Sk.builtin.TypeError(\"iteration over non-sequence\");for(iter=Sk.abstr.iter(b),item=iter.tp$iternext();void 0!==item;item=iter.tp$iternext())Sk.misceval.callsimArray(a.internalIterable.append,[a.internalIterable,item])})},\"array\",[]),a.__name__=new Sk.builtin.str(\"array\"),a};","src/lib/ast.py":"raise NotImplementedError(\"ast is not yet implemented in Skulpt\")\n","src/lib/asynchat.py":"raise NotImplementedError(\"asynchat is not yet implemented in Skulpt\")\n","src/lib/asyncore.py":"raise NotImplementedError(\"asyncore is not yet implemented in Skulpt\")\n","src/lib/atexit.py":"raise NotImplementedError(\"atexit is not yet implemented in Skulpt\")\n","src/lib/audiodev.py":"raise NotImplementedError(\"audiodev is not yet implemented in Skulpt\")\n","src/lib/base64.py":"raise NotImplementedError(\"base64 is not yet implemented in Skulpt\")\n","src/lib/bdb.py":"raise NotImplementedError(\"bdb is not yet implemented in Skulpt\")\n","src/lib/binhex.py":"raise NotImplementedError(\"binhex is not yet implemented in Skulpt\")\n","src/lib/bisect.py":"\"\"\"Bisection algorithms.\"\"\"\n\ndef insort_right(a, x, lo=0, hi=None):\n    \"\"\"Insert item x in list a, and keep it sorted assuming a is sorted.\n\n    If x is already in a, insert it to the right of the rightmost x.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo+hi)//2\n        if x < a[mid]: hi = mid\n        else: lo = mid+1\n    a.insert(lo, x)\n\ndef bisect_right(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e <= x, and all e in\n    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will\n    insert just after the rightmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo+hi)//2\n        if x < a[mid]: hi = mid\n        else: lo = mid+1\n    return lo\n\ndef insort_left(a, x, lo=0, hi=None):\n    \"\"\"Insert item x in list a, and keep it sorted assuming a is sorted.\n\n    If x is already in a, insert it to the left of the leftmost x.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo+hi)//2\n        if a[mid] < x: lo = mid+1\n        else: hi = mid\n    a.insert(lo, x)\n\n\ndef bisect_left(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e < x, and all e in\n    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will\n    insert just before the leftmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo+hi)//2\n        if a[mid] < x: lo = mid+1\n        else: hi = mid\n    return lo\n\n# Overwrite above definitions with a fast C implementation\ntry:\n    from _bisect import *\nexcept ImportError:\n    pass\n\n# Create aliases\nbisect = bisect_right\ninsort = insort_right\n","src/lib/bsddb/__init__.py":"raise NotImplementedError(\"bsddb is not yet implemented in Skulpt\")\n","src/lib/cProfile.py":"raise NotImplementedError(\"cProfile is not yet implemented in Skulpt\")\n","src/lib/calendar.py":"raise NotImplementedError(\"calendar is not yet implemented in Skulpt\")\n","src/lib/cgi.py":"raise NotImplementedError(\"cgi is not yet implemented in Skulpt\")\n","src/lib/cgitb.py":"raise NotImplementedError(\"cgitb is not yet implemented in Skulpt\")\n","src/lib/chunk.py":"raise NotImplementedError(\"chunk is not yet implemented in Skulpt\")\n","src/lib/cmd.py":"raise NotImplementedError(\"cmd is not yet implemented in Skulpt\")\n","src/lib/code.py":"raise NotImplementedError(\"code is not yet implemented in Skulpt\")\n","src/lib/codecs.py":"raise NotImplementedError(\"codecs is not yet implemented in Skulpt\")\n","src/lib/codeop.py":"raise NotImplementedError(\"codeop is not yet implemented in Skulpt\")\n","src/lib/codeskulptor.js":"var $builtinmodule=function(){var a={file2url:new Sk.builtin.func(function(a){if(Sk.builtin.pyCheckArgs(\"file2url\",arguments,1,1),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"filename must be a string\");var b=/^([a-zA-Z][a-zA-Z0-9]*)[_\\-]/,c=Sk.ffi.unwrapo(a),d=c.match(b);if(null==d)throw new Sk.builtin.ValueError(\"invalid filename: '\"+c+\"'\");var e=\"//codeskulptor-\"+d[1]+\".commondatastorage.googleapis.com/\"+c;return new Sk.builtin.str(e)}),set_timeout:new Sk.builtin.func(function(a){if(Sk.builtin.pyCheckArgs(\"set_timeout\",arguments,1,1),!Sk.builtin.checkInt(a))throw new Sk.builtin.TypeError(\"timeout must be an integer\");a=Sk.builtin.asnum$(a),Sk.setExecLimit(1e3*a)}),randomize_iteration:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgs(\"randomize_iteration\",arguments,0,1),Sk.randomize_iteration=!(void 0!==a)||Sk.misceval.isTrue(a)})};return a};","src/lib/collections.js":"var $builtinmodule=function(){return Sk.misceval.chain(Sk.importModule(\"keyword\",!1,!0),function(a){var b={};b.defaultdict=function(a,c){if(!(this instanceof b.defaultdict))return new b.defaultdict(a,c);if(Sk.abstr.superConstructor(b.defaultdict,this,c),void 0===a)this.default_factory=Sk.builtin.none.none$;else{if(!Sk.builtin.checkCallable(a)&&!(a instanceof Sk.builtin.none))throw new Sk.builtin.TypeError(\"first argument must be callable\");this.default_factory=a}return this.$d?this.$d.default_factory=this.default_factory:this.$d={default_factory:this.default_factory},this},Sk.abstr.setUpInheritance(\"defaultdict\",b.defaultdict,Sk.builtin.dict),b.defaultdict.prototype.$r=function(){var a=Sk.misceval.objectRepr(this.default_factory).v,b=Sk.builtin.dict.prototype.$r.call(this).v;return new Sk.builtin.str(\"defaultdict(\"+a+\", \"+b+\")\")},b.defaultdict.prototype.$missing=function(a){var b;if(this.default_factory instanceof Sk.builtin.none)throw new Sk.builtin.KeyError(Sk.misceval.objectRepr(a));else return b=Sk.misceval.callsimArray(this.default_factory),this.mp$ass_subscript(a,b),b},b.defaultdict.prototype.__missing__=new Sk.builtin.func(function(a,b){return Sk.builtin.pyCheckArgsLen(\"__missing__\",arguments.length,2,2),a.$missing(b)}),b.defaultdict.prototype.__copy__=function(a){var c,d,e,f=[];for(d=Sk.abstr.iter(a),e=d.tp$iternext();void 0!==e;e=d.tp$iternext())c=a.mp$subscript(e),f.push(e),f.push(c);return new b.defaultdict(a.$d.default_factory,f)},b.defaultdict.prototype.mp$subscript=function(a){try{return Sk.builtin.dict.prototype.mp$subscript.call(this,a)}catch(b){return this.$missing(a)}},b.Counter=function(a){if(!(this instanceof b.Counter))return new b.Counter(a);if(a instanceof Sk.builtin.dict||void 0===a)Sk.abstr.superConstructor(b.Counter,this,a);else{if(!Sk.builtin.checkIterable(a))throw new Sk.builtin.TypeError(\"'\"+Sk.abstr.typeName(a)+\"' object is not iterable\");Sk.abstr.superConstructor(b.Counter,this);for(var c,d=new Sk.builtin.int_(1),e=a.tp$iter(),f=e.tp$iternext();void 0!==f;f=e.tp$iternext())c=this.mp$subscript(f),c=c.nb$add(d),this.mp$ass_subscript(f,c)}return this},Sk.abstr.setUpInheritance(\"Counter\",b.Counter,Sk.builtin.dict),b.Counter.prototype.$r=function(){var a=0<this.size?Sk.builtin.dict.prototype.$r.call(this).v:\"\";return new Sk.builtin.str(\"Counter(\"+a+\")\")},b.Counter.prototype.mp$subscript=function(a){try{return Sk.builtin.dict.prototype.mp$subscript.call(this,a)}catch(a){return new Sk.builtin.int_(0)}},b.Counter.prototype.elements=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"elements\",arguments.length,1,1);for(var b,c,d=[],e=a.tp$iter(),f=e.tp$iternext();void 0!==f;f=e.tp$iternext())for(var g=0;g<a.mp$subscript(f).v;g++)d.push(f);return b={$index:0,$elem:d},c=function(){return this.$index>=this.$elem.length?void 0:this.$elem[this.$index++]},Sk.builtin.makeGenerator(c,b)}),b.Counter.prototype.most_common=new Sk.builtin.func(function(a,b){Sk.builtin.pyCheckArgsLen(\"most_common\",arguments.length,1,2);var c=a.mp$length();if(void 0===b)b=c;else{if(!Sk.builtin.checkInt(b))if(b instanceof Sk.builtin.float_)throw new Sk.builtin.TypeError(\"integer argument expected, got float\");else throw new Sk.builtin.TypeError(\"an integer is required\");b=Sk.builtin.asnum$(b),b=b<=c?b:c,b=0<=b?b:0}for(var d=[],e=a.tp$iter(),f=e.tp$iternext();void 0!==f;f=e.tp$iternext())d.push([f,a.mp$subscript(f)]);d=d.sort(function(c,a){return c[1].v<a[1].v?1:c[1].v>a[1].v?-1:0});for(var g=[],h=0;h<b;h++)g.push(new Sk.builtin.tuple(d.shift()));return new Sk.builtin.list(g)}),b.Counter.prototype.update=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgsLen(\"update\",arguments.length,1,2),b instanceof Sk.builtin.dict)for(var c,d=b.tp$iter(),e=d.tp$iternext();void 0!==e;e=d.tp$iternext())c=a.mp$subscript(e),a.mp$ass_subscript(e,c.nb$add(b.mp$subscript(e)));else if(void 0!==b){if(!Sk.builtin.checkIterable(b))throw new Sk.builtin.TypeError(\"'\"+Sk.abstr.typeName(b)+\"' object is not iterable\");for(var c,f=new Sk.builtin.int_(1),d=b.tp$iter(),e=d.tp$iternext();void 0!==e;e=d.tp$iternext())c=a.mp$subscript(e),a.mp$ass_subscript(e,c.nb$add(f))}}),b.Counter.prototype.subtract=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgsLen(\"subtract\",arguments.length,1,2),b instanceof Sk.builtin.dict)for(var c,d=b.tp$iter(),e=d.tp$iternext();void 0!==e;e=d.tp$iternext())c=a.mp$subscript(e),a.mp$ass_subscript(e,c.nb$subtract(b.mp$subscript(e)));else if(void 0!==b){if(!Sk.builtin.checkIterable(b))throw new Sk.builtin.TypeError(\"'\"+Sk.abstr.typeName(b)+\"' object is not iterable\");for(var c,f=new Sk.builtin.int_(1),d=b.tp$iter(),e=d.tp$iternext();void 0!==e;e=d.tp$iternext())c=a.mp$subscript(e),a.mp$ass_subscript(e,c.nb$subtract(f))}}),b.OrderedDict=function(a){return this instanceof b.OrderedDict?(this.orderedkeys=[],Sk.abstr.superConstructor(b.OrderedDict,this,a),this):new b.OrderedDict(a)},Sk.abstr.setUpInheritance(\"OrderedDict\",b.OrderedDict,Sk.builtin.dict),b.OrderedDict.prototype.$r=function(){var a,b,c,d,e=[];for(b=this.tp$iter(),c=b.tp$iternext();void 0!==c;c=b.tp$iternext())a=this.mp$subscript(c),void 0===a&&(a=null),e.push(\"(\"+Sk.misceval.objectRepr(c).v+\", \"+Sk.misceval.objectRepr(a).v+\")\");return d=e.join(\", \"),0<e.length&&(d=\"[\"+d+\"]\"),new Sk.builtin.str(\"OrderedDict(\"+d+\")\")},b.OrderedDict.prototype.mp$ass_subscript=function(a,b){var c=this.orderedkeys.indexOf(a);return-1==c&&this.orderedkeys.push(a),Sk.builtin.dict.prototype.mp$ass_subscript.call(this,a,b)},b.OrderedDict.prototype.mp$del_subscript=function(a){var b=this.orderedkeys.indexOf(a);return-1!=b&&this.orderedkeys.splice(b,1),Sk.builtin.dict.prototype.mp$del_subscript.call(this,a)},b.OrderedDict.prototype.__iter__=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgsLen(\"__iter__\",arguments.length,0,0,!1,!0),b.OrderedDict.prototype.tp$iter.call(a)}),b.OrderedDict.prototype.tp$iter=function(){var a;return a={tp$iter:function(){return a},$obj:this,$index:0,$keys:this.orderedkeys.slice(0),tp$iternext:function(){return a.$index>=a.$keys.length?void 0:a.$keys[a.$index++]}},a},b.OrderedDict.prototype.ob$eq=function(a){var c,d,e,f,g;if(!(a instanceof b.OrderedDict))return Sk.builtin.dict.prototype.ob$eq.call(this,a);if(c=this.mp$length(),d=a.mp$length(),c!==d)return Sk.builtin.bool.false$;for(e=this.tp$iter(),otheriter=a.tp$iter(),f=e.tp$iternext(),otherk=otheriter.tp$iternext();void 0!==f;f=e.tp$iternext(),otherk=otheriter.tp$iternext()){if(!Sk.misceval.isTrue(Sk.misceval.richCompareBool(f,otherk,\"Eq\")))return Sk.builtin.bool.false$;if(g=this.mp$subscript(f),otherv=a.mp$subscript(otherk),!Sk.misceval.isTrue(Sk.misceval.richCompareBool(g,otherv,\"Eq\")))return Sk.builtin.bool.false$}return Sk.builtin.bool.true$},b.OrderedDict.prototype.ob$ne=function(a){var c,d,e,f,g;if(!(a instanceof b.OrderedDict))return Sk.builtin.dict.prototype.ob$ne.call(this,a);if(c=this.size,d=a.size,c!==d)return Sk.builtin.bool.true$;for(e=this.tp$iter(),otheriter=a.tp$iter(),f=e.tp$iternext(),otherk=otheriter.tp$iternext();void 0!==f;f=e.tp$iternext(),otherk=otheriter.tp$iternext()){if(!Sk.misceval.isTrue(Sk.misceval.richCompareBool(f,otherk,\"Eq\")))return Sk.builtin.bool.true$;if(g=this.mp$subscript(f),otherv=a.mp$subscript(otherk),!Sk.misceval.isTrue(Sk.misceval.richCompareBool(g,otherv,\"Eq\")))return Sk.builtin.bool.true$}return Sk.builtin.bool.false$},b.OrderedDict.prototype.pop=new Sk.builtin.func(function(a,b,c){var d;return Sk.builtin.pyCheckArgsLen(\"pop\",arguments.length,2,3),d=a.orderedkeys.indexOf(b),-1!=d&&a.orderedkeys.splice(d,1),Sk.misceval.callsimArray(Sk.builtin.dict.prototype.pop,[a,b,c])}),b.OrderedDict.prototype.popitem=new Sk.builtin.func(function(a,b){var c,d,e;if(Sk.builtin.pyCheckArgsLen(\"popitem\",arguments.length,1,2),0==a.orderedkeys.length)throw e=new Sk.builtin.str(\"dictionary is empty\"),new Sk.builtin.KeyError(e.v);return c=a.orderedkeys[0],(void 0===b||Sk.misceval.isTrue(b))&&(c=a.orderedkeys[a.orderedkeys.length-1]),d=Sk.misceval.callsimArray(a.pop,[a,c]),Sk.builtin.tuple([c,d])}),b.deque=function(){throw new Sk.builtin.NotImplementedError(\"deque is not implemented\")},b.namedtuples={};var c=function(b){for(var a=[],c=0;c<=b.length;c++)if(void 0===a[b[c]])a[b[c]]=1;else return!0;return!1},d=function(a,b){function c(){}c.prototype=b.prototype,a.superClass_=b.prototype,a.prototype=new c,a.prototype.constructor=a};return b.namedtuple=new Sk.builtin.func(function(e,f){if(Sk.ffi.remapToJs(Sk.misceval.callsimArray(a.$d.iskeyword,[e])))throw new Sk.builtin.ValueError(\"Type names and field names cannot be a keyword: \"+e.v);var g=Sk.ffi.remapToJs(e);if(startsw=new RegExp(/^[0-9].*/),startsw2=new RegExp(/^[0-9_].*/),alnum=new RegExp(/^\\w*$/),startsw.test(g)||!alnum.test(g))throw new Sk.builtin.ValueError(\" Bad type name \"+g);var h=Sk.ffi.remapToJs(f);for(\"string\"==typeof h&&(h=h.split(/\\s+/)),i=0;i<h.length;i++)if(Sk.ffi.remapToJs(Sk.misceval.callsimArray(a.$d.iskeyword,[Sk.ffi.remapToPy(h[i])]))||startsw2.test(h[i])||!alnum.test(h[i]))throw new Sk.builtin.ValueError(\"Type names and field names cannot be a keyword: \"+h[i]);if(c(h))throw new Sk.builtin.ValueError(\"Field names must be unique.\");var j=function(){var a;if(arguments.length!==h.length)throw new Sk.builtin.TypeError(\"Number of arguments must match\");return this instanceof b.namedtuples[g]?void(this.__class__=b.namedtuples[g],this.v=Array.prototype.slice.call(arguments)):(a=Object.create(b.namedtuples[g].prototype),a.constructor.apply(a,arguments),a)};return b.namedtuples[g]=j,d(j,Sk.builtin.tuple),j.prototype.tp$name=g,j.prototype.ob$type=Sk.builtin.type.makeIntoTypeObj(g,b.namedtuples[g]),j.prototype.$r=function(){var a,b,c;if(0===this.v.length)return new Sk.builtin.str(g+\"()\");for(c=[],b=0;b<this.v.length;++b)c[b]=h[b]+\"=\"+Sk.misceval.objectRepr(this.v[b]).v;return a=c.join(\", \"),1===this.v.length&&(a+=\",\"),new Sk.builtin.str(g+\"(\"+a+\")\")},j.prototype.tp$getattr=function(a){var b=a.$jsstr(),c=h.indexOf(b);return 0<=c?this.v[c]:void 0},j.prototype.tp$setattr=function(){throw new Sk.builtin.AttributeError(\"can't set attribute\")},j}),b})};","src/lib/colorsys.py":"raise NotImplementedError(\"colorsys is not yet implemented in Skulpt\")\n","src/lib/commands.py":"raise NotImplementedError(\"commands is not yet implemented in Skulpt\")\n","src/lib/compileall.py":"raise NotImplementedError(\"compileall is not yet implemented in Skulpt\")\n","src/lib/compiler/__init__.py":"raise NotImplementedError(\"compiler is not yet implemented in Skulpt\")\n","src/lib/config/__init__.py":"raise NotImplementedError(\"config is not yet implemented in Skulpt\")\n","src/lib/contextlib.py":"raise NotImplementedError(\"contextlib is not yet implemented in Skulpt\")\n","src/lib/cookielib.py":"raise NotImplementedError(\"cookielib is not yet implemented in Skulpt\")\n","src/lib/copy.py":"\"\"\"\nThis file was modified from CPython.\nCopyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n2011, 2012, 2013, 2014, 2015 Python Software Foundation; All Rights Reserved\n\"\"\"\nimport types\nclass Error(Exception):\n    pass\nerror = Error \nclass _EmptyClass:\n    pass\n\ndef copy(x):\n    cls = type(x)\n    if callable(x):\n        return x\n    copier = getattr(cls, \"__copy__\", None)\n    if copier:\n        return copier(x)\n    if cls in (type(None), int, float, bool, long, str, tuple, type):\n        return x\n    if (cls == list) or (cls == dict) or (cls == set) or (cls == slice):\n        return cls(x)\n    try:\n        getstate = getattr(x, \"__getstate__\", None)\n        setstate = getattr(x, \"__setstate__\", None)\n        initargs = getattr(x, \"__getinitargs__\", None)\n    except:\n        reductor = False\n    if getstate or setstate or initargs:\n        raise NotImplementedError(\"Skulpt does not yet support copying with user-defined __getstate__, __setstate__ or __getinitargs__()\")\n    reductor = getattr(x, \"__reduce_ex__\", None)\n    if reductor:\n        rv = reductor(4)\n    else:\n        reductor = getattr(x, \"__reduce__\", None)\n        if reductor:\n            rv = reductor()\n        elif str(cls)[1:6] == \"class\":\n            copier = _copy_inst\n            return copier(x)\n        else:\n            raise Error(\"un(shallow)copyable object of type %s\" % cls)\n    if isinstance(rv, str):\n        return x\n    return _reconstruct(x, rv, 0)\n\ndef _copy_inst(x):\n    if hasattr(x, '__copy__'):\n        return x.__copy__()\n    if hasattr(x, '__getinitargs__'):\n        args = x.__getinitargs__()\n        y = x.__class__(*args)\n    else:\n        y = _EmptyClass()\n        y.__class__ = x.__class__\n    if hasattr(x, '__getstate__'):\n        state = x.__getstate__()\n    else:\n        state = x.__dict__\n    if hasattr(y, '__setstate__'):\n        y.__setstate__(state)\n    else:\n        y.__dict__.update(state)\n    return y\n\nd = _deepcopy_dispatch = {}\n\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}\n    idx = id(x)\n    y = memo.get(idx, _nil)\n    if y is not _nil:\n        return y\n    cls = type(x)\n    try:\n        getstate = getattr(x, \"__getstate__\", None)\n        setstate = getattr(x, \"__setstate__\", None)\n        initargs = getattr(x, \"__getinitargs__\", None)\n    except:\n        reductor = False\n    if getstate or setstate or initargs:\n        raise NotImplementedError(\"Skulpt does not yet support copying with user-defined __getstate__, __setstate__ or __getinitargs__()\")\n    copier = _deepcopy_dispatch.get(cls)\n    if copier:\n        y = copier(x, memo)\n    elif str(cls)[1:6] == \"class\":\n        copier = _deepcopy_dispatch[\"InstanceType\"]\n        y = copier(x, memo)\n    else:\n        try:\n            issc = issubclass(cls, type)\n        except TypeError: # cls is not a class (old Boost; see SF #502085)\n            issc = 0\n        if issc:\n            y = _deepcopy_atomic(x, memo)\n        else:\n            copier = getattr(x, \"__deepcopy__\", None)\n            if copier:\n                y = copier(memo)\n            else:\n                reductor = getattr(x, \"__reduce_ex__\", None)\n                if reductor:\n                    rv = reductor(2)\n                else:\n                    reductor = getattr(x, \"__reduce__\", None)\n                    if reductor:\n                        rv = reductor()\n                    else:\n                        raise Error(\n                            \"un(deep)copyable object of type %s\" % cls)\n                y = _reconstruct(x, rv, 1, memo)\n    memo[idx] = y\n    _keep_alive(x, memo) # Make sure x lives at least as long as d\n    return y\n\ndef _deepcopy_atomic(x, memo):\n    return x\nd[type(None)] = _deepcopy_atomic\n# d[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\n# d[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\n# try:\n# d[types.CodeType] = _deepcopy_atomic\n# except AttributeError:\n#   pass\nd[type] = _deepcopy_atomic\n# d[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\n# d[weakref.ref] = _deepcopy_atomic\n\ndef _deepcopy_list(x, memo):\n    y = []\n    memo[id(x)] = y\n    for a in x:\n        y.append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list\n\ndef _deepcopy_set(x, memo):\n    result = set([])  # make empty set\n    memo[id(x)] = result  # register this set in the memo for loop checking\n    for a in x:   # go through elements of set\n        result.add(deepcopy(a, memo))  # add the copied elements into the new set\n    return result # return the new set\nd[set] = _deepcopy_set\n\ndef _deepcopy_tuple(x, memo):\n    y = [deepcopy(a, memo) for a in x]\n    # We're not going to put the tuple in the memo, but it's still important we\n    # check for it, in case the tuple contains recursive mutable structures.\n    try:\n        return memo[id(x)]\n    except KeyError:\n        pass\n    for k, j in zip(x, y):\n        if k is not j:\n            y = tuple(y)\n            break\n    else:\n        y = x\n    return y\nd[tuple] = _deepcopy_tuple\n\ndef _deepcopy_dict(x, memo):\n    y = {}\n    memo[id(x)] = y\n    for key, value in x.items():\n        y[deepcopy(key, memo)] = deepcopy(value, memo)\n    return y\nd[dict] = _deepcopy_dict\n\n# def _deepcopy_method(x, memo): # Copy instance methods\n#     y = type(x)(x.im_func, deepcopy(x.im_self, memo), x.im_class);\n#     return y\nd[types.MethodType] = _deepcopy_atomic\n\ndef _deepcopy_inst(x, memo):\n    if hasattr(x, '__deepcopy__'):\n         return x.__deepcopy__(memo)\n    if hasattr(x, '__getinitargs__'):\n        args = x.__getinitargs__()\n        args = deepcopy(args, memo)\n        y = x.__class__(*args)\n    else:\n        y = _EmptyClass()\n        y.__class__ = x.__class__\n    memo[id(x)] = y\n    if hasattr(x, '__getstate__'):\n        state = x.__getstate__()\n    else:\n        state = x.__dict__\n    state = deepcopy(state, memo)\n    if hasattr(y, '__setstate__'):\n        y.__setstate__(state)\n    else:\n        y.__dict__.update(state)\n        return y\nd[\"InstanceType\"] = _deepcopy_inst\n\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...\n    \"\"\"\n    try:\n        memo[id(memo)].append(x)\n    except KeyError:\n        # aha, this is the first one :-)\n        memo[id(memo)]=[x]\n\ndef _reconstruct(x, info, deep, memo=None):\n    if isinstance(info, str):\n        return x\n    assert isinstance(info, tuple)\n    if memo is None:\n        memo = {}\n    n = len(info)\n    assert n in (2, 3, 4, 5)\n    callable, args = info[:2]\n    if n > 2:\n        state = info[2]\n    else:\n        state = None\n    if n > 3:\n        listiter = info[3]\n    else:\n        listiter = None\n    if n > 4:\n        dictiter = info[4]\n    else:\n        dictiter = None\n    if deep:\n        args = deepcopy(args, memo)\n    y = callable(*args)\n    memo[id(x)] = y\n\n    if state is not None:\n        if deep:\n            state = deepcopy(state, memo)\n        if hasattr(y, '__setstate__'):\n            y.__setstate__(state)\n        else:\n            if isinstance(state, tuple) and len(state) == 2:\n                state, slotstate = state\n            else:\n                slotstate = None\n            if state is not None:\n                y.__dict__.update(state)\n            if slotstate is not None:\n                for key, value in slotstate.items():\n                    setattr(y, key, value)\n\n    if listiter is not None:\n        for item in listiter:\n            if deep:\n                item = deepcopy(item, memo)\n            y.append(item)\n    if dictiter is not None:\n        for key, value in dictiter:\n            if deep:\n                key = deepcopy(key, memo)\n                value = deepcopy(value, memo)\n            y[key] = value\n    return y\n\ndel d\n\ndel types\n\n# Helper for instance creation without calling __init__\nclass _EmptyClass:\n    pass","src/lib/copy_reg.py":"raise NotImplementedError(\"copy_reg is not yet implemented in Skulpt\")\n","src/lib/csv.py":"raise NotImplementedError(\"csv is not yet implemented in Skulpt\")\n","src/lib/ctypes/__init__.py":"raise NotImplementedError(\"ctypes is not yet implemented in Skulpt\")\n","src/lib/ctypes/macholib/__init__.py":"raise NotImplementedError(\"macholib is not yet implemented in Skulpt\")\n","src/lib/curses/__init__.py":"raise NotImplementedError(\"curses is not yet implemented in Skulpt\")\n","src/lib/datetime.py":"\"\"\"Concrete date/time and related types -- prototype implemented in Python.\n\nSee http://www.zope.org/Members/fdrake/DateTimeWiki/FrontPage\n\nSee also http://dir.yahoo.com/Reference/calendars/\n\nFor a primer on DST, including many current DST rules, see\nhttp://webexhibits.org/daylightsaving/\n\nFor more about DST than you ever wanted to know, see\nftp://elsie.nci.nih.gov/pub/\n\nSources for time zone and DST data: http://www.twinsun.com/tz/tz-link.htm\n\nThis was originally copied from the sandbox of the CPython CVS repository.\nThanks to Tim Peters for suggesting using it.\n\nThis was then copied from PyPy v5.1.0 into Skulpt by Meredydd Luff, removing\n'from __future__ import division' (and replacing division operators accordingly)\nand pickle support (which requires 'struct', which Skulpt does not currently\n[as of 31/8/2016] have)\n\"\"\"\n\nimport time as _time\nimport math as _math\n\n_SENTINEL = object()\n\ndef _cmp(x, y):\n    return 0 if x == y else 1 if x > y else -1\n\ndef _round(x):\n    return int(_math.floor(x + 0.5) if x >= 0.0 else _math.ceil(x - 0.5))\n\nMINYEAR = 1\nMAXYEAR = 9999\n_MINYEARFMT = 1900\n\n_MAX_DELTA_DAYS = 999999999\n\n# Utility functions, adapted from Python's Demo/classes/Dates.py, which\n# also assumes the current Gregorian calendar indefinitely extended in\n# both directions.  Difference:  Dates.py calls January 1 of year 0 day\n# number 1.  The code here calls January 1 of year 1 day number 1.  This is\n# to match the definition of the \"proleptic Gregorian\" calendar in Dershowitz\n# and Reingold's \"Calendrical Calculations\", where it's the base calendar\n# for all computations.  See the book for algorithms for converting between\n# proleptic Gregorian ordinals and many other calendar systems.\n\n_DAYS_IN_MONTH = [-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n_DAYS_BEFORE_MONTH = [-1]\ndbm = 0\nfor dim in _DAYS_IN_MONTH[1:]:\n    _DAYS_BEFORE_MONTH.append(dbm)\n    dbm += dim\ndel dbm, dim\n\ndef _is_leap(year):\n    \"year -> 1 if leap year, else 0.\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\ndef _days_before_year(year):\n    \"year -> number of days before January 1st of year.\"\n    y = year - 1\n    return y*365 + y//4 - y//100 + y//400\n\ndef _days_in_month(year, month):\n    \"year, month -> number of days in that month in that year.\"\n    assert 1 <= month <= 12, month\n    if month == 2 and _is_leap(year):\n        return 29\n    return _DAYS_IN_MONTH[month]\n\ndef _days_before_month(year, month):\n    \"year, month -> number of days in year preceding first day of month.\"\n    assert 1 <= month <= 12, 'month must be in 1..12'\n    return _DAYS_BEFORE_MONTH[month] + (month > 2 and _is_leap(year))\n\ndef _ymd2ord(year, month, day):\n    \"year, month, day -> ordinal, considering 01-Jan-0001 as day 1.\"\n    assert 1 <= month <= 12, 'month must be in 1..12'\n    dim = _days_in_month(year, month)\n    assert 1 <= day <= dim, ('day must be in 1..%d' % dim)\n    return (_days_before_year(year) +\n            _days_before_month(year, month) +\n            day)\n\n_DI400Y = _days_before_year(401)    # number of days in 400 years\n_DI100Y = _days_before_year(101)    #    \"    \"   \"   \" 100   \"\n_DI4Y   = _days_before_year(5)      #    \"    \"   \"   \"   4   \"\n\n# A 4-year cycle has an extra leap day over what we'd get from pasting\n# together 4 single years.\nassert _DI4Y == 4 * 365 + 1\n\n# Similarly, a 400-year cycle has an extra leap day over what we'd get from\n# pasting together 4 100-year cycles.\nassert _DI400Y == 4 * _DI100Y + 1\n\n# OTOH, a 100-year cycle has one fewer leap day than we'd get from\n# pasting together 25 4-year cycles.\nassert _DI100Y == 25 * _DI4Y - 1\n\n_US_PER_US = 1\n_US_PER_MS = 1000\n_US_PER_SECOND = 1000000\n_US_PER_MINUTE = 60000000\n_SECONDS_PER_DAY = 24 * 3600\n_US_PER_HOUR = 3600000000\n_US_PER_DAY = 86400000000\n_US_PER_WEEK = 604800000000\n\ndef _ord2ymd(n):\n    \"ordinal -> (year, month, day), considering 01-Jan-0001 as day 1.\"\n\n    # n is a 1-based index, starting at 1-Jan-1.  The pattern of leap years\n    # repeats exactly every 400 years.  The basic strategy is to find the\n    # closest 400-year boundary at or before n, then work with the offset\n    # from that boundary to n.  Life is much clearer if we subtract 1 from\n    # n first -- then the values of n at 400-year boundaries are exactly\n    # those divisible by _DI400Y:\n    #\n    #     D  M   Y            n              n-1\n    #     -- --- ----        ----------     ----------------\n    #     31 Dec -400        -_DI400Y       -_DI400Y -1\n    #      1 Jan -399         -_DI400Y +1   -_DI400Y      400-year boundary\n    #     ...\n    #     30 Dec  000        -1             -2\n    #     31 Dec  000         0             -1\n    #      1 Jan  001         1              0            400-year boundary\n    #      2 Jan  001         2              1\n    #      3 Jan  001         3              2\n    #     ...\n    #     31 Dec  400         _DI400Y        _DI400Y -1\n    #      1 Jan  401         _DI400Y +1     _DI400Y      400-year boundary\n    n -= 1\n    n400, n = divmod(n, _DI400Y)\n    year = n400 * 400 + 1   # ..., -399, 1, 401, ...\n\n    # Now n is the (non-negative) offset, in days, from January 1 of year, to\n    # the desired date.  Now compute how many 100-year cycles precede n.\n    # Note that it's possible for n100 to equal 4!  In that case 4 full\n    # 100-year cycles precede the desired day, which implies the desired\n    # day is December 31 at the end of a 400-year cycle.\n    n100, n = divmod(n, _DI100Y)\n\n    # Now compute how many 4-year cycles precede it.\n    n4, n = divmod(n, _DI4Y)\n\n    # And now how many single years.  Again n1 can be 4, and again meaning\n    # that the desired day is December 31 at the end of the 4-year cycle.\n    n1, n = divmod(n, 365)\n\n    year += n100 * 100 + n4 * 4 + n1\n    if n1 == 4 or n100 == 4:\n        assert n == 0\n        return year-1, 12, 31\n\n    # Now the year is correct, and n is the offset from January 1.  We find\n    # the month via an estimate that's either exact or one too large.\n    leapyear = n1 == 3 and (n4 != 24 or n100 == 3)\n    assert leapyear == _is_leap(year)\n    month = (n + 50) >> 5\n    preceding = _DAYS_BEFORE_MONTH[month] + (month > 2 and leapyear)\n    if preceding > n:  # estimate is too large\n        month -= 1\n        preceding -= _DAYS_IN_MONTH[month] + (month == 2 and leapyear)\n    n -= preceding\n    assert 0 <= n < _days_in_month(year, month)\n\n    # Now the year and month are correct, and n is the offset from the\n    # start of that month:  we're done!\n    return year, month, n+1\n\n# Month and day names.  For localized versions, see the calendar module.\n_MONTHNAMES = [None, \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                     \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n_DAYNAMES = [None, \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n\ndef _build_struct_time(y, m, d, hh, mm, ss, dstflag):\n    wday = (_ymd2ord(y, m, d) + 6) % 7\n    dnum = _days_before_month(y, m) + d\n    return _time.struct_time((y, m, d, hh, mm, ss, wday, dnum, dstflag))\n\ndef _format_time(hh, mm, ss, us):\n    # Skip trailing microseconds when us==0.\n    result = \"%02d:%02d:%02d\" % (hh, mm, ss)\n    if us:\n        result += \".%06d\" % us\n    return result\n\n# Correctly substitute for %z and %Z escapes in strftime formats.\ndef _wrap_strftime(object, format, timetuple):\n    year = timetuple[0]\n    if year < _MINYEARFMT:\n        raise ValueError(\"year=%d is before %d; the datetime strftime() \"\n                         \"methods require year >= %d\" %\n                         (year, _MINYEARFMT, _MINYEARFMT))\n    # Don't call utcoffset() or tzname() unless actually needed.\n    freplace = None  # the string to use for %f\n    zreplace = None  # the string to use for %z\n    Zreplace = None  # the string to use for %Z\n\n    # Scan format for %z and %Z escapes, replacing as needed.\n    newformat = []\n    push = newformat.append\n    i, n = 0, len(format)\n    while i < n:\n        ch = format[i]\n        i += 1\n        if ch == '%':\n            if i < n:\n                ch = format[i]\n                i += 1\n                if ch == 'f':\n                    if freplace is None:\n                        freplace = '%06d' % getattr(object,\n                                                    'microsecond', 0)\n                    newformat.append(freplace)\n                elif ch == 'z':\n                    if zreplace is None:\n                        zreplace = \"\"\n                        if hasattr(object, \"_utcoffset\"):\n                            offset = object._utcoffset()\n                            if offset is not None:\n                                sign = '+'\n                                if offset < 0:\n                                    offset = -offset\n                                    sign = '-'\n                                h, m = divmod(offset, 60)\n                                zreplace = '%c%02d%02d' % (sign, h, m)\n                    assert '%' not in zreplace\n                    newformat.append(zreplace)\n                elif ch == 'Z':\n                    if Zreplace is None:\n                        Zreplace = \"\"\n                        if hasattr(object, \"tzname\"):\n                            s = object.tzname()\n                            if s is not None:\n                                # strftime is going to have at this: escape %\n                                Zreplace = s.replace('%', '%%')\n                    newformat.append(Zreplace)\n                else:\n                    push('%')\n                    push(ch)\n            else:\n                push('%')\n        else:\n            push(ch)\n    newformat = \"\".join(newformat)\n    return _time.strftime(newformat, timetuple)\n\n# Just raise TypeError if the arg isn't None or a string.\ndef _check_tzname(name):\n    if name is not None and not isinstance(name, str):\n        raise TypeError(\"tzinfo.tzname() must return None or string, \"\n                        \"not '%s'\" % type(name))\n\n# name is the offset-producing method, \"utcoffset\" or \"dst\".\n# offset is what it returned.\n# If offset isn't None or timedelta, raises TypeError.\n# If offset is None, returns None.\n# Else offset is checked for being in range, and a whole # of minutes.\n# If it is, its integer value is returned.  Else ValueError is raised.\ndef _check_utc_offset(name, offset):\n    assert name in (\"utcoffset\", \"dst\")\n    if offset is None:\n        return\n    if not isinstance(offset, timedelta):\n        raise TypeError(\"tzinfo.%s() must return None \"\n                        \"or timedelta, not '%s'\" % (name, type(offset)))\n    days = offset.days\n    if days < -1 or days > 0:\n        offset = 1440  # trigger out-of-range\n    else:\n        seconds = days * 86400 + offset.seconds\n        minutes, seconds = divmod(seconds, 60)\n        if seconds or offset.microseconds:\n            raise ValueError(\"tzinfo.%s() must return a whole number \"\n                             \"of minutes\" % name)\n        offset = minutes\n    if not -1440 < offset < 1440:\n        raise ValueError(\"%s()=%d, must be in -1439..1439\" % (name, offset))\n    return offset\n\ndef _check_int_field(value):\n    if isinstance(value, int):\n        return int(value)\n    if not isinstance(value, float):\n        try:\n            value = value.__int__()\n        except AttributeError:\n            pass\n        else:\n            if isinstance(value, int):\n                return int(value)\n            elif isinstance(value, long):\n                return int(long(value))\n            raise TypeError('__int__ method should return an integer')\n        raise TypeError('an integer is required')\n    raise TypeError('integer argument expected, got float')\n\ndef _check_date_fields(year, month, day):\n    year = _check_int_field(year)\n    month = _check_int_field(month)\n    day = _check_int_field(day)\n    if not MINYEAR <= year <= MAXYEAR:\n        raise ValueError('year must be in %d..%d' % (MINYEAR, MAXYEAR), year)\n    if not 1 <= month <= 12:\n        raise ValueError('month must be in 1..12', month)\n    dim = _days_in_month(year, month)\n    if not 1 <= day <= dim:\n        raise ValueError('day must be in 1..%d' % dim, day)\n    return year, month, day\n\ndef _check_time_fields(hour, minute, second, microsecond):\n    hour = _check_int_field(hour)\n    minute = _check_int_field(minute)\n    second = _check_int_field(second)\n    microsecond = _check_int_field(microsecond)\n    if not 0 <= hour <= 23:\n        raise ValueError('hour must be in 0..23', hour)\n    if not 0 <= minute <= 59:\n        raise ValueError('minute must be in 0..59', minute)\n    if not 0 <= second <= 59:\n        raise ValueError('second must be in 0..59', second)\n    if not 0 <= microsecond <= 999999:\n        raise ValueError('microsecond must be in 0..999999', microsecond)\n    return hour, minute, second, microsecond\n\ndef _check_tzinfo_arg(tz):\n    if tz is not None and not isinstance(tz, tzinfo):\n        raise TypeError(\"tzinfo argument must be None or of a tzinfo subclass\")\n\n\n# Notes on comparison:  In general, datetime module comparison operators raise\n# TypeError when they don't know how to do a comparison themself.  If they\n# returned NotImplemented instead, comparison could (silently) fall back to\n# the default compare-objects-by-comparing-their-memory-addresses strategy,\n# and that's not helpful.  There are two exceptions:\n#\n# 1. For date and datetime, if the other object has a \"timetuple\" attr,\n#    NotImplemented is returned.  This is a hook to allow other kinds of\n#    datetime-like objects a chance to intercept the comparison.\n#\n# 2. Else __eq__ and __ne__ return False and True, respectively.  This is\n#    so opertaions like\n#\n#        x == y\n#        x != y\n#        x in sequence\n#        x not in sequence\n#        dict[x] = y\n#\n#    don't raise annoying TypeErrors just because a datetime object\n#    is part of a heterogeneous collection.  If there's no known way to\n#    compare X to a datetime, saying they're not equal is reasonable.\n\ndef _cmperror(x, y):\n    raise TypeError(\"can't compare '%s' to '%s'\" % (\n                    type(x).__name__, type(y).__name__))\n\ndef _normalize_pair(hi, lo, factor):\n    if not 0 <= lo <= factor-1:\n        inc, lo = divmod(lo, factor)\n        hi += inc\n    return hi, lo\n\ndef _normalize_datetime(y, m, d, hh, mm, ss, us, ignore_overflow=False):\n    # Normalize all the inputs, and store the normalized values.\n    ss, us = _normalize_pair(ss, us, 1000000)\n    mm, ss = _normalize_pair(mm, ss, 60)\n    hh, mm = _normalize_pair(hh, mm, 60)\n    d, hh = _normalize_pair(d, hh, 24)\n    y, m, d = _normalize_date(y, m, d, ignore_overflow)\n    return y, m, d, hh, mm, ss, us\n\ndef _normalize_date(year, month, day, ignore_overflow=False):\n    # That was easy.  Now it gets muddy:  the proper range for day\n    # can't be determined without knowing the correct month and year,\n    # but if day is, e.g., plus or minus a million, the current month\n    # and year values make no sense (and may also be out of bounds\n    # themselves).\n    # Saying 12 months == 1 year should be non-controversial.\n    if not 1 <= month <= 12:\n        year, month = _normalize_pair(year, month-1, 12)\n        month += 1\n        assert 1 <= month <= 12\n\n    # Now only day can be out of bounds (year may also be out of bounds\n    # for a datetime object, but we don't care about that here).\n    # If day is out of bounds, what to do is arguable, but at least the\n    # method here is principled and explainable.\n    dim = _days_in_month(year, month)\n    if not 1 <= day <= dim:\n        # Move day-1 days from the first of the month.  First try to\n        # get off cheap if we're only one day out of range (adjustments\n        # for timezone alone can't be worse than that).\n        if day == 0:    # move back a day\n            month -= 1\n            if month > 0:\n                day = _days_in_month(year, month)\n            else:\n                year, month, day = year-1, 12, 31\n        elif day == dim + 1:    # move forward a day\n            month += 1\n            day = 1\n            if month > 12:\n                month = 1\n                year += 1\n        else:\n            ordinal = _ymd2ord(year, month, 1) + (day - 1)\n            year, month, day = _ord2ymd(ordinal)\n\n    if not ignore_overflow and not MINYEAR <= year <= MAXYEAR:\n        raise OverflowError(\"date value out of range\")\n    return year, month, day\n\ndef _accum(tag, sofar, num, factor, leftover):\n    if isinstance(num, (int, long)):\n        prod = num * factor\n        rsum = sofar + prod\n        return rsum, leftover\n    if isinstance(num, float):\n        fracpart, intpart = _math.modf(num)\n        prod = int(intpart) * factor\n        rsum = sofar + prod\n        if fracpart == 0.0:\n            return rsum, leftover\n        assert isinstance(factor, (int, long))\n        fracpart, intpart = _math.modf(factor * fracpart)\n        rsum += int(intpart)\n        return rsum, leftover + fracpart\n    raise TypeError(\"unsupported type for timedelta %s component: %s\" %\n                    (tag, type(num)))\n\nclass timedelta(object):\n    \"\"\"Represent the difference between two datetime objects.\n\n    Supported operators:\n\n    - add, subtract timedelta\n    - unary plus, minus, abs\n    - compare to timedelta\n    - multiply, divide by int/long\n\n    In addition, datetime supports subtraction of two datetime objects\n    returning a timedelta, and addition or subtraction of a datetime\n    and a timedelta giving a datetime.\n\n    Representation: (days, seconds, microseconds).  Why?  Because I\n    felt like it.\n    \"\"\"\n    __slots__ = '_days', '_seconds', '_microseconds', '_hashcode'\n\n    def __new__(cls, days=_SENTINEL, seconds=_SENTINEL, microseconds=_SENTINEL,\n                milliseconds=_SENTINEL, minutes=_SENTINEL, hours=_SENTINEL, weeks=_SENTINEL):\n        x = 0\n        leftover = 0.0\n        if microseconds is not _SENTINEL:\n            x, leftover = _accum(\"microseconds\", x, microseconds, _US_PER_US, leftover)\n        if milliseconds is not _SENTINEL:\n            x, leftover = _accum(\"milliseconds\", x, milliseconds, _US_PER_MS, leftover)\n        if seconds is not _SENTINEL:\n            x, leftover = _accum(\"seconds\", x, seconds, _US_PER_SECOND, leftover)\n        if minutes is not _SENTINEL:\n            x, leftover = _accum(\"minutes\", x, minutes, _US_PER_MINUTE, leftover)\n        if hours is not _SENTINEL:\n            x, leftover = _accum(\"hours\", x, hours, _US_PER_HOUR, leftover)\n        if days is not _SENTINEL:\n            x, leftover = _accum(\"days\", x, days, _US_PER_DAY, leftover)\n        if weeks is not _SENTINEL:\n            x, leftover = _accum(\"weeks\", x, weeks, _US_PER_WEEK, leftover)\n        if leftover != 0.0:\n            x += _round(leftover)\n        return cls._from_microseconds(x)\n\n    @classmethod\n    def _from_microseconds(cls, us):\n        s, us = divmod(us, _US_PER_SECOND)\n        d, s = divmod(s, _SECONDS_PER_DAY)\n        return cls._create(d, s, us, False)\n\n    @classmethod\n    def _create(cls, d, s, us, normalize):\n        if normalize:\n            s, us = _normalize_pair(s, us, 1000000)\n            d, s = _normalize_pair(d, s, 24*3600)\n\n        if not -_MAX_DELTA_DAYS <= d <= _MAX_DELTA_DAYS:\n            raise OverflowError(\"days=%d; must have magnitude <= %d\" % (d, _MAX_DELTA_DAYS))\n\n        self = object.__new__(cls)\n        self._days = d\n        self._seconds = s\n        self._microseconds = us\n        self._hashcode = -1\n        return self\n\n    def _to_microseconds(self):\n        return ((self._days * _SECONDS_PER_DAY + self._seconds) * _US_PER_SECOND +\n                self._microseconds)\n\n    def __repr__(self):\n        module = \"datetime.\" if self.__class__ is timedelta else \"\"\n        if self._microseconds:\n            return \"%s(%d, %d, %d)\" % (module + self.__class__.__name__,\n                                       self._days,\n                                       self._seconds,\n                                       self._microseconds)\n        if self._seconds:\n            return \"%s(%d, %d)\" % (module + self.__class__.__name__,\n                                   self._days,\n                                   self._seconds)\n        return \"%s(%d)\" % (module + self.__class__.__name__, self._days)\n\n    def __str__(self):\n        mm, ss = divmod(self._seconds, 60)\n        hh, mm = divmod(mm, 60)\n        s = \"%d:%02d:%02d\" % (hh, mm, ss)\n        if self._days:\n            def plural(n):\n                return n, abs(n) != 1 and \"s\" or \"\"\n            s = (\"%d day%s, \" % plural(self._days)) + s\n        if self._microseconds:\n            s = s + \".%06d\" % self._microseconds\n        return s\n\n    def total_seconds(self):\n        \"\"\"Total seconds in the duration.\"\"\"\n        return self._to_microseconds() / 10.0**6\n\n    # Read-only field accessors\n    @property\n    def days(self):\n        \"\"\"days\"\"\"\n        return self._days\n\n    @property\n    def seconds(self):\n        \"\"\"seconds\"\"\"\n        return self._seconds\n\n    @property\n    def microseconds(self):\n        \"\"\"microseconds\"\"\"\n        return self._microseconds\n\n    def __add__(self, other):\n        if isinstance(other, timedelta):\n            # for CPython compatibility, we cannot use\n            # our __class__ here, but need a real timedelta\n            return timedelta._create(self._days + other._days,\n                                     self._seconds + other._seconds,\n                                     self._microseconds + other._microseconds,\n                                     True)\n        return NotImplemented\n\n    def __sub__(self, other):\n        if isinstance(other, timedelta):\n            # for CPython compatibility, we cannot use\n            # our __class__ here, but need a real timedelta\n            return timedelta._create(self._days - other._days,\n                                     self._seconds - other._seconds,\n                                     self._microseconds - other._microseconds,\n                                     True)\n        return NotImplemented\n\n    def __neg__(self):\n        # for CPython compatibility, we cannot use\n        # our __class__ here, but need a real timedelta\n        return timedelta._create(-self._days,\n                                 -self._seconds,\n                                 -self._microseconds,\n                                 True)\n\n    def __pos__(self):\n        # for CPython compatibility, we cannot use\n        # our __class__ here, but need a real timedelta\n        return timedelta._create(self._days,\n                                 self._seconds,\n                                 self._microseconds,\n                                 False)\n\n    def __abs__(self):\n        if self._days < 0:\n            return -self\n        else:\n            return self\n\n    def __mul__(self, other):\n        if not isinstance(other, (int, long)):\n            return NotImplemented\n        usec = self._to_microseconds()\n        return timedelta._from_microseconds(usec * other)\n\n    __rmul__ = __mul__\n\n    def __div__(self, other):\n        if not isinstance(other, (int, long)):\n            return NotImplemented\n        usec = self._to_microseconds()\n        return timedelta._from_microseconds(usec // other)\n\n    __floordiv__ = __div__\n\n    # Comparisons of timedelta objects with other.\n\n    def __eq__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) == 0\n        else:\n            return False\n\n    def __ne__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) != 0\n        else:\n            return True\n\n    def __le__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) <= 0\n        else:\n            _cmperror(self, other)\n\n    def __lt__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) < 0\n        else:\n            _cmperror(self, other)\n\n    def __ge__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) >= 0\n        else:\n            _cmperror(self, other)\n\n    def __gt__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) > 0\n        else:\n            _cmperror(self, other)\n\n    def _cmp(self, other):\n        assert isinstance(other, timedelta)\n        return _cmp(self._getstate(), other._getstate())\n\n    def __hash__(self):\n        if self._hashcode == -1:\n            self._hashcode = hash(self._getstate())\n        return self._hashcode\n\n    def __nonzero__(self):\n        return (self._days != 0 or\n                self._seconds != 0 or\n                self._microseconds != 0)\n\ntimedelta.min = timedelta(-_MAX_DELTA_DAYS)\ntimedelta.max = timedelta(_MAX_DELTA_DAYS, 24*3600-1, 1000000-1)\ntimedelta.resolution = timedelta(microseconds=1)\n\nclass date(object):\n    \"\"\"Concrete date type.\n\n    Constructors:\n\n    __new__()\n    fromtimestamp()\n    today()\n    fromordinal()\n\n    Operators:\n\n    __repr__, __str__\n    __cmp__, __hash__\n    __add__, __radd__, __sub__ (add/radd only with timedelta arg)\n\n    Methods:\n\n    timetuple()\n    toordinal()\n    weekday()\n    isoweekday(), isocalendar(), isoformat()\n    ctime()\n    strftime()\n\n    Properties (readonly):\n    year, month, day\n    \"\"\"\n    __slots__ = '_year', '_month', '_day', '_hashcode'\n\n    def __new__(cls, year, month=None, day=None):\n        \"\"\"Constructor.\n\n        Arguments:\n\n        year, month, day (required, base 1)\n        \"\"\"\n        year, month, day = _check_date_fields(year, month, day)\n        self = object.__new__(cls)\n        self._year = year\n        self._month = month\n        self._day = day\n        self._hashcode = -1\n        return self\n\n    # Additional constructors\n\n    @classmethod\n    def fromtimestamp(cls, t):\n        \"Construct a date from a POSIX timestamp (like time.time()).\"\n        y, m, d, hh, mm, ss, weekday, jday, dst = _time.localtime(t)\n        return cls(y, m, d)\n\n    @classmethod\n    def today(cls):\n        \"Construct a date from time.time().\"\n        t = _time.time()\n        return cls.fromtimestamp(t)\n\n    @classmethod\n    def fromordinal(cls, n):\n        \"\"\"Contruct a date from a proleptic Gregorian ordinal.\n\n        January 1 of year 1 is day 1.  Only the year, month and day are\n        non-zero in the result.\n        \"\"\"\n        y, m, d = _ord2ymd(n)\n        return cls(y, m, d)\n\n    # Conversions to string\n\n    def __repr__(self):\n        \"\"\"Convert to formal string, for repr().\n\n        >>> dt = datetime(2010, 1, 1)\n        >>> repr(dt)\n        'datetime.datetime(2010, 1, 1, 0, 0)'\n\n        >>> dt = datetime(2010, 1, 1, tzinfo=timezone.utc)\n        >>> repr(dt)\n        'datetime.datetime(2010, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)'\n        \"\"\"\n        module = \"datetime.\" if self.__class__ is date else \"\"\n        return \"%s(%d, %d, %d)\" % (module + self.__class__.__name__,\n                                   self._year,\n                                   self._month,\n                                   self._day)\n\n    # XXX These shouldn't depend on time.localtime(), because that\n    # clips the usable dates to [1970 .. 2038).  At least ctime() is\n    # easily done without using strftime() -- that's better too because\n    # strftime(\"%c\", ...) is locale specific.\n\n    def ctime(self):\n        \"Return ctime() style string.\"\n        weekday = self.toordinal() % 7 or 7\n        return \"%s %s %2d 00:00:00 %04d\" % (\n            _DAYNAMES[weekday],\n            _MONTHNAMES[self._month],\n            self._day, self._year)\n\n    def strftime(self, format):\n        \"Format using strftime().\"\n        return _wrap_strftime(self, format, self.timetuple())\n\n    def __format__(self, fmt):\n        if not isinstance(fmt, (str, unicode)):\n            raise ValueError(\"__format__ expects str or unicode, not %s\" %\n                             fmt.__class__.__name__)\n        if len(fmt) != 0:\n            return self.strftime(fmt)\n        return str(self)\n\n    def isoformat(self):\n        \"\"\"Return the date formatted according to ISO.\n\n        This is 'YYYY-MM-DD'.\n\n        References:\n        - http://www.w3.org/TR/NOTE-datetime\n        - http://www.cl.cam.ac.uk/~mgk25/iso-time.html\n        \"\"\"\n        return \"%04d-%02d-%02d\" % (self._year, self._month, self._day)\n\n    __str__ = isoformat\n\n    # Read-only field accessors\n    @property\n    def year(self):\n        \"\"\"year (1-9999)\"\"\"\n        return self._year\n\n    @property\n    def month(self):\n        \"\"\"month (1-12)\"\"\"\n        return self._month\n\n    @property\n    def day(self):\n        \"\"\"day (1-31)\"\"\"\n        return self._day\n\n    # Standard conversions, __cmp__, __hash__ (and helpers)\n\n    def timetuple(self):\n        \"Return local time tuple compatible with time.localtime().\"\n        return _build_struct_time(self._year, self._month, self._day,\n                                  0, 0, 0, -1)\n\n    def toordinal(self):\n        \"\"\"Return proleptic Gregorian ordinal for the year, month and day.\n\n        January 1 of year 1 is day 1.  Only the year, month and day values\n        contribute to the result.\n        \"\"\"\n        return _ymd2ord(self._year, self._month, self._day)\n\n    def replace(self, year=None, month=None, day=None):\n        \"\"\"Return a new date with new values for the specified fields.\"\"\"\n        if year is None:\n            year = self._year\n        if month is None:\n            month = self._month\n        if day is None:\n            day = self._day\n        return date(year, month, day)\n\n    # Comparisons of date objects with other.\n\n    def __eq__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) == 0\n        elif hasattr(other, \"timetuple\"):\n            return NotImplemented\n        else:\n            return False\n\n    def __ne__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) != 0\n        elif hasattr(other, \"timetuple\"):\n            return NotImplemented\n        else:\n            return True\n\n    def __le__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) <= 0\n        elif hasattr(other, \"timetuple\"):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def __lt__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) < 0\n        elif hasattr(other, \"timetuple\"):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def __ge__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) >= 0\n        elif hasattr(other, \"timetuple\"):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def __gt__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) > 0\n        elif hasattr(other, \"timetuple\"):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def _cmp(self, other):\n        assert isinstance(other, date)\n        y, m, d = self._year, self._month, self._day\n        y2, m2, d2 = other._year, other._month, other._day\n        return _cmp((y, m, d), (y2, m2, d2))\n\n    def __hash__(self):\n        \"Hash.\"\n        if self._hashcode == -1:\n            self._hashcode = hash(self._getstate())\n        return self._hashcode\n\n    # Computations\n\n    def _add_timedelta(self, other, factor):\n        y, m, d = _normalize_date(\n            self._year,\n            self._month,\n            self._day + other.days * factor)\n        return date(y, m, d)\n\n    def __add__(self, other):\n        \"Add a date to a timedelta.\"\n        if isinstance(other, timedelta):\n            return self._add_timedelta(other, 1)\n        return NotImplemented\n\n    __radd__ = __add__\n\n    def __sub__(self, other):\n        \"\"\"Subtract two dates, or a date and a timedelta.\"\"\"\n        if isinstance(other, date):\n            days1 = self.toordinal()\n            days2 = other.toordinal()\n            return timedelta._create(days1 - days2, 0, 0, False)\n        if isinstance(other, timedelta):\n            return self._add_timedelta(other, -1)\n        return NotImplemented\n\n    def weekday(self):\n        \"Return day of the week, where Monday == 0 ... Sunday == 6.\"\n        return (self.toordinal() + 6) % 7\n\n    # Day-of-the-week and week-of-the-year, according to ISO\n\n    def isoweekday(self):\n        \"Return day of the week, where Monday == 1 ... Sunday == 7.\"\n        # 1-Jan-0001 is a Monday\n        return self.toordinal() % 7 or 7\n\n    def isocalendar(self):\n        \"\"\"Return a 3-tuple containing ISO year, week number, and weekday.\n\n        The first ISO week of the year is the (Mon-Sun) week\n        containing the year's first Thursday; everything else derives\n        from that.\n\n        The first week is 1; Monday is 1 ... Sunday is 7.\n\n        ISO calendar algorithm taken from\n        http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm\n        \"\"\"\n        year = self._year\n        week1monday = _isoweek1monday(year)\n        today = _ymd2ord(self._year, self._month, self._day)\n        # Internally, week and day have origin 0\n        week, day = divmod(today - week1monday, 7)\n        if week < 0:\n            year -= 1\n            week1monday = _isoweek1monday(year)\n            week, day = divmod(today - week1monday, 7)\n        elif week >= 52:\n            if today >= _isoweek1monday(year+1):\n                year += 1\n                week = 0\n        return year, week+1, day+1\n\n_date_class = date  # so functions w/ args named \"date\" can get at the class\n\ndate.min = date(1, 1, 1)\ndate.max = date(9999, 12, 31)\ndate.resolution = timedelta(days=1)\n\nclass tzinfo(object):\n    \"\"\"Abstract base class for time zone info classes.\n\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n\n    def tzname(self, dt):\n        \"datetime -> string name of time zone.\"\n        raise NotImplementedError(\"tzinfo subclass must override tzname()\")\n\n    def utcoffset(self, dt):\n        \"datetime -> minutes east of UTC (negative for west of UTC)\"\n        raise NotImplementedError(\"tzinfo subclass must override utcoffset()\")\n\n    def dst(self, dt):\n        \"\"\"datetime -> DST offset in minutes east of UTC.\n\n        Return 0 if DST not in effect.  utcoffset() must include the DST\n        offset.\n        \"\"\"\n        raise NotImplementedError(\"tzinfo subclass must override dst()\")\n\n    def fromutc(self, dt):\n        \"datetime in UTC -> datetime in local time.\"\n\n        if not isinstance(dt, datetime):\n            raise TypeError(\"fromutc() requires a datetime argument\")\n        if dt.tzinfo is not self:\n            raise ValueError(\"dt.tzinfo is not self\")\n\n        dtoff = dt.utcoffset()\n        if dtoff is None:\n            raise ValueError(\"fromutc() requires a non-None utcoffset() \"\n                             \"result\")\n\n        # See the long comment block at the end of this file for an\n        # explanation of this algorithm.\n        dtdst = dt.dst()\n        if dtdst is None:\n            raise ValueError(\"fromutc() requires a non-None dst() result\")\n        delta = dtoff - dtdst\n        if delta:\n            dt = dt + delta\n            dtdst = dt.dst()\n            if dtdst is None:\n                raise ValueError(\"fromutc(): dt.dst gave inconsistent \"\n                                 \"results; cannot convert\")\n        if dtdst:\n            return dt + dtdst\n        else:\n            return dt\n\n_tzinfo_class = tzinfo\n\nclass time(object):\n    \"\"\"Time with time zone.\n\n    Constructors:\n\n    __new__()\n\n    Operators:\n\n    __repr__, __str__\n    __cmp__, __hash__\n\n    Methods:\n\n    strftime()\n    isoformat()\n    utcoffset()\n    tzname()\n    dst()\n\n    Properties (readonly):\n    hour, minute, second, microsecond, tzinfo\n    \"\"\"\n    __slots__ = '_hour', '_minute', '_second', '_microsecond', '_tzinfo', '_hashcode'\n\n    def __new__(cls, hour=0, minute=0, second=0, microsecond=0, tzinfo=None):\n        \"\"\"Constructor.\n\n        Arguments:\n\n        hour, minute (required)\n        second, microsecond (default to zero)\n        tzinfo (default to None)\n        \"\"\"\n        hour, minute, second, microsecond = _check_time_fields(\n            hour, minute, second, microsecond)\n        _check_tzinfo_arg(tzinfo)\n        self = object.__new__(cls)\n        self._hour = hour\n        self._minute = minute\n        self._second = second\n        self._microsecond = microsecond\n        self._tzinfo = tzinfo\n        self._hashcode = -1\n        return self\n\n    # Read-only field accessors\n    @property\n    def hour(self):\n        \"\"\"hour (0-23)\"\"\"\n        return self._hour\n\n    @property\n    def minute(self):\n        \"\"\"minute (0-59)\"\"\"\n        return self._minute\n\n    @property\n    def second(self):\n        \"\"\"second (0-59)\"\"\"\n        return self._second\n\n    @property\n    def microsecond(self):\n        \"\"\"microsecond (0-999999)\"\"\"\n        return self._microsecond\n\n    @property\n    def tzinfo(self):\n        \"\"\"timezone info object\"\"\"\n        return self._tzinfo\n\n    # Standard conversions, __hash__ (and helpers)\n\n    # Comparisons of time objects with other.\n\n    def __eq__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) == 0\n        else:\n            return False\n\n    def __ne__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) != 0\n        else:\n            return True\n\n    def __le__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) <= 0\n        else:\n            _cmperror(self, other)\n\n    def __lt__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) < 0\n        else:\n            _cmperror(self, other)\n\n    def __ge__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) >= 0\n        else:\n            _cmperror(self, other)\n\n    def __gt__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) > 0\n        else:\n            _cmperror(self, other)\n\n    def _cmp(self, other):\n        assert isinstance(other, time)\n        mytz = self._tzinfo\n        ottz = other._tzinfo\n        myoff = otoff = None\n\n        if mytz is ottz:\n            base_compare = True\n        else:\n            myoff = self._utcoffset()\n            otoff = other._utcoffset()\n            base_compare = myoff == otoff\n\n        if base_compare:\n            return _cmp((self._hour, self._minute, self._second,\n                         self._microsecond),\n                        (other._hour, other._minute, other._second,\n                         other._microsecond))\n        if myoff is None or otoff is None:\n            raise TypeError(\"can't compare offset-naive and offset-aware times\")\n        myhhmm = self._hour * 60 + self._minute - myoff\n        othhmm = other._hour * 60 + other._minute - otoff\n        return _cmp((myhhmm, self._second, self._microsecond),\n                    (othhmm, other._second, other._microsecond))\n\n    def __hash__(self):\n        \"\"\"Hash.\"\"\"\n        if self._hashcode == -1:\n            tzoff = self._utcoffset()\n            if not tzoff:  # zero or None\n                self._hashcode = hash(self._getstate()[0])\n            else:\n                h, m = divmod(self.hour * 60 + self.minute - tzoff, 60)\n                if 0 <= h < 24:\n                    self._hashcode = hash(time(h, m, self.second, self.microsecond))\n                else:\n                    self._hashcode = hash((h, m, self.second, self.microsecond))\n        return self._hashcode\n\n    # Conversion to string\n\n    def _tzstr(self, sep=\":\"):\n        \"\"\"Return formatted timezone offset (+xx:xx) or None.\"\"\"\n        off = self._utcoffset()\n        if off is not None:\n            if off < 0:\n                sign = \"-\"\n                off = -off\n            else:\n                sign = \"+\"\n            hh, mm = divmod(off, 60)\n            assert 0 <= hh < 24\n            off = \"%s%02d%s%02d\" % (sign, hh, sep, mm)\n        return off\n\n    def __repr__(self):\n        \"\"\"Convert to formal string, for repr().\"\"\"\n        if self._microsecond != 0:\n            s = \", %d, %d\" % (self._second, self._microsecond)\n        elif self._second != 0:\n            s = \", %d\" % self._second\n        else:\n            s = \"\"\n        module = \"datetime.\" if self.__class__ is time else \"\"\n        s= \"%s(%d, %d%s)\" % (module + self.__class__.__name__,\n                             self._hour, self._minute, s)\n        if self._tzinfo is not None:\n            assert s[-1:] == \")\"\n            s = s[:-1] + \", tzinfo=%r\" % self._tzinfo + \")\"\n        return s\n\n    def isoformat(self):\n        \"\"\"Return the time formatted according to ISO.\n\n        This is 'HH:MM:SS.mmmmmm+zz:zz', or 'HH:MM:SS+zz:zz' if\n        self.microsecond == 0.\n        \"\"\"\n        s = _format_time(self._hour, self._minute, self._second,\n                         self._microsecond)\n        tz = self._tzstr()\n        if tz:\n            s += tz\n        return s\n\n    __str__ = isoformat\n\n    def strftime(self, format):\n        \"\"\"Format using strftime().  The date part of the timestamp passed\n        to underlying strftime should not be used.\n        \"\"\"\n        # The year must be >= _MINYEARFMT else Python's strftime implementation\n        # can raise a bogus exception.\n        timetuple = (1900, 1, 1,\n                     self._hour, self._minute, self._second,\n                     0, 1, -1)\n        return _wrap_strftime(self, format, timetuple)\n\n    def __format__(self, fmt):\n        if not isinstance(fmt, (str, unicode)):\n            raise ValueError(\"__format__ expects str or unicode, not %s\" %\n                             fmt.__class__.__name__)\n        if len(fmt) != 0:\n            return self.strftime(fmt)\n        return str(self)\n\n    # Timezone functions\n\n    def utcoffset(self):\n        \"\"\"Return the timezone offset in minutes east of UTC (negative west of\n        UTC).\"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.utcoffset(None)\n        offset = _check_utc_offset(\"utcoffset\", offset)\n        if offset is not None:\n            offset = timedelta._create(0, offset * 60, 0, True)\n        return offset\n\n    # Return an integer (or None) instead of a timedelta (or None).\n    def _utcoffset(self):\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.utcoffset(None)\n        offset = _check_utc_offset(\"utcoffset\", offset)\n        return offset\n\n    def tzname(self):\n        \"\"\"Return the timezone name.\n\n        Note that the name is 100% informational -- there's no requirement that\n        it mean anything in particular. For example, \"GMT\", \"UTC\", \"-500\",\n        \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.\n        \"\"\"\n        if self._tzinfo is None:\n            return None\n        name = self._tzinfo.tzname(None)\n        _check_tzname(name)\n        return name\n\n    def dst(self):\n        \"\"\"Return 0 if DST is not in effect, or the DST offset (in minutes\n        eastward) if DST is in effect.\n\n        This is purely informational; the DST offset has already been added to\n        the UTC offset returned by utcoffset() if applicable, so there's no\n        need to consult dst() unless you're interested in displaying the DST\n        info.\n        \"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.dst(None)\n        offset = _check_utc_offset(\"dst\", offset)\n        if offset is not None:\n            offset = timedelta._create(0, offset * 60, 0, True)\n        return offset\n\n    # Return an integer (or None) instead of a timedelta (or None).\n    def _dst(self):\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.dst(None)\n        offset = _check_utc_offset(\"dst\", offset)\n        return offset\n\n    def replace(self, hour=None, minute=None, second=None, microsecond=None,\n                tzinfo=True):\n        \"\"\"Return a new time with new values for the specified fields.\"\"\"\n        if hour is None:\n            hour = self.hour\n        if minute is None:\n            minute = self.minute\n        if second is None:\n            second = self.second\n        if microsecond is None:\n            microsecond = self.microsecond\n        if tzinfo is True:\n            tzinfo = self.tzinfo\n        return time(hour, minute, second, microsecond, tzinfo)\n\n    def __nonzero__(self):\n        if self.second or self.microsecond:\n            return True\n        offset = self._utcoffset() or 0\n        return self.hour * 60 + self.minute != offset\n\n_time_class = time  # so functions w/ args named \"time\" can get at the class\n\ntime.min = time(0, 0, 0)\ntime.max = time(23, 59, 59, 999999)\ntime.resolution = timedelta(microseconds=1)\n\nclass datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints or longs.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__\n\n    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,\n                microsecond=0, tzinfo=None):\n        year, month, day = _check_date_fields(year, month, day)\n        hour, minute, second, microsecond = _check_time_fields(\n            hour, minute, second, microsecond)\n        _check_tzinfo_arg(tzinfo)\n        self = object.__new__(cls)\n        self._year = year\n        self._month = month\n        self._day = day\n        self._hour = hour\n        self._minute = minute\n        self._second = second\n        self._microsecond = microsecond\n        self._tzinfo = tzinfo\n        self._hashcode = -1\n        return self\n\n    # Read-only field accessors\n    @property\n    def hour(self):\n        \"\"\"hour (0-23)\"\"\"\n        return self._hour\n\n    @property\n    def minute(self):\n        \"\"\"minute (0-59)\"\"\"\n        return self._minute\n\n    @property\n    def second(self):\n        \"\"\"second (0-59)\"\"\"\n        return self._second\n\n    @property\n    def microsecond(self):\n        \"\"\"microsecond (0-999999)\"\"\"\n        return self._microsecond\n\n    @property\n    def tzinfo(self):\n        \"\"\"timezone info object\"\"\"\n        return self._tzinfo\n\n    @classmethod\n    def fromtimestamp(cls, timestamp, tz=None):\n        \"\"\"Construct a datetime from a POSIX timestamp (like time.time()).\n\n        A timezone info object may be passed in as well.\n        \"\"\"\n        _check_tzinfo_arg(tz)\n        converter = _time.localtime if tz is None else _time.gmtime\n        self = cls._from_timestamp(converter, timestamp, tz)\n        if tz is not None:\n            self = tz.fromutc(self)\n        return self\n\n    @classmethod\n    def utcfromtimestamp(cls, t):\n        \"Construct a UTC datetime from a POSIX timestamp (like time.time()).\"\n        return cls._from_timestamp(_time.gmtime, t, None)\n\n    @classmethod\n    def _from_timestamp(cls, converter, timestamp, tzinfo):\n        t_full = timestamp\n        timestamp = int(_math.floor(timestamp))\n        frac = t_full - timestamp\n        us = _round(frac * 1e6)\n\n        # If timestamp is less than one microsecond smaller than a\n        # full second, us can be rounded up to 1000000.  In this case,\n        # roll over to seconds, otherwise, ValueError is raised\n        # by the constructor.\n        if us == 1000000:\n            timestamp += 1\n            us = 0\n        y, m, d, hh, mm, ss, weekday, jday, dst = converter(timestamp)\n        ss = min(ss, 59)    # clamp out leap seconds if the platform has them\n        return cls(y, m, d, hh, mm, ss, us, tzinfo)\n\n    @classmethod\n    def now(cls, tz=None):\n        \"Construct a datetime from time.time() and optional time zone info.\"\n        t = _time.time()\n        return cls.fromtimestamp(t, tz)\n\n    @classmethod\n    def utcnow(cls):\n        \"Construct a UTC datetime from time.time().\"\n        t = _time.time()\n        return cls.utcfromtimestamp(t)\n\n    @classmethod\n    def combine(cls, date, time):\n        \"Construct a datetime from a given date and a given time.\"\n        if not isinstance(date, _date_class):\n            raise TypeError(\"date argument must be a date instance\")\n        if not isinstance(time, _time_class):\n            raise TypeError(\"time argument must be a time instance\")\n        return cls(date.year, date.month, date.day,\n                   time.hour, time.minute, time.second, time.microsecond,\n                   time.tzinfo)\n\n    def timetuple(self):\n        \"Return local time tuple compatible with time.localtime().\"\n        dst = self._dst()\n        if dst is None:\n            dst = -1\n        elif dst:\n            dst = 1\n        return _build_struct_time(self.year, self.month, self.day,\n                                  self.hour, self.minute, self.second,\n                                  dst)\n\n    def utctimetuple(self):\n        \"Return UTC time tuple compatible with time.gmtime().\"\n        y, m, d = self.year, self.month, self.day\n        hh, mm, ss = self.hour, self.minute, self.second\n        offset = self._utcoffset()\n        if offset:  # neither None nor 0\n            mm -= offset\n            y, m, d, hh, mm, ss, _ = _normalize_datetime(\n                y, m, d, hh, mm, ss, 0, ignore_overflow=True)\n        return _build_struct_time(y, m, d, hh, mm, ss, 0)\n\n    def date(self):\n        \"Return the date part.\"\n        return date(self._year, self._month, self._day)\n\n    def time(self):\n        \"Return the time part, with tzinfo None.\"\n        return time(self.hour, self.minute, self.second, self.microsecond)\n\n    def timetz(self):\n        \"Return the time part, with same tzinfo.\"\n        return time(self.hour, self.minute, self.second, self.microsecond,\n                    self._tzinfo)\n\n    def replace(self, year=None, month=None, day=None, hour=None,\n                minute=None, second=None, microsecond=None, tzinfo=True):\n        \"\"\"Return a new datetime with new values for the specified fields.\"\"\"\n        if year is None:\n            year = self.year\n        if month is None:\n            month = self.month\n        if day is None:\n            day = self.day\n        if hour is None:\n            hour = self.hour\n        if minute is None:\n            minute = self.minute\n        if second is None:\n            second = self.second\n        if microsecond is None:\n            microsecond = self.microsecond\n        if tzinfo is True:\n            tzinfo = self.tzinfo\n        return datetime(year, month, day, hour, minute, second, microsecond,\n                        tzinfo)\n\n    def astimezone(self, tz):\n        if not isinstance(tz, tzinfo):\n            raise TypeError(\"tz argument must be an instance of tzinfo\")\n\n        mytz = self.tzinfo\n        if mytz is None:\n            raise ValueError(\"astimezone() requires an aware datetime\")\n\n        if tz is mytz:\n            return self\n\n        # Convert self to UTC, and attach the new time zone object.\n        myoffset = self.utcoffset()\n        if myoffset is None:\n            raise ValueError(\"astimezone() requires an aware datetime\")\n        utc = (self - myoffset).replace(tzinfo=tz)\n\n        # Convert from UTC to tz's local time.\n        return tz.fromutc(utc)\n\n    # Ways to produce a string.\n\n    def ctime(self):\n        \"Return ctime() style string.\"\n        weekday = self.toordinal() % 7 or 7\n        return \"%s %s %2d %02d:%02d:%02d %04d\" % (\n            _DAYNAMES[weekday],\n            _MONTHNAMES[self._month],\n            self._day,\n            self._hour, self._minute, self._second,\n            self._year)\n\n    def isoformat(self, sep='T'):\n        \"\"\"Return the time formatted according to ISO.\n\n        This is 'YYYY-MM-DD HH:MM:SS.mmmmmm', or 'YYYY-MM-DD HH:MM:SS' if\n        self.microsecond == 0.\n\n        If self.tzinfo is not None, the UTC offset is also attached, giving\n        'YYYY-MM-DD HH:MM:SS.mmmmmm+HH:MM' or 'YYYY-MM-DD HH:MM:SS+HH:MM'.\n\n        Optional argument sep specifies the separator between date and\n        time, default 'T'.\n        \"\"\"\n        s = (\"%04d-%02d-%02d%c\" % (self._year, self._month, self._day, sep) +\n             _format_time(self._hour, self._minute, self._second,\n                          self._microsecond))\n        off = self._utcoffset()\n        if off is not None:\n            if off < 0:\n                sign = \"-\"\n                off = -off\n            else:\n                sign = \"+\"\n            hh, mm = divmod(off, 60)\n            s += \"%s%02d:%02d\" % (sign, hh, mm)\n        return s\n\n    def __repr__(self):\n        \"\"\"Convert to formal string, for repr().\"\"\"\n        L = [self._year, self._month, self._day,  # These are never zero\n             self._hour, self._minute, self._second, self._microsecond]\n        if L[-1] == 0:\n            del L[-1]\n        if L[-1] == 0:\n            del L[-1]\n        s = \", \".join(map(str, L))\n        module = \"datetime.\" if self.__class__ is datetime else \"\"\n        s = \"%s(%s)\" % (module + self.__class__.__name__, s)\n        if self._tzinfo is not None:\n            assert s[-1:] == \")\"\n            s = s[:-1] + \", tzinfo=%r\" % self._tzinfo + \")\"\n        return s\n\n    def __str__(self):\n        \"Convert to string, for str().\"\n        return self.isoformat(sep=' ')\n\n    @classmethod\n    def strptime(cls, date_string, format):\n        'string, format -> new datetime parsed from a string (like time.strptime()).'\n        from _strptime import _strptime\n        # _strptime._strptime returns a two-element tuple.  The first\n        # element is a time.struct_time object.  The second is the\n        # microseconds (which are not defined for time.struct_time).\n        struct, micros = _strptime(date_string, format)\n        return cls(*(struct[0:6] + (micros,)))\n\n    def utcoffset(self):\n        \"\"\"Return the timezone offset in minutes east of UTC (negative west of\n        UTC).\"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.utcoffset(self)\n        offset = _check_utc_offset(\"utcoffset\", offset)\n        if offset is not None:\n            offset = timedelta._create(0, offset * 60, 0, True)\n        return offset\n\n    # Return an integer (or None) instead of a timedelta (or None).\n    def _utcoffset(self):\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.utcoffset(self)\n        offset = _check_utc_offset(\"utcoffset\", offset)\n        return offset\n\n    def tzname(self):\n        \"\"\"Return the timezone name.\n\n        Note that the name is 100% informational -- there's no requirement that\n        it mean anything in particular. For example, \"GMT\", \"UTC\", \"-500\",\n        \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.\n        \"\"\"\n        if self._tzinfo is None:\n            return None\n        name = self._tzinfo.tzname(self)\n        _check_tzname(name)\n        return name\n\n    def dst(self):\n        \"\"\"Return 0 if DST is not in effect, or the DST offset (in minutes\n        eastward) if DST is in effect.\n\n        This is purely informational; the DST offset has already been added to\n        the UTC offset returned by utcoffset() if applicable, so there's no\n        need to consult dst() unless you're interested in displaying the DST\n        info.\n        \"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.dst(self)\n        offset = _check_utc_offset(\"dst\", offset)\n        if offset is not None:\n            offset = timedelta._create(0, offset * 60, 0, True)\n        return offset\n\n    # Return an integer (or None) instead of a timedelta (or None).\n    def _dst(self):\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.dst(self)\n        offset = _check_utc_offset(\"dst\", offset)\n        return offset\n\n    # Comparisons of datetime objects with other.\n\n    def __eq__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) == 0\n        elif hasattr(other, \"timetuple\") and not isinstance(other, date):\n            return NotImplemented\n        else:\n            return False\n\n    def __ne__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) != 0\n        elif hasattr(other, \"timetuple\") and not isinstance(other, date):\n            return NotImplemented\n        else:\n            return True\n\n    def __le__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) <= 0\n        elif hasattr(other, \"timetuple\") and not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def __lt__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) < 0\n        elif hasattr(other, \"timetuple\") and not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def __ge__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) >= 0\n        elif hasattr(other, \"timetuple\") and not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def __gt__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) > 0\n        elif hasattr(other, \"timetuple\") and not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def _cmp(self, other):\n        assert isinstance(other, datetime)\n        mytz = self._tzinfo\n        ottz = other._tzinfo\n        myoff = otoff = None\n\n        if mytz is ottz:\n            base_compare = True\n        else:\n            if mytz is not None:\n                myoff = self._utcoffset()\n            if ottz is not None:\n                otoff = other._utcoffset()\n            base_compare = myoff == otoff\n\n        if base_compare:\n            return _cmp((self._year, self._month, self._day,\n                         self._hour, self._minute, self._second,\n                         self._microsecond),\n                        (other._year, other._month, other._day,\n                         other._hour, other._minute, other._second,\n                         other._microsecond))\n        if myoff is None or otoff is None:\n            raise TypeError(\"can't compare offset-naive and offset-aware datetimes\")\n        # XXX What follows could be done more efficiently...\n        diff = self - other     # this will take offsets into account\n        if diff.days < 0:\n            return -1\n        return diff and 1 or 0\n\n    def _add_timedelta(self, other, factor):\n        y, m, d, hh, mm, ss, us = _normalize_datetime(\n            self._year,\n            self._month,\n            self._day + other.days * factor,\n            self._hour,\n            self._minute,\n            self._second + other.seconds * factor,\n            self._microsecond + other.microseconds * factor)\n        return datetime(y, m, d, hh, mm, ss, us, tzinfo=self._tzinfo)\n\n    def __add__(self, other):\n        \"Add a datetime and a timedelta.\"\n        if not isinstance(other, timedelta):\n            return NotImplemented\n        return self._add_timedelta(other, 1)\n\n    __radd__ = __add__\n\n    def __sub__(self, other):\n        \"Subtract two datetimes, or a datetime and a timedelta.\"\n        if not isinstance(other, datetime):\n            if isinstance(other, timedelta):\n                return self._add_timedelta(other, -1)\n            return NotImplemented\n\n        delta_d = self.toordinal() - other.toordinal()\n        delta_s = (self._hour - other._hour) * 3600 + \\\n                  (self._minute - other._minute) * 60 + \\\n                  (self._second - other._second)\n        delta_us = self._microsecond - other._microsecond\n        base = timedelta._create(delta_d, delta_s, delta_us, True)\n        if self._tzinfo is other._tzinfo:\n            return base\n        myoff = self._utcoffset()\n        otoff = other._utcoffset()\n        if myoff == otoff:\n            return base\n        if myoff is None or otoff is None:\n            raise TypeError(\"can't subtract offset-naive and offset-aware datetimes\")\n        return base + timedelta(minutes = otoff-myoff)\n\n    def __hash__(self):\n        if self._hashcode == -1:\n            tzoff = self._utcoffset()\n            if tzoff is None:\n                self._hashcode = hash(self._getstate()[0])\n            else:\n                days = _ymd2ord(self.year, self.month, self.day)\n                seconds = self.hour * 3600 + (self.minute - tzoff) * 60 + self.second\n                self._hashcode = hash(timedelta(days, seconds, self.microsecond))\n        return self._hashcode\n\n\n\ndatetime.min = datetime(1, 1, 1)\ndatetime.max = datetime(9999, 12, 31, 23, 59, 59, 999999)\ndatetime.resolution = timedelta(microseconds=1)\n\n\ndef _isoweek1monday(year):\n    # Helper to calculate the day number of the Monday starting week 1\n    # XXX This could be done more efficiently\n    THURSDAY = 3\n    firstday = _ymd2ord(year, 1, 1)\n    firstweekday = (firstday + 6) % 7  # See weekday() above\n    week1monday = firstday - firstweekday\n    if firstweekday > THURSDAY:\n        week1monday += 7\n    return week1monday\n\n\"\"\"\nSome time zone algebra.  For a datetime x, let\n    x.n = x stripped of its timezone -- its naive time.\n    x.o = x.utcoffset(), and assuming that doesn't raise an exception or\n          return None\n    x.d = x.dst(), and assuming that doesn't raise an exception or\n          return None\n    x.s = x's standard offset, x.o - x.d\n\nNow some derived rules, where k is a duration (timedelta).\n\n1. x.o = x.s + x.d\n   This follows from the definition of x.s.\n\n2. If x and y have the same tzinfo member, x.s = y.s.\n   This is actually a requirement, an assumption we need to make about\n   sane tzinfo classes.\n\n3. The naive UTC time corresponding to x is x.n - x.o.\n   This is again a requirement for a sane tzinfo class.\n\n4. (x+k).s = x.s\n   This follows from #2, and that datimetimetz+timedelta preserves tzinfo.\n\n5. (x+k).n = x.n + k\n   Again follows from how arithmetic is defined.\n\nNow we can explain tz.fromutc(x).  Let's assume it's an interesting case\n(meaning that the various tzinfo methods exist, and don't blow up or return\nNone when called).\n\nThe function wants to return a datetime y with timezone tz, equivalent to x.\nx is already in UTC.\n\nBy #3, we want\n\n    y.n - y.o = x.n                             [1]\n\nThe algorithm starts by attaching tz to x.n, and calling that y.  So\nx.n = y.n at the start.  Then it wants to add a duration k to y, so that [1]\nbecomes true; in effect, we want to solve [2] for k:\n\n   (y+k).n - (y+k).o = x.n                      [2]\n\nBy #1, this is the same as\n\n   (y+k).n - ((y+k).s + (y+k).d) = x.n          [3]\n\nBy #5, (y+k).n = y.n + k, which equals x.n + k because x.n=y.n at the start.\nSubstituting that into [3],\n\n   x.n + k - (y+k).s - (y+k).d = x.n; the x.n terms cancel, leaving\n   k - (y+k).s - (y+k).d = 0; rearranging,\n   k = (y+k).s - (y+k).d; by #4, (y+k).s == y.s, so\n   k = y.s - (y+k).d\n\nOn the RHS, (y+k).d can't be computed directly, but y.s can be, and we\napproximate k by ignoring the (y+k).d term at first.  Note that k can't be\nvery large, since all offset-returning methods return a duration of magnitude\nless than 24 hours.  For that reason, if y is firmly in std time, (y+k).d must\nbe 0, so ignoring it has no consequence then.\n\nIn any case, the new value is\n\n    z = y + y.s                                 [4]\n\nIt's helpful to step back at look at [4] from a higher level:  it's simply\nmapping from UTC to tz's standard time.\n\nAt this point, if\n\n    z.n - z.o = x.n                             [5]\n\nwe have an equivalent time, and are almost done.  The insecurity here is\nat the start of daylight time.  Picture US Eastern for concreteness.  The wall\ntime jumps from 1:59 to 3:00, and wall hours of the form 2:MM don't make good\nsense then.  The docs ask that an Eastern tzinfo class consider such a time to\nbe EDT (because it's \"after 2\"), which is a redundant spelling of 1:MM EST\non the day DST starts.  We want to return the 1:MM EST spelling because that's\nthe only spelling that makes sense on the local wall clock.\n\nIn fact, if [5] holds at this point, we do have the standard-time spelling,\nbut that takes a bit of proof.  We first prove a stronger result.  What's the\ndifference between the LHS and RHS of [5]?  Let\n\n    diff = x.n - (z.n - z.o)                    [6]\n\nNow\n    z.n =                       by [4]\n    (y + y.s).n =               by #5\n    y.n + y.s =                 since y.n = x.n\n    x.n + y.s =                 since z and y are have the same tzinfo member,\n                                    y.s = z.s by #2\n    x.n + z.s\n\nPlugging that back into [6] gives\n\n    diff =\n    x.n - ((x.n + z.s) - z.o) =     expanding\n    x.n - x.n - z.s + z.o =         cancelling\n    - z.s + z.o =                   by #2\n    z.d\n\nSo diff = z.d.\n\nIf [5] is true now, diff = 0, so z.d = 0 too, and we have the standard-time\nspelling we wanted in the endcase described above.  We're done.  Contrarily,\nif z.d = 0, then we have a UTC equivalent, and are also done.\n\nIf [5] is not true now, diff = z.d != 0, and z.d is the offset we need to\nadd to z (in effect, z is in tz's standard time, and we need to shift the\nlocal clock into tz's daylight time).\n\nLet\n\n    z' = z + z.d = z + diff                     [7]\n\nand we can again ask whether\n\n    z'.n - z'.o = x.n                           [8]\n\nIf so, we're done.  If not, the tzinfo class is insane, according to the\nassumptions we've made.  This also requires a bit of proof.  As before, let's\ncompute the difference between the LHS and RHS of [8] (and skipping some of\nthe justifications for the kinds of substitutions we've done several times\nalready):\n\n    diff' = x.n - (z'.n - z'.o) =           replacing z'.n via [7]\n            x.n  - (z.n + diff - z'.o) =    replacing diff via [6]\n            x.n - (z.n + x.n - (z.n - z.o) - z'.o) =\n            x.n - z.n - x.n + z.n - z.o + z'.o =    cancel x.n\n            - z.n + z.n - z.o + z'.o =              cancel z.n\n            - z.o + z'.o =                      #1 twice\n            -z.s - z.d + z'.s + z'.d =          z and z' have same tzinfo\n            z'.d - z.d\n\nSo z' is UTC-equivalent to x iff z'.d = z.d at this point.  If they are equal,\nwe've found the UTC-equivalent so are done.  In fact, we stop with [7] and\nreturn z', not bothering to compute z'.d.\n\nHow could z.d and z'd differ?  z' = z + z.d [7], so merely moving z' by\na dst() offset, and starting *from* a time already in DST (we know z.d != 0),\nwould have to change the result dst() returns:  we start in DST, and moving\na little further into it takes us out of DST.\n\nThere isn't a sane case where this can happen.  The closest it gets is at\nthe end of DST, where there's an hour in UTC with no spelling in a hybrid\ntzinfo class.  In US Eastern, that's 5:MM UTC = 0:MM EST = 1:MM EDT.  During\nthat hour, on an Eastern clock 1:MM is taken as being in standard time (6:MM\nUTC) because the docs insist on that, but 0:MM is taken as being in daylight\ntime (4:MM UTC).  There is no local time mapping to 5:MM UTC.  The local\nclock jumps from 1:59 back to 1:00 again, and repeats the 1:MM hour in\nstandard time.  Since that's what the local clock *does*, we want to map both\nUTC hours 5:MM and 6:MM to 1:MM Eastern.  The result is ambiguous\nin local time, but so it goes -- it's the way the local clock works.\n\nWhen x = 5:MM UTC is the input to this algorithm, x.o=0, y.o=-5 and y.d=0,\nso z=0:MM.  z.d=60 (minutes) then, so [5] doesn't hold and we keep going.\nz' = z + z.d = 1:MM then, and z'.d=0, and z'.d - z.d = -60 != 0 so [8]\n(correctly) concludes that z' is not UTC-equivalent to x.\n\nBecause we know z.d said z was in daylight time (else [5] would have held and\nwe would have stopped then), and we know z.d != z'.d (else [8] would have held\nand we have stopped then), and there are only 2 possible values dst() can\nreturn in Eastern, it follows that z'.d must be 0 (which it is in the example,\nbut the reasoning doesn't depend on the example -- it depends on there being\ntwo possible dst() outcomes, one zero and the other non-zero).  Therefore\nz' must be in standard time, and is the spelling we want in this case.\n\nNote again that z' is not UTC-equivalent as far as the hybrid tzinfo class is\nconcerned (because it takes z' as being in standard time rather than the\ndaylight time we intend here), but returning it gives the real-life \"local\nclock repeats an hour\" behavior when mapping the \"unspellable\" UTC hour into\ntz.\n\nWhen the input is 6:MM, z=1:MM and z.d=0, and we stop at once, again with\nthe 1:MM standard time spelling we want.\n\nSo how can this break?  One of the assumptions must be violated.  Two\npossibilities:\n\n1) [2] effectively says that y.s is invariant across all y belong to a given\n   time zone.  This isn't true if, for political reasons or continental drift,\n   a region decides to change its base offset from UTC.\n\n2) There may be versions of \"double daylight\" time where the tail end of\n   the analysis gives up a step too early.  I haven't thought about that\n   enough to say.\n\nIn any case, it's clear that the default fromutc() is strong enough to handle\n\"almost all\" time zones:  so long as the standard offset is invariant, it\ndoesn't matter if daylight time transition points change from year to year, or\nif daylight time is skipped in some years; it doesn't matter how large or\nsmall dst() may get within its bounds; and it doesn't even matter if some\nperverse time zone returns a negative dst()).  So a breaking case must be\npretty bizarre, and a tzinfo subclass can override fromutc() if it is.\n\"\"\"\n","src/lib/dbhash.py":"raise NotImplementedError(\"dbhash is not yet implemented in Skulpt\")\n","src/lib/decimal.py":"raise NotImplementedError(\"decimal is not yet implemented in Skulpt\")\n","src/lib/difflib.py":"raise NotImplementedError(\"difflib is not yet implemented in Skulpt\")\n","src/lib/dircache.py":"raise NotImplementedError(\"dircache is not yet implemented in Skulpt\")\n","src/lib/dis.py":"raise NotImplementedError(\"dis is not yet implemented in Skulpt\")\n","src/lib/distutils/__init__.py":"raise NotImplementedError(\"distutils is not yet implemented in Skulpt\")\n","src/lib/distutils/command/__init__.py":"raise NotImplementedError(\"command is not yet implemented in Skulpt\")\n","src/lib/distutils/tests/__init__.py":"raise NotImplementedError(\"tests is not yet implemented in Skulpt\")\n","src/lib/doctest.py":"raise NotImplementedError(\"doctest is not yet implemented in Skulpt\")\n","src/lib/dumbdbm.py":"raise NotImplementedError(\"dumbdbm is not yet implemented in Skulpt\")\n","src/lib/dummy_thread.py":"raise NotImplementedError(\"dummy_thread is not yet implemented in Skulpt\")\n","src/lib/dummy_threading.py":"raise NotImplementedError(\"dummy_threading is not yet implemented in Skulpt\")\n","src/lib/email/__init__.py":"raise NotImplementedError(\"email is not yet implemented in Skulpt\")\n","src/lib/email/mime/__init__.py":"raise NotImplementedError(\"mime is not yet implemented in Skulpt\")\n","src/lib/email/test/data/__init__.py":"raise NotImplementedError(\"data is not yet implemented in Skulpt\")\n","src/lib/encodings/__init__.py":"raise NotImplementedError(\"encodings is not yet implemented in Skulpt\")\n","src/lib/filecmp.py":"raise NotImplementedError(\"filecmp is not yet implemented in Skulpt\")\n","src/lib/fileinput.py":"raise NotImplementedError(\"fileinput is not yet implemented in Skulpt\")\n","src/lib/fnmatch.py":"raise NotImplementedError(\"fnmatch is not yet implemented in Skulpt\")\n","src/lib/formatter.py":"raise NotImplementedError(\"formatter is not yet implemented in Skulpt\")\n","src/lib/fpformat.py":"raise NotImplementedError(\"fpformat is not yet implemented in Skulpt\")\n","src/lib/fractions.py":"raise NotImplementedError(\"fractions is not yet implemented in Skulpt\")\n","src/lib/ftplib.py":"raise NotImplementedError(\"ftplib is not yet implemented in Skulpt\")\n","src/lib/functools.py":"raise NotImplementedError(\"functools is not yet implemented in Skulpt\")\n","src/lib/genericpath.py":"raise NotImplementedError(\"genericpath is not yet implemented in Skulpt\")\n","src/lib/getopt.py":"raise NotImplementedError(\"getopt is not yet implemented in Skulpt\")\n","src/lib/getpass.py":"raise NotImplementedError(\"getpass is not yet implemented in Skulpt\")\n","src/lib/gettext.py":"raise NotImplementedError(\"gettext is not yet implemented in Skulpt\")\n","src/lib/glob.py":"raise NotImplementedError(\"glob is not yet implemented in Skulpt\")\n","src/lib/gzip.py":"raise NotImplementedError(\"gzip is not yet implemented in Skulpt\")\n","src/lib/hashlib.py":"raise NotImplementedError(\"hashlib is not yet implemented in Skulpt\")\n","src/lib/heapq.py":"raise NotImplementedError(\"heapq is not yet implemented in Skulpt\")\n","src/lib/hmac.py":"raise NotImplementedError(\"hmac is not yet implemented in Skulpt\")\n","src/lib/hotshot/__init__.py":"raise NotImplementedError(\"hotshot is not yet implemented in Skulpt\")\n","src/lib/htmlentitydefs.py":"raise NotImplementedError(\"htmlentitydefs is not yet implemented in Skulpt\")\n","src/lib/htmllib.py":"raise NotImplementedError(\"htmllib is not yet implemented in Skulpt\")\n","src/lib/httplib.py":"raise NotImplementedError(\"httplib is not yet implemented in Skulpt\")\n","src/lib/idlelib/Icons/__init__.py":"raise NotImplementedError(\"Icons is not yet implemented in Skulpt\")\n","src/lib/idlelib/__init__.py":"raise NotImplementedError(\"idlelib is not yet implemented in Skulpt\")\n","src/lib/ihooks.py":"raise NotImplementedError(\"ihooks is not yet implemented in Skulpt\")\n","src/lib/imaplib.py":"raise NotImplementedError(\"imaplib is not yet implemented in Skulpt\")\n","src/lib/imghdr.py":"raise NotImplementedError(\"imghdr is not yet implemented in Skulpt\")\n","src/lib/imputil.py":"raise NotImplementedError(\"imputil is not yet implemented in Skulpt\")\n","src/lib/io.py":"raise NotImplementedError(\"io is not yet implemented in Skulpt\")\n","src/lib/json/__init__.js":"var $builtinmodule=function(){var a={},b=function(a,c){var d,e,f,g,c,h;if(a===Sk.builtin.bool.true$)return c?\"\\\"True\\\"\":\"true\";if(a===Sk.builtin.bool.false$)return c?\"\\\"False\\\"\":\"false\";if(a===Sk.builtin.none.none$)return c?\"\\\"null\\\"\":\"null\";if(a instanceof Sk.builtin.int_)return h=\"\"+Sk.builtin.asnum$(a),c?\"\\\"\"+h+\"\\\"\":h;if(a instanceof Sk.builtin.lng){return h=a.str$(10,!0),c?\"\\\"\"+h+\"\\\"\":h}if(Sk.builtin.checkFloat(a)){return h=\"\"+Sk.builtin.asnum$(a),-1==h.indexOf(\".\")&&(h+=\".0\"),c?\"\\\"\"+h+\"\\\"\":h}if(Sk.builtin.checkString(a))return JSON.stringify(a.v);if(a instanceof Sk.builtin.list||a instanceof Sk.builtin.tuple){for(f=\"[\",g=0,(d=Sk.abstr.iter(a),e=d.tp$iternext());void 0!==e;e=d.tp$iternext())0<g&&(f+=\", \"),f+=b(e),g+=1;return f+=\"]\",f}if(a instanceof Sk.builtin.dict){for(f=\"{\",g=0,(d=Sk.abstr.iter(a),e=d.tp$iternext());void 0!==e;e=d.tp$iternext())0<g&&(f+=\", \"),c=b(e,!0),h=b(a.mp$subscript(e)),f+=c+\": \"+h,g+=1;return f+=\"}\",f}throw new Sk.builtin.TypeError(\"unable to convert to JSON\")};a.dump=new Sk.builtin.func(function(){throw new Sk.builtin.NotImplementedError(\"dump is not yet implemented in Skulpt\")}),a.dumps=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgsLen(\"dumps\",arguments.length,1,1),new Sk.builtin.str(b(a))});var c=function(a){var b,d,e,f;if(!0===a)return Sk.builtin.bool.true$;if(!1===a)return Sk.builtin.bool.false$;if(null===a)return Sk.builtin.none.none$;if(\"string\"==typeof a)return new Sk.builtin.str(a);if(\"number\"==typeof a)return Sk.builtin.assk$(a);if(\"[object Array]\"===Object.prototype.toString.apply(a)){for(b=[],d=a.length,e=0;e<d;e++)b.push(c(a[e]));return new Sk.builtin.list(b)}for(f in b=[],a)a.hasOwnProperty(f)&&(b.push(c(f)),b.push(c(a[f])));return new Sk.builtin.dict(b)},d=function(a){try{return c(JSON.parse(a))}catch(a){throw new Sk.builtin.ValueError(\"invalid JSON string\")}};return a.load=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"load\",arguments.length,1,1);var b,c;return a.data?b=a.data:(c=Sk.misceval.callsimArray(a.read,[a]),Sk.__future__.python3&&(c=Sk.builtin.bytes.prototype.$decode(c,Sk.builtin.str.$ascii)),b=c.$jsstr()),d(b)}),a.loads=new Sk.builtin.func(function(a){if(Sk.builtin.pyCheckArgsLen(\"loads\",arguments.length,1,1),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"expected string\");return d(a.v)}),a};","src/lib/json/tests/__init__.py":"raise NotImplementedError(\"tests is not yet implemented in Skulpt\")\n","src/lib/keyword.py":"\n__all__ = [\"iskeyword\", \"kwlist\"]\n\nkwlist = [\n#--start keywords--\n        'and',\n        'as',\n        'assert',\n        'break',\n        'class',\n        'continue',\n        'def',\n        'del',\n        'elif',\n        'else',\n        'except',\n        'exec',\n        'finally',\n        'for',\n        'from',\n        'global',\n        'if',\n        'import',\n        'in',\n        'is',\n        'lambda',\n        'not',\n        'or',\n        'pass',\n        'print',\n        'raise',\n        'return',\n        'try',\n        'while',\n        'with',\n        'yield',\n#--end keywords--\n        ]\n\ndef iskeyword(wd):\n    return wd in kwlist\n\n","src/lib/lib-dynload/__init__.py":"raise NotImplementedError(\"lib-dynload is not yet implemented in Skulpt\")\n","src/lib/lib-tk/__init__.py":"raise NotImplementedError(\"lib-tk is not yet implemented in Skulpt\")\n","src/lib/lib2to3/__init__.py":"raise NotImplementedError(\"lib2to3 is not yet implemented in Skulpt\")\n","src/lib/lib2to3/fixes/__init__.py":"raise NotImplementedError(\"fixes is not yet implemented in Skulpt\")\n","src/lib/lib2to3/pgen2/__init__.py":"raise NotImplementedError(\"pgen2 is not yet implemented in Skulpt\")\n","src/lib/lib2to3/tests/__init__.py":"raise NotImplementedError(\"tests is not yet implemented in Skulpt\")\n","src/lib/linecache.py":"raise NotImplementedError(\"linecache is not yet implemented in Skulpt\")\n","src/lib/locale.py":"raise NotImplementedError(\"locale is not yet implemented in Skulpt\")\n","src/lib/logging/__init__.py":"raise NotImplementedError(\"logging is not yet implemented in Skulpt\")\n","src/lib/macpath.py":"raise NotImplementedError(\"macpath is not yet implemented in Skulpt\")\n","src/lib/macurl2path.py":"raise NotImplementedError(\"macurl2path is not yet implemented in Skulpt\")\n","src/lib/mailbox.py":"raise NotImplementedError(\"mailbox is not yet implemented in Skulpt\")\n","src/lib/mailcap.py":"raise NotImplementedError(\"mailcap is not yet implemented in Skulpt\")\n","src/lib/markupbase.py":"raise NotImplementedError(\"markupbase is not yet implemented in Skulpt\")\n","src/lib/math.js":"var $builtinmodule=function(){var a=Math.floor,b=Math.pow,c=Math.log,d=Math.sqrt,e=Math.E,f=Math.PI,g={pi:new Sk.builtin.float_(f),e:new Sk.builtin.float_(e),fabs:new Sk.builtin.func(function(a){var b=Math.abs;return Sk.builtin.pyCheckArgsLen(\"fabs\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),new Sk.builtin.float_(b(Sk.builtin.asnum$(a)))}),asin:new Sk.builtin.func(function(a){var b=Math.asin;return Sk.builtin.pyCheckArgsLen(\"asin\",arguments.length,1,1),Sk.builtin.pyCheckType(\"rad\",\"number\",Sk.builtin.checkNumber(a)),new Sk.builtin.float_(b(Sk.builtin.asnum$(a)))}),acos:new Sk.builtin.func(function(a){var b=Math.acos;return Sk.builtin.pyCheckArgsLen(\"acos\",arguments.length,1,1),Sk.builtin.pyCheckType(\"rad\",\"number\",Sk.builtin.checkNumber(a)),new Sk.builtin.float_(b(Sk.builtin.asnum$(a)))}),atan:new Sk.builtin.func(function(a){var b=Math.atan;return Sk.builtin.pyCheckArgsLen(\"atan\",arguments.length,1,1),Sk.builtin.pyCheckType(\"rad\",\"number\",Sk.builtin.checkNumber(a)),new Sk.builtin.float_(b(Sk.builtin.asnum$(a)))}),atan2:new Sk.builtin.func(function(a,b){var c=Math.atan2;return Sk.builtin.pyCheckArgsLen(\"atan2\",arguments.length,2,2),Sk.builtin.pyCheckType(\"y\",\"number\",Sk.builtin.checkNumber(a)),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(b)),new Sk.builtin.float_(c(Sk.builtin.asnum$(a),Sk.builtin.asnum$(b)))}),sin:new Sk.builtin.func(function(a){var b=Math.sin;return Sk.builtin.pyCheckArgsLen(\"sin\",arguments.length,1,1),Sk.builtin.pyCheckType(\"rad\",\"number\",Sk.builtin.checkNumber(a)),new Sk.builtin.float_(b(Sk.builtin.asnum$(a)))}),cos:new Sk.builtin.func(function(a){var b=Math.cos;return Sk.builtin.pyCheckArgsLen(\"cos\",arguments.length,1,1),Sk.builtin.pyCheckType(\"rad\",\"number\",Sk.builtin.checkNumber(a)),new Sk.builtin.float_(b(Sk.builtin.asnum$(a)))}),tan:new Sk.builtin.func(function(a){var b=Math.tan;return Sk.builtin.pyCheckArgsLen(\"tan\",arguments.length,1,1),Sk.builtin.pyCheckType(\"rad\",\"number\",Sk.builtin.checkNumber(a)),new Sk.builtin.float_(b(Sk.builtin.asnum$(a)))}),asinh:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"asinh\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),a=Sk.builtin.asnum$(a);var b=a+d(a*a+1);return new Sk.builtin.float_(c(b))}),acosh:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"acosh\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),a=Sk.builtin.asnum$(a);var b=a+d(a*a-1);return new Sk.builtin.float_(c(b))}),atanh:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"atanh\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),a=Sk.builtin.asnum$(a);var b=(1+a)/(1-a);return new Sk.builtin.float_(c(b)/2)}),sinh:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"sinh\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),a=Sk.builtin.asnum$(a);var c=b(e,a);return new Sk.builtin.float_((c-1/c)/2)}),cosh:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"cosh\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),a=Sk.builtin.asnum$(a);var c=b(e,a);return new Sk.builtin.float_((c+1/c)/2)}),tanh:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"tanh\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),a=Sk.builtin.asnum$(a);var c=b(e,a),d=1/c;return new Sk.builtin.float_((c-d)/2/((c+d)/2))}),ceil:new Sk.builtin.func(function(a){var b=Math.ceil;return Sk.builtin.pyCheckArgsLen(\"ceil\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),Sk.__future__.ceil_floor_int?new Sk.builtin.int_(b(Sk.builtin.asnum$(a))):new Sk.builtin.float_(b(Sk.builtin.asnum$(a)))}),copysign:new Sk.builtin.func(function(a,b){Sk.builtin.pyCheckArgsLen(\"ceil\",arguments.length,2,2),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),Sk.builtin.pyCheckType(\"y\",\"number\",Sk.builtin.checkNumber(b));var c,d=Sk.ffi.remapToJs(a),e=Sk.ffi.remapToJs(b),f=0>d,g=0>d;return Sk.builtin.checkFloat(a)&&0===d&&(f=1/d==-Infinity),Sk.builtin.checkFloat(b)&&0===e&&(g=1/e==-Infinity),f&&g||!f&&!g?c=e:(f&&!g||!f&&g)&&(0===b?c=f?-0:0:c=-1*e),new Sk.builtin.float_(c)}),floor:new Sk.builtin.func(function(b){return Sk.builtin.pyCheckArgsLen(\"floor\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(b)),Sk.__future__.ceil_floor_int?new Sk.builtin.int_(a(Sk.builtin.asnum$(b))):new Sk.builtin.float_(a(Sk.builtin.asnum$(b)))}),sqrt:new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgsLen(\"sqrt\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),new Sk.builtin.float_(d(Sk.builtin.asnum$(a)))}),trunc:new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgsLen(\"trunc\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),new Sk.builtin.int_(0|Sk.builtin.asnum$(a))}),log:new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgsLen(\"log\",arguments.length,1,2),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),void 0===b)return new Sk.builtin.float_(c(Sk.builtin.asnum$(a)));Sk.builtin.pyCheckType(\"base\",\"number\",Sk.builtin.checkNumber(b));var d=c(Sk.builtin.asnum$(a))/c(Sk.builtin.asnum$(b));return new Sk.builtin.float_(d)}),log10:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"log10\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a));var b=c(Sk.builtin.asnum$(a))/c(10);return new Sk.builtin.float_(b)}),isinf:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"isinf\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a));var b=Sk.builtin.asnum$(a);return isFinite(b)&&!isNaN(b)?Sk.builtin.bool.false$:Sk.builtin.bool.true$}),isnan:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"isnan\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"float\",Sk.builtin.checkFloat(a));var b=Sk.builtin.asnum$(a);return isNaN(b)?Sk.builtin.bool.true$:Sk.builtin.bool.false$}),exp:new Sk.builtin.func(function(a){var b=Math.exp;return Sk.builtin.pyCheckArgsLen(\"exp\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),new Sk.builtin.float_(b(Sk.builtin.asnum$(a)))}),pow:new Sk.builtin.func(function(a,c){return Sk.builtin.pyCheckArgsLen(\"pow\",arguments.length,2,2),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),Sk.builtin.pyCheckType(\"y\",\"number\",Sk.builtin.checkNumber(c)),new Sk.builtin.float_(b(Sk.builtin.asnum$(a),Sk.builtin.asnum$(c)))}),radians:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"radians\",arguments.length,1,1),Sk.builtin.pyCheckType(\"deg\",\"number\",Sk.builtin.checkNumber(a));var b=f/180*Sk.builtin.asnum$(a);return new Sk.builtin.float_(b)}),degrees:new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"degrees\",arguments.length,1,1),Sk.builtin.pyCheckType(\"rad\",\"number\",Sk.builtin.checkNumber(a));var b=180/f*Sk.builtin.asnum$(a);return new Sk.builtin.float_(b)}),hypot:new Sk.builtin.func(function(a,b){return Sk.builtin.pyCheckArgsLen(\"hypot\",arguments.length,2,2),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(a)),Sk.builtin.pyCheckType(\"y\",\"number\",Sk.builtin.checkNumber(b)),a=Sk.builtin.asnum$(a),b=Sk.builtin.asnum$(b),new Sk.builtin.float_(d(a*a+b*b))})},h=18;return g.factorial=new Sk.builtin.func(function(b){function c(a){Sk.builtin.asnum$nofloat(a);return new Sk.builtin.biginteger(a)}Sk.builtin.pyCheckArgsLen(\"factorial\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"number\",Sk.builtin.checkNumber(b)),b=a(Sk.builtin.asnum$(b));for(var d=1,e=2;e<=b&&e<=h;e++)d*=e;if(b<=h)return new Sk.builtin.int_(d);d=c(d);for(var f,e=h+1;e<=b;e++)f=c(e),d=d.multiply(f);return new Sk.builtin.lng(d)}),g};","src/lib/md5.py":"raise NotImplementedError(\"md5 is not yet implemented in Skulpt\")\n","src/lib/mhlib.py":"raise NotImplementedError(\"mhlib is not yet implemented in Skulpt\")\n","src/lib/mimetools.py":"raise NotImplementedError(\"mimetools is not yet implemented in Skulpt\")\n","src/lib/mimetypes.py":"raise NotImplementedError(\"mimetypes is not yet implemented in Skulpt\")\n","src/lib/mimify.py":"raise NotImplementedError(\"mimify is not yet implemented in Skulpt\")\n","src/lib/modulefinder.py":"raise NotImplementedError(\"modulefinder is not yet implemented in Skulpt\")\n","src/lib/multifile.py":"raise NotImplementedError(\"multifile is not yet implemented in Skulpt\")\n","src/lib/multiprocessing/__init__.py":"raise NotImplementedError(\"multiprocessing is not yet implemented in Skulpt\")\n","src/lib/multiprocessing/dummy/__init__.py":"raise NotImplementedError(\"dummy is not yet implemented in Skulpt\")\n","src/lib/mutex.py":"raise NotImplementedError(\"mutex is not yet implemented in Skulpt\")\n","src/lib/netrc.py":"raise NotImplementedError(\"netrc is not yet implemented in Skulpt\")\n","src/lib/new.py":"raise NotImplementedError(\"new is not yet implemented in Skulpt\")\n","src/lib/nntplib.py":"raise NotImplementedError(\"nntplib is not yet implemented in Skulpt\")\n","src/lib/ntpath.py":"raise NotImplementedError(\"ntpath is not yet implemented in Skulpt\")\n","src/lib/nturl2path.py":"raise NotImplementedError(\"nturl2path is not yet implemented in Skulpt\")\n","src/lib/numbers.py":"Number = (int, float, complex)\nIntegral = int\nComplex = complex\n","src/lib/numeric.js":"var $builtinmodule=function(){var a={},b=function(a){return!!(Sk.builtin.checkSequence(a)&&2==a.sq$length())&&!!(Sk.builtin.checkInt(a.mp$subscript(0))&&Sk.builtin.checkInt(a.mp$subscript(1)))};return a.Matrix=Sk.misceval.buildClass(a,function(c,d){d.__init__=new Sk.builtin.func(function(b,c){if(Sk.builtin.pyCheckArgsLen(\"__init__\",arguments.length,2,2),Sk.builtin.checkSequence(c)){b.matrix=[];var d,e,f,g,h,k,l;if(k=0,l=c.sq$length(),0==l)throw new Sk.builtin.TypeError(\"data must be a sequence of sequences\");for(d=0;d<l;d++){if(f=c.mp$subscript(d),!Sk.builtin.checkSequence(f))throw new Sk.builtin.TypeError(\"data must be a sequence of sequences\");if(0==k&&(k=f.sq$length()),f.sq$length()!=k)throw new Sk.builtin.ValueError(\"matrix rows must be the same length\");for(g=[],e=0;e<f.sq$length();e++){if(h=f.mp$subscript(e),!Sk.builtin.checkNumber(h))throw new Sk.builtin.TypeError(\"matrix elements must be numbers\");g.push(Sk.builtin.asnum$(h))}b.matrix.push(g)}}else if(\"[object Array]\"==Object.prototype.toString.apply(c))b.matrix=c;else throw new Sk.builtin.TypeError(\"data must be a sequence of sequences\");if(b.xdim=b.matrix.length,1>b.xdim)throw new Sk.builtin.ValueError(\"matrix must have at least one row\");if(b.ydim=b.matrix[0].length,1>b.ydim)throw new Sk.builtin.ValueError(\"matrix must have at least one column\");b.matrix_shape=new Sk.builtin.tuple([new Sk.builtin.int_(b.xdim),new Sk.builtin.int_(b.ydim)]),b.__class__=a.Matrix}),d.__getitem__=new Sk.builtin.func(function(a,c){if(Sk.builtin.pyCheckArgsLen(\"__getitem__\",arguments.length,2,2),!b(c))throw new Sk.builtin.TypeError(\"index must be a 2 element sequence\");var d=Sk.builtin.asnum$(c.mp$subscript(0)),e=Sk.builtin.asnum$(c.mp$subscript(1));if(0>d||d>=a.xdim)throw new Sk.builtin.IndexError(\"row index out of bounds\");if(0>e||e>=a.ydim)throw new Sk.builtin.IndexError(\"column index out of bounds\");return new Sk.builtin.float_(a.matrix[d][e])}),d.getrow=new Sk.builtin.func(function(b,c){if(Sk.builtin.pyCheckArgsLen(\"getrow\",arguments.length,2,2),!Sk.builtin.checkInt(c))throw new Sk.builtin.TypeError(\"row index must be an integer\");var d=Sk.builtin.asnum$(c);if(0>d||d>=b.xdim)throw new Sk.builtin.IndexError(\"index out of bounds\");var e=[b.matrix[d].slice()];return new Sk.misceval.callsimArray(a.Matrix,[e])}),d.getcol=new Sk.builtin.func(function(b,c){if(Sk.builtin.pyCheckArgsLen(\"getcol\",arguments.length,2,2),!Sk.builtin.checkInt(c))throw new Sk.builtin.TypeError(\"column index must be an integer\");var d=Sk.builtin.asnum$(c);if(0>d||d>=b.ydim)throw new Sk.builtin.IndexError(\"index out of bounds\");var e,f;for(f=[],e=0;e<b.xdim;e++)f.push(b.matrix[e][d]);return f=[f],new Sk.misceval.callsimArray(a.Matrix,[f])}),d.__setitem__=new Sk.builtin.func(function(a,c,d){if(Sk.builtin.pyCheckArgsLen(\"__setitem__\",arguments.length,3,3),!b(c))throw new Sk.builtin.TypeError(\"index must be a 2 element sequence\");var e=Sk.builtin.asnum$(c.mp$subscript(0)),f=Sk.builtin.asnum$(c.mp$subscript(1));if(0>e||e>=a.xdim)throw new Sk.builtin.IndexError(\"row index out of bounds\");if(0>f||f>=a.ydim)throw new Sk.builtin.IndexError(\"column index out of bounds\");a.matrix[e][f]=Sk.builtin.asnum$(d)}),d.__str__=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"__str__\",arguments.length,1,1);var b,c,d,e=\"[\";for(b=0;b<a.xdim;b++){for(0!==b&&(e+=\" \"),e+=\"[\",c=0;c<a.ydim;c++)d=Sk.builtin.float_(a.matrix[b][c]),e+=d.tp$str().v,c!==a.ydim-1&&(e+=\", \");e+=\"]\",b!==a.xdim-1&&(e+=\",\\n\")}return e+=\"]\\n\",new Sk.builtin.str(e)});var e=function(b,c){return b.__class__==a.Matrix&&c.__class__==a.Matrix&&b.xdim===c.xdim&&b.ydim===c.ydim&&!!numeric.same(b.matrix,c.matrix)};d.__eq__=new Sk.builtin.func(function(a,b){return Sk.builtin.pyCheckArgsLen(\"__eq__\",arguments.length,2,2),e(a,b)?Sk.builtin.bool.true$:Sk.builtin.bool.false$}),d.__ne__=new Sk.builtin.func(function(a,b){return Sk.builtin.pyCheckArgsLen(\"__ne__\",arguments.length,2,2),e(a,b)?Sk.builtin.bool.false$:Sk.builtin.bool.true$}),d.__add__=new Sk.builtin.func(function(b,c){if(Sk.builtin.pyCheckArgsLen(\"__add__\",arguments.length,2,2),c.__class__!=a.Matrix)throw new Sk.builtin.TypeError(\"can only add matrices to matrices\");if(b.xdim!==c.xdim||b.ydim!==c.ydim)throw new Sk.builtin.ValueError(\"matrix dimensions are not the same\");var d=numeric.add(b.matrix,c.matrix);return Sk.misceval.callsimArray(a.Matrix,[d])}),d.__sub__=new Sk.builtin.func(function(b,c){if(Sk.builtin.pyCheckArgsLen(\"__sub__\",arguments.length,2,2),c.__class__!=a.Matrix)throw new Sk.builtin.TypeError(\"can only subtract matrices from matrices\");if(b.xdim!==c.xdim||b.ydim!==c.ydim)throw new Sk.builtin.ValueError(\"matrix dimensions are not the same\");var d=numeric.sub(b.matrix,c.matrix);return Sk.misceval.callsimArray(a.Matrix,[d])});var f=function(b,c){var d=numeric.dot(b.matrix,c.matrix);return Sk.misceval.callsimArray(a.Matrix,[d])},g=function(b,c){var d,e,f=numeric.clone(b.matrix),g=Sk.builtin.asnum$(c);for(d=0;d<b.xdim;d++)for(e=0;e<b.ydim;e++)f[d][e]*=g;return Sk.misceval.callsimArray(a.Matrix,[f])};Sk.__future__.python3?(d.__matmul__=new Sk.builtin.func(function(b,c){if(Sk.builtin.pyCheckArgsLen(\"__matmul__\",arguments.length,2,2),c.__class__!=a.Matrix)throw new Sk.builtin.TypeError(\"can only multiply matrices with matrices\");if(b.ydim!==c.xdim)throw new Sk.builtin.ValueError(\"matrix dimensions are not aligned\");return f(b,c)}),d.__mul__=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgsLen(\"__mul__\",arguments.length,2,2),!Sk.builtin.checkNumber(b))throw new Sk.builtin.TypeError(\"scale factor must be a number\");return g(a,b)}),d.__rmul__=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgsLen(\"__rmul__\",arguments.length,2,2),!Sk.builtin.checkNumber(b))throw new Sk.builtin.TypeError(\"scale factor must be a number\");return g(a,b)})):(d.__mul__=new Sk.builtin.func(function(b,c){if(Sk.builtin.pyCheckArgsLen(\"__mul__\",arguments.length,2,2),c.__class__!=a.Matrix)throw new Sk.builtin.TypeError(\"can only multiply matrices with matrices\");if(b.ydim!==c.xdim)throw new Sk.builtin.ValueError(\"matrix dimensions are not aligned\");return f(b,c)}),d.scale=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgsLen(\"scale\",arguments.length,2,2),!Sk.builtin.checkNumber(b))throw new Sk.builtin.TypeError(\"scale factor must be a number\");return g(a,b)})),d.copy=new Sk.builtin.func(function(b){Sk.builtin.pyCheckArgsLen(\"copy\",arguments.length,1,1);var c=numeric.clone(b.matrix);return Sk.misceval.callsimArray(a.Matrix,[c])}),d.inverse=new Sk.builtin.func(function(b){Sk.builtin.pyCheckArgsLen(\"inverse\",arguments.length,1,1);var c,d;try{d=numeric.det(b.matrix)}catch(a){throw new Sk.builtin.ValueError(\"matrix has no inverse\")}if(b.xdim!==b.ydim||0===d)throw new Sk.builtin.ValueError(\"matrix has no inverse\");try{c=numeric.inv(b.matrix)}catch(a){throw new Sk.builtin.ValueError(\"matrix has no inverse\")}return Sk.misceval.callsimArray(a.Matrix,[c])}),d.transpose=new Sk.builtin.func(function(b){Sk.builtin.pyCheckArgsLen(\"transpose\",arguments.length,1,1);var c=numeric.transpose(b.matrix);return Sk.misceval.callsimArray(a.Matrix,[c])}),d.abs=new Sk.builtin.func(function(b){Sk.builtin.pyCheckArgsLen(\"abs\",arguments.length,1,1);var c=numeric.abs(b.matrix);return Sk.misceval.callsimArray(a.Matrix,[c])}),d.summation=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"summation\",arguments.length,1,1);var b=numeric.sum(a.matrix);return new Sk.builtin.float_(b)}),d.shape=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgsLen(\"shape\",arguments.length,1,1),a.matrix_shape})},\"Matrix\",[]),a.identity=new Sk.builtin.func(function(b){if(Sk.builtin.pyCheckArgsLen(\"identity\",arguments.length,1,1),!Sk.builtin.checkInt(b))throw new Sk.builtin.TypeError(\"dimension must be an integer\");var c=Sk.builtin.asnum$(b);return Sk.misceval.callsimArray(a.Matrix,[numeric.identity(c)])}),a};","src/lib/opcode.py":"raise NotImplementedError(\"opcode is not yet implemented in Skulpt\")\n","src/lib/operator.js":"var $builtinmodule=function(){var a={};return a.lt=new Sk.builtin.func(function(c,a){return Sk.misceval.richCompareBool(c,a,\"Lt\")}),a.__lt__=a.lt,a.le=new Sk.builtin.func(function(c,a){return Sk.misceval.richCompareBool(c,a,\"LtE\")}),a.__le__=a.le,a.eq=new Sk.builtin.func(function(c,a){return Sk.misceval.richCompareBool(c,a,\"Eq\")}),a.__eq__=a.eq,a.ne=new Sk.builtin.func(function(c,a){return Sk.misceval.richCompareBool(c,a,\"NotEq\")}),a.__ne__=a.ne,a.ge=new Sk.builtin.func(function(c,a){return Sk.misceval.richCompareBool(c,a,\"GtE\")}),a.__ge__=a.ge,a.gt=new Sk.builtin.func(function(c,a){return Sk.misceval.richCompareBool(c,a,\"Gt\")}),a.__gt__=a.gt,a.not_=new Sk.builtin.func(function(){throw new Sk.builtin.NotImplementedError(\"operator.not_() is not yet implemented in Skulpt\")}),a.truth=new Sk.builtin.func(function(a){return Sk.builtin.bool(a)}),a.is_=new Sk.builtin.func(function(c,a){return Sk.misceval.richCompareBool(c,a,\"Is\")}),a.is_not=new Sk.builtin.func(function(c,a){return Sk.misceval.richCompareBool(c,a,\"IsNot\")}),a.abs=new Sk.builtin.func(function(a){return Sk.misceval.callsimArray(Sk.builtin.abs,[a])}),a.__abs__=a.abs,a.add=new Sk.builtin.func(function(c,a){return Sk.abstr.objectAdd(c,a)}),a.__add__=a.add,a.and_=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"BitAnd\")}),a.__and__=a.and_,a.div=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"Div\")}),a.__div__=a.div,a.floordiv=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"FloorDiv\")}),a.__floordiv__=a.floordiv,a.index=new Sk.builtin.func(function(b){return new Sk.builtin.int_(Sk.misceval.asIndex(b))}),a.__index__=a.index,a.inv=new Sk.builtin.func(function(a){return Sk.abstr.numberUnaryOp(a,\"Invert\")}),a.__inv__=a.inv,a.invert=a.inv,a.__invert__=a.inv,a.lshift=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"LShift\")}),a.__lshift__=a.lshift,a.mod=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"Mod\")}),a.__mod__=a.mod,a.divmod=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"DivMod\")}),a.__divmod__=a.divmod,a.mul=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"Mult\")}),a.__mul__=a.mul,a.neg=new Sk.builtin.func(function(a){return Sk.abstr.objectNegative(a)}),a.__neg__=a.neg,a.or_=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"BitOr\")}),a.__or__=a.or_,a.pos=new Sk.builtin.func(function(a){return Sk.abstr.objectPositive(a)}),a.__pos__=a.pos,a.pow=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"Pow\")}),a.__pow__=a.pow,a.rshift=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"RShift\")}),a.__rshift__=a.rshift,a.sub=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"Sub\")}),a.__sub__=a.sub,a.truediv=a.div,a.__truediv__=a.div,a.xor=new Sk.builtin.func(function(c,a){return Sk.abstr.binary_op_(c,a,\"BitXor\")}),a.__xor__=a.xor,a.concat=new Sk.builtin.func(function(c,a){return Sk.abstr.sequenceConcat(c,a)}),a.__concat__=a.concat,a.contains=new Sk.builtin.func(function(c,a){return Sk.builtin.bool(Sk.abstr.sequenceContains(c,a))}),a.__contains__=a.contains,a.countOf=new Sk.builtin.func(function(c,a){return Sk.abstr.sequenceGetCountOf(c,a)}),a.delitem=new Sk.builtin.func(function(c,a){return Sk.abstr.sequenceDelItem(c,a)}),a.__delitem__=a.delitem,a.getitem=new Sk.builtin.func(function(c,a){return Sk.abstr.sequenceGetItem(c,a)}),a.__getitem__=a.getitem,a.indexOf=new Sk.builtin.func(function(c,a){return Sk.abstr.sequenceGetIndexOf(c,a)}),a.setitem=new Sk.builtin.func(function(d,a,b){return Sk.abstr.sequenceSetItem(d,a,b)}),a.__setitem__=a.setitem,a};","src/lib/optparse.py":"raise NotImplementedError(\"optparse is not yet implemented in Skulpt\")\n","src/lib/os.py":"raise NotImplementedError(\"os is not yet implemented in Skulpt\")\n","src/lib/os2emxpath.py":"raise NotImplementedError(\"os2emxpath is not yet implemented in Skulpt\")\n","src/lib/pdb.py":"raise NotImplementedError(\"pdb is not yet implemented in Skulpt\")\n","src/lib/pickle.py":"raise NotImplementedError(\"pickle is not yet implemented in Skulpt\")\n","src/lib/pickletools.py":"raise NotImplementedError(\"pickletools is not yet implemented in Skulpt\")\n","src/lib/pipes.py":"raise NotImplementedError(\"pipes is not yet implemented in Skulpt\")\n","src/lib/pkgutil.py":"raise NotImplementedError(\"pkgutil is not yet implemented in Skulpt\")\n","src/lib/platform.js":"var $builtinmodule=function(){var a={},b=\"undefined\"!=typeof window&&\"undefined\"!=typeof window.navigator;return a.python_implementation=new Sk.builtin.func(function(){return Sk.builtin.pyCheckArgsLen(\"python_implementation\",arguments.length,0,0),new Sk.builtin.str(\"Skulpt\")}),a.node=new Sk.builtin.func(function(){return Sk.builtin.pyCheckArgsLen(\"node\",arguments.length,0,0),new Sk.builtin.str(\"\")}),a.version=new Sk.builtin.func(function(){return Sk.builtin.pyCheckArgsLen(\"version\",arguments.length,0,0),new Sk.builtin.str(\"\")}),a.python_version=new Sk.builtin.func(function(){var a;return Sk.builtin.pyCheckArgsLen(\"python_version\",arguments.length,0,0),a=Sk.__future__.python_version?\"3.2.0\":\"2.7.0\",new Sk.builtin.str(a)}),a.system=new Sk.builtin.func(function(){var a;return Sk.builtin.pyCheckArgsLen(\"system\",arguments.length,0,0),a=b?window.navigator.appCodeName:\"\",new Sk.builtin.str(a)}),a.machine=new Sk.builtin.func(function(){var a;return Sk.builtin.pyCheckArgsLen(\"machine\",arguments.length,0,0),a=b?window.navigator.platform:\"\",new Sk.builtin.str(a)}),a.release=new Sk.builtin.func(function(){var a;return Sk.builtin.pyCheckArgsLen(\"release\",arguments.length,0,0),a=b?window.navigator.appVersion:\"\",new Sk.builtin.str(a)}),a.architecture=new Sk.builtin.func(function(){return Sk.builtin.pyCheckArgsLen(\"architecture\",arguments.length,0,0),new Sk.builtin.tuple([new Sk.builtin.str(\"64bit\"),new Sk.builtin.str(\"\")])}),a.processor=new Sk.builtin.func(function(){return Sk.builtin.pyCheckArgsLen(\"processor\",arguments.length,0,0),new Sk.builtin.str(\"\")}),a};","src/lib/platform.py":"raise NotImplementedError(\"platform is not yet implemented in Skulpt\")\n","src/lib/plistlib.py":"raise NotImplementedError(\"plistlib is not yet implemented in Skulpt\")\n","src/lib/popen2.py":"raise NotImplementedError(\"popen2 is not yet implemented in Skulpt\")\n","src/lib/poplib.py":"raise NotImplementedError(\"poplib is not yet implemented in Skulpt\")\n","src/lib/posixfile.py":"raise NotImplementedError(\"posixfile is not yet implemented in Skulpt\")\n","src/lib/posixpath.py":"raise NotImplementedError(\"posixpath is not yet implemented in Skulpt\")\n","src/lib/pprint.py":"raise NotImplementedError(\"pprint is not yet implemented in Skulpt\")\n","src/lib/profile.py":"raise NotImplementedError(\"profile is not yet implemented in Skulpt\")\n","src/lib/pstats.py":"raise NotImplementedError(\"pstats is not yet implemented in Skulpt\")\n","src/lib/pty.py":"raise NotImplementedError(\"pty is not yet implemented in Skulpt\")\n","src/lib/py_compile.py":"raise NotImplementedError(\"py_compile is not yet implemented in Skulpt\")\n","src/lib/pyclbr.py":"raise NotImplementedError(\"pyclbr is not yet implemented in Skulpt\")\n","src/lib/pydoc.py":"raise NotImplementedError(\"pydoc is not yet implemented in Skulpt\")\n","src/lib/pydoc_topics.py":"raise NotImplementedError(\"pydoc_topics is not yet implemented in Skulpt\")\n","src/lib/quopri.py":"raise NotImplementedError(\"quopri is not yet implemented in Skulpt\")\n","src/lib/random.js":"var MersenneTwister=function(a){a==null&&(a=new Date().getTime()),this.N=624,this.M=397,this.MATRIX_A=2567483615,this.UPPER_MASK=2147483648,this.LOWER_MASK=2147483647,this.mt=Array(this.N),this.mti=this.N+1,this.init_genrand(a)};MersenneTwister.prototype.init_genrand=function(a){for(this.mt[0]=a>>>0,this.mti=1;this.mti<this.N;this.mti++){var a=this.mt[this.mti-1]^this.mt[this.mti-1]>>>30;this.mt[this.mti]=(1812433253*((4294901760&a)>>>16)<<16)+1812433253*(65535&a)+this.mti,this.mt[this.mti]>>>=0}},MersenneTwister.prototype.init_by_array=function(a,b){var d,e,f;for(this.init_genrand(19650218),d=1,e=0,f=this.N>b?this.N:b;f;f--){var g=this.mt[d-1]^this.mt[d-1]>>>30;this.mt[d]=(this.mt[d]^(1664525*((4294901760&g)>>>16)<<16)+1664525*(65535&g))+a[e]+e,this.mt[d]>>>=0,d++,e++,d>=this.N&&(this.mt[0]=this.mt[this.N-1],d=1),e>=b&&(e=0)}for(f=this.N-1;f;f--){var g=this.mt[d-1]^this.mt[d-1]>>>30;this.mt[d]=(this.mt[d]^(1566083941*((4294901760&g)>>>16)<<16)+1566083941*(65535&g))-d,this.mt[d]>>>=0,d++,d>=this.N&&(this.mt[0]=this.mt[this.N-1],d=1)}this.mt[0]=2147483648},MersenneTwister.prototype.genrand_int32=function(){var a,b=[0,this.MATRIX_A];if(this.mti>=this.N){var d;for(this.mti==this.N+1&&this.init_genrand(5489),d=0;d<this.N-this.M;d++)a=this.mt[d]&this.UPPER_MASK|this.mt[d+1]&this.LOWER_MASK,this.mt[d]=this.mt[d+this.M]^a>>>1^b[1&a];for(;d<this.N-1;d++)a=this.mt[d]&this.UPPER_MASK|this.mt[d+1]&this.LOWER_MASK,this.mt[d]=this.mt[d+(this.M-this.N)]^a>>>1^b[1&a];a=this.mt[this.N-1]&this.UPPER_MASK|this.mt[0]&this.LOWER_MASK,this.mt[this.N-1]=this.mt[this.M-1]^a>>>1^b[1&a],this.mti=0}return a=this.mt[this.mti++],a^=a>>>11,a^=2636928640&a<<7,a^=4022730752&a<<15,a^=a>>>18,a>>>0},MersenneTwister.prototype.genrand_int31=function(){return this.genrand_int32()>>>1},MersenneTwister.prototype.genrand_real1=function(){return this.genrand_int32()*(1/4294967295)},MersenneTwister.prototype.random=function(){return this.genrand_int32()*(1/4294967296)},MersenneTwister.prototype.genrand_real3=function(){return(this.genrand_int32()+.5)*(1/4294967296)},MersenneTwister.prototype.genrand_res53=function(){var d=this.genrand_int32()>>>5,a=this.genrand_int32()>>>6;return(67108864*d+a)*(1/9007199254740992)};var $builtinmodule=function(){var a=Math.log,b=Math.sqrt,d={},e=new MersenneTwister,f=void 0;d.seed=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgsLen(\"seed\",arguments.length,0,1),a=Sk.builtin.asnum$(a),e=0<arguments.length?new MersenneTwister(a):new MersenneTwister,Sk.builtin.none.none$}),d.random=new Sk.builtin.func(function(){return Sk.builtin.pyCheckArgsLen(\"random\",arguments.length,0,0),new Sk.builtin.float_(e.genrand_res53())});var g=function(a){return 0|a},h=function(a,b,d){var f,h,i;if(!Sk.builtin.checkInt(a))throw new Sk.builtin.ValueError(\"non-integer first argument for randrange()\");if(void 0===b){if(0>=a)throw new Sk.builtin.ValueError(\"empty range for randrange()\");return i=g(e.genrand_res53()*a),new Sk.builtin.int_(i)}if(!Sk.builtin.checkInt(b))throw new Sk.builtin.ValueError(\"non-integer stop for randrange()\");if(void 0===d&&(d=1),f=b-a,1==d&&0<f)return i=a+g(e.genrand_res53()*f),new Sk.builtin.int_(i);if(1==d)throw new Sk.builtin.ValueError(\"empty range for randrange() (\"+a+\", \"+b+\", \"+f+\")\");if(!Sk.builtin.checkInt(d))throw new Sk.builtin.ValueError(\"non-integer step for randrange()\");if(0<d)h=g((f+d-1)/d);else if(0>d)h=g((f+d+1)/d);else throw new Sk.builtin.ValueError(\"zero step for randrange()\");if(0>=h)throw new Sk.builtin.ValueError(\"empty range for randrange()\");return i=a+d*g(e.genrand_res53()*h),new Sk.builtin.int_(i)};d.randint=new Sk.builtin.func(function(d,e){return Sk.builtin.pyCheckArgsLen(\"randint\",arguments.length,2,2),d=Sk.builtin.asnum$(d),e=Sk.builtin.asnum$(e),h(d,e+1)}),d.randrange=new Sk.builtin.func(function(a,b,d){return Sk.builtin.pyCheckArgsLen(\"randrange\",arguments.length,1,3),a=Sk.builtin.asnum$(a),b=Sk.builtin.asnum$(b),d=Sk.builtin.asnum$(d),h(a,b,d)}),d.uniform=new Sk.builtin.func(function(d,f){Sk.builtin.pyCheckArgsLen(\"uniform\",arguments.length,2,2),d=Sk.builtin.asnum$(d),f=Sk.builtin.asnum$(f);var g=e.genrand_res53();return c=d+g*(f-d),new Sk.builtin.float_(c)}),d.triangular=new Sk.builtin.func(function(a,d,f){Sk.builtin.pyCheckArgsLen(\"triangular\",arguments.length,2,3),Sk.builtin.pyCheckType(\"low\",\"number\",Sk.builtin.checkNumber(a)),Sk.builtin.pyCheckType(\"high\",\"number\",Sk.builtin.checkNumber(d));var g,h,i;return a=Sk.builtin.asnum$(a),d=Sk.builtin.asnum$(d),a>d&&(i=a,a=d,d=i),void 0===f||f instanceof Sk.builtin.none?f=(d-a)/2:(Sk.builtin.pyCheckType(\"mode\",\"number\",Sk.builtin.checkNumber(f)),f=Sk.builtin.asnum$(f)),g=e.genrand_res53(),h=g<(f-a)/(d-a)?a+b(g*(d-a)*(f-a)):d-b((1-g)*(d-a)*(d-f)),new Sk.builtin.float_(h)});var i=function(d,g){var k,l,m,n,o,h=Math.sin,i=Math.cos,j=Math.PI;return void 0===f?(k=e.genrand_res53(),l=e.genrand_res53(),m=b(-2*a(k)),n=2*j*l,o=m*i(n),f=m*h(n)):(o=f,f=void 0),d+g*o};return d.gauss=new Sk.builtin.func(function(a,b){return Sk.builtin.pyCheckArgsLen(\"gauss\",arguments.length,2,2),Sk.builtin.pyCheckType(\"mu\",\"number\",Sk.builtin.checkNumber(a)),Sk.builtin.pyCheckType(\"sigma\",\"number\",Sk.builtin.checkNumber(b)),a=Sk.builtin.asnum$(a),b=Sk.builtin.asnum$(b),new Sk.builtin.float_(i(a,b))}),d.normalvariate=d.gauss,d.lognormvariate=new Sk.builtin.func(function(a,b){var d=Math.exp;return Sk.builtin.pyCheckArgsLen(\"lognormvariate\",arguments.length,2,2),Sk.builtin.pyCheckType(\"mu\",\"number\",Sk.builtin.checkNumber(a)),Sk.builtin.pyCheckType(\"sigma\",\"number\",Sk.builtin.checkNumber(b)),a=Sk.builtin.asnum$(a),b=Sk.builtin.asnum$(b),new Sk.builtin.float_(d(i(a,b)))}),d.expovariate=new Sk.builtin.func(function(b){Sk.builtin.pyCheckArgsLen(\"expovariate\",arguments.length,1,1),Sk.builtin.pyCheckType(\"lambd\",\"number\",Sk.builtin.checkNumber(b)),b=Sk.builtin.asnum$(b);var d=e.genrand_res53();return new Sk.builtin.float_(-a(d)/b)}),d.choice=new Sk.builtin.func(function(a){if(Sk.builtin.pyCheckArgsLen(\"choice\",arguments.length,1,1),Sk.builtin.pyCheckType(\"seq\",\"sequence\",Sk.builtin.checkSequence(a)),void 0!==a.sq$length){var b=g(e.genrand_res53()*a.sq$length());return a.mp$subscript(b)}throw new Sk.builtin.TypeError(\"object has no length\")}),d.shuffle=new Sk.builtin.func(function(a){if(Sk.builtin.pyCheckArgsLen(\"shuffle\",arguments.length,1,1),Sk.builtin.pyCheckType(\"x\",\"sequence\",Sk.builtin.checkSequence(a)),void 0===a.sq$length)throw new Sk.builtin.TypeError(\"object has no length\");else if(void 0!==a.mp$ass_subscript)for(var b=a.sq$length()-1;0<b;b-=1){var d=g(e.genrand_res53()*(b+1)),f=a.mp$subscript(d);a.mp$ass_subscript(d,a.mp$subscript(b)),a.mp$ass_subscript(b,f)}else throw new Sk.builtin.TypeError(\"object is immutable\");return Sk.builtin.none.none$}),d.sample=new Sk.builtin.func(function(a,b){var f,g,h,l,m,d=Math.floor;for(Sk.builtin.pyCheckArgsLen(\"sample\",arguments.length,2,2),Sk.builtin.pyCheckType(\"population\",\"iterable\",Sk.builtin.checkIterable(a)),Sk.builtin.pyCheckType(\"k\",\"integer\",Sk.builtin.checkInt(b)),b=Sk.builtin.asnum$(b),m=[],h=Sk.abstr.iter(a),(f=0,l=h.tp$iternext());void 0!==l;f++,l=h.tp$iternext())g=d(e.genrand_res53()*(f+1)),f<b?(g<f&&(m[f]=m[g]),m[g]=l):g<b&&(m[g]=l);if(f<b)throw new Sk.builtin.ValueError(\"sample larger than population\");return Sk.builtin.list(m)}),d};","src/lib/re.js":"var $builtinmodule=function(name){var validGroups,convert,getFlags,_split,_findall,matchobj,_search,_match,regexobj,mod={};return mod.I=2,mod.IGNORECASE=2,mod.M=8,mod.MULTILINE=8,validGroups=[\"(?:\",\"(?=\",\"(?!\"],convert=function(a){var b,c,d;if(c=a.match(/\\(\\?./g),c)for(d=0;d<c.length;d++)if(-1==validGroups.indexOf(c[d]))throw new Sk.builtin.ValueError(\"Disallowed group in pattern: '\"+c[d]+\"'\");return b=a.replace(\"/\\\\/g\",\"\\\\\\\\\"),b=a.replace(/([^\\\\]){,(?![^\\[]*\\])/g,\"$1{0,\"),b},getFlags=function(a){var b=\"g\";return(a&mod.IGNORECASE)==mod.IGNORECASE&&(b+=\"i\"),(a&mod.MULTILINE)==mod.MULTILINE&&(b+=\"m\"),b},_split=function(a,b,c,d){var e,f,g,h,i,j,k,l,m;if(Sk.builtin.pyCheckArgsLen(\"split\",arguments.length,2,4),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"pattern must be a string\");if(!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"string must be a string\");if(void 0===c&&(c=0),!Sk.builtin.checkNumber(c))throw new Sk.builtin.TypeError(\"maxsplit must be a number\");if(void 0===d&&(d=0),!Sk.builtin.checkNumber(d))throw new Sk.builtin.TypeError(\"flags must be a number\");for(c=Sk.builtin.asnum$(c),e=Sk.ffi.unwrapo(a),f=Sk.ffi.unwrapo(b),e=convert(e),g=null!==e.match(/^\\(.*\\)$/),h=getFlags(d),i=new RegExp(e,h),j=[],k,l=0,m=0;null!=(k=i.exec(f))&&k.index!==i.lastIndex&&(j.push(new Sk.builtin.str(f.substring(l,k.index))),g&&j.push(new Sk.builtin.str(k[0])),l=i.lastIndex,m+=1,!(c&&m>=c)););return j.push(new Sk.builtin.str(f.substring(l))),new Sk.builtin.list(j)},_split.co_varnames=[\"pattern\",\"string\",\"maxsplit\",\"flags\"],_split.$defaults=[new Sk.builtin.int_(0),new Sk.builtin.int_(0)],mod.split=new Sk.builtin.func(_split),_findall=function(a,b,c){var d,e,f,g,h,j;if(Sk.builtin.pyCheckArgsLen(\"findall\",arguments.length,2,3),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"pattern must be a string\");if(!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"string must be a string\");if(void 0===c&&(c=0),!Sk.builtin.checkNumber(c))throw new Sk.builtin.TypeError(\"flags must be a number\");if(d=Sk.ffi.unwrapo(a),e=Sk.ffi.unwrapo(b),d=convert(d),f=getFlags(c),g=new RegExp(d,f),d.match(/\\$/)){var k=new RegExp(/\\n$/);e.match(k)&&(e=e.slice(0,-1))}for(h=[],j;null!=(j=g.exec(e));){if(2>j.length)h.push(new Sk.builtin.str(j[0]));else if(2==j.length)h.push(new Sk.builtin.str(j[1]));else{for(var l=[],m=1;m<j.length;m++)l.push(new Sk.builtin.str(j[m]));h.push(new Sk.builtin.tuple(l))}j.index===g.lastIndex&&(g.lastIndex+=1)}return new Sk.builtin.list(h)},_findall.co_varnames=[\"pattern\",\"string\",\"flags\"],_findall.$defaults=[new Sk.builtin.int_(0)],mod.findall=new Sk.builtin.func(_findall),matchobj=function(a,b){b.__init__=new Sk.builtin.func(function(a,b,c,d){a.thematch=b,a.re=c,a.string=d}),b.groups=new Sk.builtin.func(function(a){var b=a.thematch.v.slice(1);return new Sk.builtin.tuple(b)}),b.group=new Sk.builtin.func(function(a,b){if(b=void 0===b?0:Sk.builtin.asnum$(b),b>=a.thematch.v.length)throw new Sk.builtin.IndexError(\"Index out of range: \"+b);return a.thematch.v[b]})},mod.MatchObject=Sk.misceval.buildClass(mod,matchobj,\"MatchObject\",[]),mod._findre=function(res,string){res=res.replace(/([^\\\\]){,(?![^\\[]*\\])/g,\"$1{0,\");var matches,sitem,retval,re=eval(res),patt=/\\n$/,str=Sk.ffi.remapToJs(string);if(matches=str.match(patt)?str.slice(0,-1).match(re):str.match(re),retval=new Sk.builtin.list,null==matches)return retval;for(var i=0;i<matches.length;++i)sitem=new Sk.builtin.str(matches[i]),retval.v.push(sitem);return retval},_search=function(a,b,c){var d,e;if(Sk.builtin.pyCheckArgsLen(\"search\",arguments.length,2,3),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"pattern must be a string\");if(!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"string must be a string\");if(void 0===c&&(c=0),!Sk.builtin.checkNumber(c))throw new Sk.builtin.TypeError(\"flags must be a number\");return(e=\"/\"+a.v.replace(/\\//g,\"\\\\/\")+\"/\",lst=mod._findre(e,b),1>lst.v.length)?Sk.builtin.none.none$:(d=Sk.misceval.callsimArray(mod.MatchObject,[lst,a,b]),d)},_search.co_varnames=[\"pattern\",\"string\",\"flags\"],_search.$defaults=[new Sk.builtin.int_(0)],mod.search=new Sk.builtin.func(_search),_match=function(a,b,c){var d,e;if(Sk.builtin.pyCheckArgsLen(\"match\",arguments.length,2,3),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"pattern must be a string\");if(!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"string must be a string\");if(void 0===c&&(c=0),!Sk.builtin.checkNumber(c))throw new Sk.builtin.TypeError(\"flags must be a number\");return(pat=Sk.ffi.remapToJs(a),e=\"/^\"+pat.replace(/\\//g,\"\\\\/\")+\"/\",lst=mod._findre(e,b),1>Sk.ffi.remapToJs(lst).length)?Sk.builtin.none.none$:(d=Sk.misceval.callsimArray(mod.MatchObject,[lst,a,b]),d)},_match.co_varnames=[\"pattern\",\"string\",\"flags\"],_match.$defaults=[new Sk.builtin.int_(0)],mod.match=new Sk.builtin.func(_match),regexobj=function(a,b){var c,d,e,f,g,h;b.__init__=new Sk.builtin.func(function(a,b,c){a.re=b,a.flags=void 0===c?0:c}),h=new Sk.builtin.func(function(a){var b=\"re.compile('\"+Sk.ffi.remapToPy(a.re)+\"')\";return Sk.ffi.remapToPy(b.substring(0,212))}),b.__str__=h,b.__repr__=h,c=function(a,b,c){var d=Sk.ffi.remapToJs(a),e=null==b?0:Sk.ffi.remapToJs(b),f=null==c?d.length:Sk.ffi.remapToJs(c);return\"^\"==e&&(e=d.indexOf(\"\\n\")+1),f==Sk.builtin.none.none$&&(f=d.length),Sk.ffi.remapToPy(d.substring(e,f))},d=function(a,b,d,e){Sk.builtin.pyCheckArgsLen(\"search\",arguments.length,2,4);var f=c(b,d,e);return _search(a.re,f,a.flags)},d.co_varnames=[\"self\",\"string\",\"pos\",\"endpos\"],d.$defaults=[new Sk.builtin.int_(0),Sk.builtin.none.none$],b.search=new Sk.builtin.func(d),e=function(a,b,d,e){Sk.builtin.pyCheckArgsLen(\"match\",arguments.length,2,4);var f=c(b,d,e);return _match(a.re,f,a.flags)},e.co_varnames=[\"self\",\"string\",\"pos\",\"endpos\"],e.$defaults=[new Sk.builtin.int_(0),Sk.builtin.none.none$],b.match=new Sk.builtin.func(e),f=function(a,b,c){if(Sk.builtin.pyCheckArgsLen(\"split\",arguments.length,2,3),void 0===c&&(c=0),!Sk.builtin.checkInt(c))throw new Sk.builtin.TypeError(\"maxsplit must be an integer\");return _split(a.re,b,c,a.flags)},f.co_varnames=[\"self\",\"string\",\"maxsplit\"],f.$defaults=[new Sk.builtin.int_(0)],b.split=new Sk.builtin.func(f),g=function(a,b,d,e){Sk.builtin.pyCheckArgsLen(\"findall\",arguments.length,2,4);var f=c(b,d,e);return _findall(a.re,f,a.flags)},g.co_varnames=[\"self\",\"string\",\"pos\",\"endpos\"],g.$defaults=[new Sk.builtin.int_(0),Sk.builtin.none.none$],b.findall=new Sk.builtin.func(g)},mod.RegexObject=Sk.misceval.buildClass(mod,regexobj,\"RegexObject\",[]),mod.compile=new Sk.builtin.func(function(a,b){var c;if(Sk.builtin.pyCheckArgsLen(\"compile\",arguments.length,1,2),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"pattern must be a string\");if(void 0===b&&(b=0),!Sk.builtin.checkNumber(b))throw new Sk.builtin.TypeError(\"flags must be a number\");return c=Sk.misceval.callsimArray(mod.RegexObject,[a,b]),c}),mod.purge=new Sk.builtin.func(function(){}),mod};","src/lib/repr.py":"raise NotImplementedError(\"repr is not yet implemented in Skulpt\")\n","src/lib/rexec.py":"raise NotImplementedError(\"rexec is not yet implemented in Skulpt\")\n","src/lib/rfc822.py":"raise NotImplementedError(\"rfc822 is not yet implemented in Skulpt\")\n","src/lib/rlcompleter.py":"raise NotImplementedError(\"rlcompleter is not yet implemented in Skulpt\")\n","src/lib/robotparser.py":"raise NotImplementedError(\"robotparser is not yet implemented in Skulpt\")\n","src/lib/runpy.py":"raise NotImplementedError(\"runpy is not yet implemented in Skulpt\")\n","src/lib/sched.py":"raise NotImplementedError(\"sched is not yet implemented in Skulpt\")\n","src/lib/sets.py":"raise NotImplementedError(\"sets is not yet implemented in Skulpt\")\n","src/lib/sgmllib.py":"raise NotImplementedError(\"sgmllib is not yet implemented in Skulpt\")\n","src/lib/sha.py":"raise NotImplementedError(\"sha is not yet implemented in Skulpt\")\n","src/lib/shelve.py":"raise NotImplementedError(\"shelve is not yet implemented in Skulpt\")\n","src/lib/shlex.py":"raise NotImplementedError(\"shlex is not yet implemented in Skulpt\")\n","src/lib/shutil.py":"raise NotImplementedError(\"shutil is not yet implemented in Skulpt\")\n","src/lib/signal.js":"var $builtinmodule=function(){var a={SIG_DFL:new Sk.builtin.int_(0),SIG_IGN:new Sk.builtin.int_(1),CTRL_C_EVENT:new Sk.builtin.int_(0),CTRL_BREAK_EVENT:new Sk.builtin.int_(0),NSIG:new Sk.builtin.int_(23),SIGHUP:new Sk.builtin.int_(1),SIGNINT:new Sk.builtin.int_(2),SIGILL:new Sk.builtin.int_(4),SIGFPE:new Sk.builtin.int_(8),SIGKILL:new Sk.builtin.int_(9),SIGSEGV:new Sk.builtin.int_(11),SIGTERM:new Sk.builtin.int_(15),SIGBREAK:new Sk.builtin.int_(21),SIGABRT:new Sk.builtin.int_(22),pause:new Sk.builtin.func(function(){Sk.builtin.pyCheckArgsLen(\"pause\",arguments.length,0,0);var a=new Sk.misceval.Suspension;return a.resume=function(){return Sk.builtin.none.none$},a.data={type:\"Sk.promise\",promise:new Promise(function(a){if(null!=Sk.signals&&Sk.signals.addEventListener){function b(){Sk.signals.removeEventListener(b),a()}Sk.signals.addEventListener(b)}else console.warn(\"signal.pause() not supported\"),Sk.misceval.print_(\"signal.pause() not supported\"),a()})},a}),signal:new Sk.builtin.func(function(){throw new Sk.builtin.NotImplementedError(\"signal.signal is not supported.\")})};return a};","src/lib/simplegui.js":"var $builtinmodule=function(){var b=String.fromCharCode;function a(a){var b,c,d,e,f,g,h,j,k=0,l=0,m=\"\",n=[];if(!a)return a;do b=a[k++],c=a[k++],d=a[k++],j=b<<16|c<<8|d,e=63&j>>18,f=63&j>>12,g=63&j>>6,h=63&j,n[l++]=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".charAt(e)+\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".charAt(f)+\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".charAt(g)+\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".charAt(h);while(k<a.length);m=n.join(\"\");var o=a.length%3;return(o?m.slice(0,o-3):m)+\"===\".slice(o||3)}var c=!1,d={};Sk.simplegui={};var e=[],f=[],g=[],k=[],l=0,m={serif:!0,\"sans-serif\":!0,monospace:!0},n=function(){return f.push({id:l,frame:{}}),l++},o=function(a,b,c){a.addEventListener(b,c),k.push({element:a,eventType:b,handler:c})};(function(){for(var a=0,b=[\"ms\",\"moz\",\"webkit\",\"o\"],c=0;c<b.length&&!window.requestAnimationFrame;++c)window.requestAnimationFrame=window[b[c]+\"RequestAnimationFrame\"],window.cancelAnimationFrame=window[b[c]+\"CancelAnimationFrame\"]||window[b[c]+\"CancelRequestAnimationFrame\"];window.requestAnimationFrame||(window.requestAnimationFrame=function(b){var c=Math.max,d=new Date().getTime(),e=c(0,16-(d-a)),f=window.setTimeout(function(){b(d+e)},e);return a=d+e,f}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(a){clearTimeout(a)})})();var p=function(a){for(var b,c=0;c<f.length;c++)if(b=f[c],b.id===a){b.frame.cleanup=!0,Sk.misceval.callsimArray(b.frame.stop,[b.frame]),f.splice(c,1);break}};Sk.simplegui.cleanup=function(a){var b;if(void 0!==a)return void p(a);for(b=0;b<e.length;b++)Sk.misceval.callsimArray(e[b].stop,[e[b]]);for(e=[],b=0;b<g.length;b++)Sk.misceval.callsimArray(g[b].pause,[g[b]]);for(g=[],b=0;b<f.length;b++){var c=f[b];c.frame.cleanup=!1,Sk.misceval.callsimArray(c.frame.stop,[c.frame])}f=[]},Sk.simplegui.isRunning=function(){return 0<f.length||0<e.length||0<g.length},Sk.simplegui.pause=function(){var a,b,d;for(b=0;b<f.length;b++){var l=f[b];l.frame.pause()}for(d=0;d<k.length;d++)a=k[d],a.element.removeEventListener(a.eventType,a.handler);for(b=0;b<e.length;b++)e[b]._timer?(e[b].doResume=!0,Sk.misceval.callsim(e[b].stop,e[b])):e[b].doResume=!1;for(b=0;b<g.length;b++)g[b].isPlaying?(g[b].doResume=!0,Sk.misceval.callsim(g[b].pause,g[b])):g[b].doResume=!1;c=!0},Sk.simplegui.resume=function(){var a,b,d;if(!1!=c){for(b=0;b<f.length;b++){var l=f[b];l.frame.resume()}for(d=0;d<k.length;d++)a=k[d],a.element.addEventListener(a.eventType,a.handler);for(d=0;d<e.length;d++)e[d].doResume&&(Sk.misceval.callsim(e[d].start,e[d]),e[d].doResume=!1);for(d=0;d<g.length;d++)g[d].doResume&&(Sk.misceval.callsim(g[d].play,g[d]),g[d].doResume=!1);c=!1}};d.Image=Sk.misceval.buildClass(d,function(a,b){b.__init__=new Sk.builtin.func(function(a,b){var c=Sk.ffi.unwrapo(b);c.startsWith(\"http://\")&&(c=c.slice(5)),a.image=new Image,a.image.src=c,a.__class__=d.Image}),b.get_width=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_width\",arguments,1,1),new Sk.builtin.int_(a.image.width)}),b.get_height=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_height\",arguments,1,1),new Sk.builtin.int_(a.image.height)})},\"Image\",[]),d.load_image=new Sk.builtin.func(function(a){if(Sk.builtin.pyCheckArgs(\"load_image\",arguments,1,1),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"expected string\");return Sk.misceval.callsimArray(d.Image,[a])});d.Sound=Sk.misceval.buildClass(d,function(a,b){b.__init__=new Sk.builtin.func(function(a,b){var c;Sk.builtin.checkString(b)&&(b=Sk.ffi.unwrapo(b)),c=b,c.startsWith(\"http://\")&&(c=c.slice(5)),a.sound=new Audio(c),a.__class__=d.Sound,a.isPlaying=!1,a.doResume=!1,g.push(a)}),b.set_volume=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"set_volume\",arguments,2,2),!Sk.builtin.checkNumber(b))throw new Sk.builtin.TypeError(\"Volume must be a number\");if(b=Sk.builtin.asnum$(b),0<=b&&1>=b)a.sound.volume=b;else throw new Sk.builtin.ValueError(\"Volume must be between 0 and 1\");return Sk.builtin.none.none$}),b.play=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"play\",arguments,1,1),a.sound.play(),a.isPlaying=!0,Sk.builtin.none.none$}),b.pause=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"pause\",arguments,1,1),a.sound.pause(),a.isPlaying=!1,Sk.builtin.none.none$}),b.rewind=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"rewind\",arguments,1,1),a.sound.pause(),a.sound.currentTime&&(a.sound.currentTime=0),Sk.builtin.none.none$})},\"Sound\",[]),d.load_sound=new Sk.builtin.func(function(a){if(Sk.builtin.pyCheckArgs(\"load_sound\",arguments,1,1),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"expected string\");return Sk.misceval.callsimArray(d.Sound,[a])}),d.create_sound=new Sk.builtin.func(function(b,c,e){function f(a,c){return 255&a>>8*c}if(Sk.builtin.pyCheckArgs(\"create_sound\",arguments,1,3),!Sk.builtin.checkSequence(b))throw new Sk.builtin.TypeError(\"sound_data must be a sequence\");if(void 0!==c){if(!Sk.builtin.checkInt(c))throw new Sk.builtin.TypeError(\"sample_rate must be an integer\");c=Sk.builtin.asnum$(c)}else c=8e3;if(void 0!==e){if(!Sk.builtin.checkInt(e))throw new Sk.builtin.TypeError(\"num_channels must be an integer\");e=Sk.builtin.asnum$(e)}else e=1;var g,h=8*e/8,j=c*h,k=b.sq$length()/e,l=k*h,m=36+l,n=[82,73,70,70,f(m,0),f(m,1),f(m,2),f(m,3),87,65,86,69,102,109,116,32,16,0,0,0,1,0,f(e,0),f(e,1),f(c,0),f(c,1),f(c,2),f(c,3),f(j,0),f(j,1),f(j,2),f(j,3),f(h,0),f(h,1),f(8,0),f(8,1),100,97,116,97,f(l,0),f(l,1),f(l,2),f(l,3)],o=b.tp$iter();for(g=o.tp$iternext();void 0!==g;g=o.tp$iternext()){if(!Sk.builtin.checkInt(g))throw new Sk.builtin.ValueError(\"sound data must be 8-bit integers\");if(g=Sk.builtin.asnum$(g),0>g||255<g)throw new Sk.builtin.ValueError(\"sound data must be 8-bit integers\");n.push(g)}var p=\"data:audio/wav;base64,\"+a(n);return Sk.misceval.callsimArray(d.Sound,[p])});var q=function(a){return Math[0>a?\"ceil\":\"floor\"](a)},r=function(a){return!!(Sk.builtin.checkSequence(a)&&2==a.sq$length())&&!!(Sk.builtin.checkNumber(a.mp$subscript(0))&&Sk.builtin.checkNumber(a.mp$subscript(1)))},s=/[^\\040-\\176]/;d.Canvas=Sk.misceval.buildClass(d,function(a,b){b.__init__=new Sk.builtin.func(function(a,b){return a.canvas=b,a.context=a.canvas.getContext(\"2d\"),a.context&&a.context.drawImage?void(a.drawcmds=[],a.clear=function(b){this.context.fillStyle=b,this.context.fillRect(0,0,a.canvas.width,a.canvas.height)},a.drawall=function(){var a,b=this.drawcmds.length;for(a=0;a<b;a++)this.drawcmds[a]()},a.resetdraw=function(){this.drawcmds=[]},a.__class__=d.Canvas):void alert(\"Cannot draw on canvas!\")}),b.draw_text=new Sk.builtin.func(function(a,b,c,d,e,f){if(Sk.builtin.pyCheckArgs(\"draw_text\",arguments,5,6),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"text must be a string\");if(!r(c))throw new Sk.builtin.TypeError(\"point must be a 2 element sequence\");if(!Sk.builtin.checkNumber(d))throw new Sk.builtin.TypeError(\"size must be a number\");if(d=Sk.builtin.asnum$(d),!Sk.builtin.checkString(e))throw new Sk.builtin.TypeError(\"color must be a string\");if(void 0!==f){if(!Sk.builtin.checkString(f))throw new Sk.builtin.TypeError(\"font face must be a string\");if(f=Sk.ffi.unwrapo(f),!0!==m[f])throw new Sk.builtin.ValueError(\"'\"+f+\"' is not a valid font face\")}else f=\"serif\";if(!function(a){return 0!==a.clientWidth&&0!==a.clientHeight&&0!==a.style.opacity&&\"hidden\"!==a.style.visibility}(a.canvas))return Sk.builtin.none.none$;if(b=Sk.ffi.unwrapo(b),s.test(b))throw new Sk.builtin.ValueError(\"text may not contain non-printing characters\");var g=d+\"px \"+f,h=Sk.ffi.unwrapo(e),i=Sk.builtin.asnum$(c.mp$subscript(0)),j=Sk.builtin.asnum$(c.mp$subscript(1)),k=function(){a.context.font=g,a.context.fillStyle=h,a.context.fillText(b,i,j)};return a.drawcmds.push(k),Sk.builtin.none.none$}),b.draw_point=new Sk.builtin.func(function(a,b,c){if(Sk.builtin.pyCheckArgs(\"draw_point\",arguments,3,3),!r(b))throw new Sk.builtin.TypeError(\"point must be a 2 element sequence\");if(!Sk.builtin.checkString(c))throw new Sk.builtin.TypeError(\"color must be a string\");c=Sk.ffi.unwrapo(c);var d=Sk.builtin.asnum$(b.mp$subscript(0)),e=Sk.builtin.asnum$(b.mp$subscript(1)),f=function(){a.context.fillStyle=c,a.context.fillRect(d,e,1,1)};return a.drawcmds.push(f),Sk.builtin.none.none$}),b.draw_line=new Sk.builtin.func(function(a,b,c,d,e){if(Sk.builtin.pyCheckArgs(\"draw_line\",arguments,5,5),!r(b))throw new Sk.builtin.TypeError(\"point1 must be a 2 element sequence\");if(!r(c))throw new Sk.builtin.TypeError(\"point2 must be a 2 element sequence\");if(!Sk.builtin.checkNumber(d))throw new Sk.builtin.TypeError(\"width must be a number\");if(d=Sk.builtin.asnum$(d),0>=d)throw new Sk.builtin.ValueError(\"width must be a positive number\");if(!Sk.builtin.checkString(e))throw new Sk.builtin.TypeError(\"color must be a string\");e=Sk.ffi.unwrapo(e);var f=Sk.builtin.asnum$(b.mp$subscript(0)),g=Sk.builtin.asnum$(b.mp$subscript(1)),h=Sk.builtin.asnum$(c.mp$subscript(0)),i=Sk.builtin.asnum$(c.mp$subscript(1)),j=function(){a.context.lineWidth=d,a.context.strokeStyle=e,a.context.beginPath(),a.context.moveTo(f,g),a.context.lineTo(h,i),a.context.stroke()};return a.drawcmds.push(j),Sk.builtin.none.none$}),b.draw_circle=new Sk.builtin.func(function(a,b,c,d,e,f){if(Sk.builtin.pyCheckArgs(\"draw_circle\",arguments,5,6),!r(b))throw new Sk.builtin.TypeError(\"center must be a 2 element sequence\");if(!Sk.builtin.checkNumber(c))throw new Sk.builtin.TypeError(\"radius must be a number\");if(c=Sk.builtin.asnum$(c),0>=c)throw new Sk.builtin.ValueError(\"radius must be a positive number\");if(!Sk.builtin.checkNumber(d))throw new Sk.builtin.TypeError(\"linewidth must be a number\");if(d=Sk.builtin.asnum$(d),0>=d)throw new Sk.builtin.ValueError(\"linewidth must be a positive number\");if(!Sk.builtin.checkString(e))throw new Sk.builtin.TypeError(\"linecolor must be a string\");if(void 0===f||f===Sk.builtin.none.none$)f=Sk.builtin.none.none$;else if(!Sk.builtin.checkString(f))throw new Sk.builtin.TypeError(\"fillcolor must be a string\");var g=Sk.ffi.unwrapo(e),h=f===Sk.builtin.none.none$?null:Sk.ffi.unwrapo(f),i=Sk.builtin.asnum$(b.mp$subscript(0)),j=Sk.builtin.asnum$(b.mp$subscript(1)),k=function(){var b=Math.PI;a.context.lineWidth=d,a.context.strokeStyle=g,a.context.beginPath(),a.context.arc(i,j,c,0,2*b,!1),null!==h&&(a.context.fillStyle=h,a.context.fill()),a.context.stroke()};return a.drawcmds.push(k),Sk.builtin.none.none$}),b.draw_arc=new Sk.builtin.func(function(a,b,c,d,e,f,g){if(Sk.builtin.pyCheckArgs(\"draw_arc\",arguments,7,7),!r(b))throw new Sk.builtin.TypeError(\"center must be a 2 element sequence\");if(!Sk.builtin.checkNumber(c))throw new Sk.builtin.TypeError(\"radius must be a number\");if(c=Sk.builtin.asnum$(c),0>=c)throw new Sk.builtin.ValueError(\"radius must be a positive number\");if(!Sk.builtin.checkNumber(d))throw new Sk.builtin.TypeError(\"start must be a number\");if(d=Sk.builtin.asnum$(d),!Sk.builtin.checkNumber(e))throw new Sk.builtin.TypeError(\"end must be a number\");if(e=Sk.builtin.asnum$(e),!Sk.builtin.checkNumber(f))throw new Sk.builtin.TypeError(\"linewidth must be a number\");if(f=Sk.builtin.asnum$(f),0>=f)throw new Sk.builtin.ValueError(\"linewidth must be a positive number\");if(!Sk.builtin.checkString(g))throw new Sk.builtin.TypeError(\"linecolor must be a string\");var h=Sk.ffi.unwrapo(g),i=Sk.builtin.asnum$(b.mp$subscript(0)),j=Sk.builtin.asnum$(b.mp$subscript(1)),k=function(){a.context.lineWidth=f,a.context.strokeStyle=h,a.context.beginPath(),a.context.arc(i,j,c,d,e,!1),a.context.stroke()};return a.drawcmds.push(k),Sk.builtin.none.none$}),b.draw_polyline=new Sk.builtin.func(function(a,b,c,d){if(Sk.builtin.pyCheckArgs(\"draw_polyline\",arguments,4,4),!Sk.builtin.checkSequence(b))throw new Sk.builtin.TypeError(\"points must be a sequence\");if(!Sk.builtin.checkNumber(c))throw new Sk.builtin.TypeError(\"width must be a number\");if(c=Sk.builtin.asnum$(c),0>=c)throw new Sk.builtin.ValueError(\"width must be a positive number\");if(!Sk.builtin.checkString(d))throw new Sk.builtin.TypeError(\"color must be a string\");d=Sk.ffi.unwrapo(d);var e,f,g=[];for(e=0;e<b.sq$length();e++){if(f=b.mp$subscript(e),!r(f))throw new Sk.builtin.TypeError(\"each point in points must be a 2 element sequence\");g.push([Sk.builtin.asnum$(f.mp$subscript(0)),Sk.builtin.asnum$(f.mp$subscript(1))])}var h=function(){for(a.context.lineWidth=c,a.context.strokeStyle=d,a.context.beginPath(),a.context.moveTo(g[0][0],g[0][1]),e=1;e<g.length;e++)a.context.lineTo(g[e][0],g[e][1]);a.context.stroke()};return a.drawcmds.push(h),Sk.builtin.none.none$}),b.draw_polygon=new Sk.builtin.func(function(a,b,c,d,e){if(Sk.builtin.pyCheckArgs(\"draw_polygon\",arguments,4,5),!Sk.builtin.checkSequence(b))throw new Sk.builtin.TypeError(\"points must be a sequence\");if(!Sk.builtin.checkNumber(c))throw new Sk.builtin.TypeError(\"linewidth must be a number\");if(c=Sk.builtin.asnum$(c),0>=c)throw new Sk.builtin.ValueError(\"linewidth must be a positive number\");if(!Sk.builtin.checkString(d))throw new Sk.builtin.TypeError(\"linecolor must be a string\");if(void 0===e||e===Sk.builtin.none.none$)e=Sk.builtin.none.none$;else if(!Sk.builtin.checkString(e))throw new Sk.builtin.TypeError(\"fillcolor must be a string\");d=Sk.ffi.unwrapo(d);var f,g,h=e===Sk.builtin.none.none$?null:Sk.ffi.unwrapo(e),j=[];for(f=0;f<b.sq$length();f++){if(g=b.mp$subscript(f),!r(g))throw new Sk.builtin.TypeError(\"each point in points must be a 2 element sequence\");j.push([Sk.builtin.asnum$(g.mp$subscript(0)),Sk.builtin.asnum$(g.mp$subscript(1))])}var k=function(){for(a.context.lineWidth=c,a.context.strokeStyle=d,a.context.beginPath(),a.context.moveTo(j[0][0],j[0][1]),f=1;f<j.length;f++)a.context.lineTo(j[f][0],j[f][1]);a.context.lineTo(j[0][0],j[0][1]),a.context.closePath(),null!==h&&(a.context.fillStyle=h,a.context.fill()),a.context.stroke()};return a.drawcmds.push(k),Sk.builtin.none.none$}),b.draw_image=new Sk.builtin.func(function(a,b,c,e,f,g,h){Sk.builtin.pyCheckArgs(\"draw_image\",arguments,6,7);var i=null;if(null!==b&&b.__class__==d.Image)i=b.image;else if(null!==b&&b.__class__==d.Canvas)i=b.canvas;else throw new Sk.builtin.TypeError(\"image must be an image\");if(!r(c))throw new Sk.builtin.TypeError(\"source center must be a 2 element sequence\");if(!r(e))throw new Sk.builtin.TypeError(\"source dimensions must be a 2 element sequence\");if(!r(f))throw new Sk.builtin.TypeError(\"destination center must be a 2 element sequence\");if(!r(g))throw new Sk.builtin.TypeError(\"destination dimensions must be a 2 element sequence\");if(void 0!==h&&!Sk.builtin.checkNumber(h))throw new Sk.builtin.TypeError(\"rotation must be a number\");var j=Sk.builtin.asnum$(c.mp$subscript(0)),k=Sk.builtin.asnum$(c.mp$subscript(1)),l=Sk.builtin.asnum$(e.mp$subscript(0)),m=Sk.builtin.asnum$(e.mp$subscript(1)),n=Sk.builtin.asnum$(f.mp$subscript(0)),o=Sk.builtin.asnum$(f.mp$subscript(1)),p=Sk.builtin.asnum$(g.mp$subscript(0)),s=Sk.builtin.asnum$(g.mp$subscript(1));if(void 0===h&&(h=0),h=Sk.builtin.asnum$(h),0>=l||0>=m||0>=p||0>=s)throw new Sk.builtin.ValueError(\"image dimensions must be > 0\");j=q(j-l/2),k=q(k-m/2);var t=q(-p/2),u=q(-s/2);if(!(0>j||0>k)&&!(j+l>i.width||k+m>i.height)){var v=function(){a.context.save(),a.context.translate(n,o),a.context.rotate(h),a.context.drawImage(i,j,k,l,m,t,u,p,s),a.context.restore()};return a.drawcmds.push(v),Sk.builtin.none.none$}})},\"Canvas\",[]);var t=function(a,b,c,d){var e=a.createElement(\"canvas\");return e.width=b,e.height=c,e.style.border=d.toString()+\"px solid black\",e.style.cssFloat=\"right\",e.setAttribute(\"tabindex\",\"0\"),e.onselectstart=function(){return!1},e};d.create_invisible_canvas=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"create_invis_canvas\",arguments,2,2),!Sk.builtin.checkInt(a))throw new Sk.builtin.TypeError(\"width must be an integer\");if(!Sk.builtin.checkInt(b))throw new Sk.builtin.TypeError(\"height must be an integer\");var c=t(window.document,Sk.builtin.asnum$(a),Sk.builtin.asnum$(b),0),e=Sk.misceval.callsimArray(d.Canvas,[c]);return e});d.Control=Sk.misceval.buildClass(d,function(a,b){b.__init__=new Sk.builtin.func(function(a,b){a._object=b}),b.get_text=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_text\",arguments,1,1),Sk.ffi.basicwrap(a._object.textContent)}),b.set_text=new Sk.builtin.func(function(a,b){Sk.builtin.pyCheckArgs(\"set_text\",arguments,2,2);var c=new Sk.builtin.str(b);a._object.textContent=Sk.ffi.unwrapo(c)})},\"Control\",[]);d.TextAreaControl=Sk.misceval.buildClass(d,function(a,b){b.__init__=new Sk.builtin.func(function(a,b){a._object=b}),b.get_text=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_text\",arguments,1,1),Sk.ffi.basicwrap(a._object.value)}),b.set_text=new Sk.builtin.func(function(a,b){Sk.builtin.pyCheckArgs(\"set_text\",arguments,2,2);var c=new Sk.builtin.str(b);a._object.value=Sk.ffi.unwrapo(c)})},\"TextAreaControl\",[]);var u=function(a,b,c){var d=document.createElement(\"div\");return d.textContent=a,d.style.width=c-12+\"px\",d.style.position=\"absolute\",d.style.bottom=b+\"px\",d.style.border=\"1px solid black\",d.style.paddingLeft=\"5px\",d.style.paddingRight=\"5px\",d},v=function(a,b){for(var c=a,d=0,e=0;c&&\"BODY\"!=c.tagName;)d+=c.offsetTop,e+=c.offsetLeft,c=c.offsetParent;return{x:b.pageX-e,y:b.pageY-d}};d.KEY_MAP=Sk.builtin.dict([]);var w,h,j={};for(w=65;90>=w;w++)h=b(w+32),d.KEY_MAP.mp$ass_subscript(Sk.ffi.basicwrap(h),new Sk.builtin.int_(w)),j[w]=h,h=b(w),d.KEY_MAP.mp$ass_subscript(Sk.ffi.basicwrap(h),new Sk.builtin.int_(w));for(w=48;57>=w;w++)h=b(w),d.KEY_MAP.mp$ass_subscript(Sk.ffi.basicwrap(h),new Sk.builtin.int_(w)),j[w]=h;d.KEY_MAP.mp$ass_subscript(Sk.ffi.basicwrap(\"space\"),new Sk.builtin.int_(32)),j[32]=\"space\",d.KEY_MAP.mp$ass_subscript(Sk.ffi.basicwrap(\"left\"),new Sk.builtin.int_(37)),d.KEY_MAP.mp$ass_subscript(Sk.ffi.basicwrap(\"up\"),new Sk.builtin.int_(38)),d.KEY_MAP.mp$ass_subscript(Sk.ffi.basicwrap(\"right\"),new Sk.builtin.int_(39)),d.KEY_MAP.mp$ass_subscript(Sk.ffi.basicwrap(\"down\"),new Sk.builtin.int_(40)),j[37]=b(8592),j[38]=b(8593),j[39]=b(8594),j[40]=b(8595);d.Frame=Sk.misceval.buildClass(d,function(a,b){var c=function(a){a.animationID&&(cancelAnimationFrame(a.animationID),a.animationID=null)},e=function(a,b){a.pycanvas&&(a.pycanvas.clear(a.background),a.pycanvas.drawall(),b&&a.pycanvas.resetdraw())};b.__init__=new Sk.builtin.func(function(a,b,d,g,h){a.frameID=n(),a.title=b,a.width=Sk.builtin.asnum$(d),a.height=Sk.builtin.asnum$(g),h=void 0===h?200:Sk.builtin.asnum$(h),a.ctrlWidth=h,a.margin=23,a.draw_handler=new Sk.builtin.func(function(){}),a.background=\"#000000\",a.drawactive=!1,a.savedID=null;var k=a.width+a.ctrlWidth+3*a.margin+4,l=a.height+2*a.margin+4,m=b.html$deentify(),q=Sk.csAdapter.createNewFrame(m,k,l,function(){p(a.frameID)});a.gui_index=q.gui_index,a.frame_document=q.frame_document;var r=a.frame_document.getElementsByTagName(\"body\")[0];r.style.margin=\"0px\";var s=a.frame_document.createElement(\"div\");s.id=\"guiframe\",a.frame_document.body.appendChild(s),a.control=a.frame_document.createElement(\"div\"),a.control.style.height=a.height+4+\"px\",a.control.style.width=a.ctrlWidth+\"px\",a.control.style.position=\"relative\",a.control.style.cssFloat=\"left\",a.canvas_border=2,a.canvas=t(a.frame_document,a.width,a.height,a.canvas_border),a.pycanvas=null,a.animationID=null,a.keydown={},a.keyuphandler=null,a.keydownhandler=null;o(a.canvas,\"keydown\",function(b){if(!a.keydown[b.keyCode]&&(a.keydown[b.keyCode]=!0,a.keydownhandler)){var c=j[b.keyCode];void 0===c&&(c=\"<\"+b.keyCode+\">\"),a.keyevents.textContent=\"Key: Down \"+c;var d=[new Sk.builtin.int_(b.keyCode)];Sk.asyncHandler(a.keydownhandler,d,a.keydown_lineno)}});o(a.canvas,\"keyup\",function(b){if(a.keydown[b.keyCode]=!1,a.keyuphandler){var c=j[b.keyCode];void 0===c&&(c=\"<\"+b.keyCode+\">\"),a.keyevents.textContent=\"Key: Up \"+c;var d=[new Sk.builtin.int_(b.keyCode)];Sk.asyncHandler(a.keyuphandler,d,a.keyup_lineno)}}),a.mousedraghandler=null,a.mouseclickhandler=null;var w=function(b){var c=v(a.canvas,b),d=c.x-a.canvas_border,e=c.y-a.canvas_border;if(!(0>d||d>=a.width||0>e||e>=a.height)){var f=new Sk.builtins.tuple([new Sk.builtin.int_(d),new Sk.builtin.int_(e)]);a.mouseevents.textContent=\"Mouse: Move - \"+d+\", \"+e,Sk.asyncHandler(a.mousedraghandler,[f],a.mousedrag_lineno)}},x=function(){a.canvas.removeEventListener(\"mousemove\",w),a.canvas.removeEventListener(\"mouseup\",x),a.canvas.removeEventListener(\"mouseout\",x)};o(a.canvas,\"mousedown\",function(){a.mousedraghandler&&(a.canvas.addEventListener(\"mousemove\",w),a.canvas.addEventListener(\"mouseup\",x),a.canvas.addEventListener(\"mouseout\",x))});o(a.canvas,\"click\",function(b){if(a.mouseclickhandler){var c=v(a.canvas,b),d=c.x-a.canvas_border,e=c.y-a.canvas_border;if(0>d||d>=a.width||0>e||e>=a.height)return;var f=new Sk.builtins.tuple([new Sk.builtin.int_(d),new Sk.builtin.int_(e)]);a.mouseevents.textContent=\"Mouse: Click \"+d+\", \"+e,Sk.asyncHandler(a.mouseclickhandler,[f],a.mouseclick_lineno)}}),s.style.width=a.width+a.ctrlWidth+a.margin+4+\"px\",s.style.height=a.height+4+\"px\",s.style.margin=a.margin+\"px\",s.appendChild(a.control),s.appendChild(a.canvas),a.mouseevents=u(\"Mouse:\",0,a.ctrlWidth),a.control.appendChild(a.mouseevents),a.keyevents=u(\"Key:\",a.mouseevents.offsetHeight+5,a.ctrlWidth),a.control.appendChild(a.keyevents);for(var y=0;y<f.length;y++)if(f[y].id===a.frameID){f[y].frame=a;break}a.pause=function(){this.drawactive&&e(this,!1),c(this)},a.resume=function(){var a,b,c,d=this;null===d.pycanvas||(a=function(){d.drawactive=!0},b=function(a){return null!==d.animationID&&(d.animationID=requestAnimationFrame(c)),d.savedID=null,d.drawactive=!1,a},c=function(){d.savedID=d.animationID,e(d,!0),Sk.asyncHandler(d.draw_handler,[d.pycanvas],d.draw_lineno,a,b,!0)},d.animationID=null===d.savedID?requestAnimationFrame(c):d.savedID,d.canvas.focus())}}),b.get_canvas_textwidth=new Sk.builtin.func(function(a,b,c,d){if(Sk.builtin.pyCheckArgs(\"get_canvas_textwidth\",arguments,3,4),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"text must be a string\");if(!Sk.builtin.checkNumber(c))throw new Sk.builtin.TypeError(\"size must be a number\");if(c=Sk.builtin.asnum$(c),void 0!==d){if(!Sk.builtin.checkString(d))throw new Sk.builtin.TypeError(\"font face must be a string\");if(d=Sk.ffi.unwrapo(d),!0!==m[d])throw new Sk.builtin.ValueError(\"'\"+d+\"' is not a valid font face\")}else d=\"serif\";var e=a.canvas.getContext(\"2d\");b=Sk.ffi.unwrapo(b);try{e.font=c+\"px \"+d}catch(a){if(\"NS_ERROR_FAILURE\"!==a.name)throw a;else return new Sk.builtin.int_(c/2*b.length)}var f=e.measureText(b);return new Sk.builtin.int_(0|f.width)}),b.set_canvas_background=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"set_canvas_background\",arguments,2,2),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"expected string\");return a.background=Sk.ffi.unwrapo(b),Sk.builtin.none.none$}),b.get_canvas_image=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgs(\"get_canvas_image\",arguments,1,1);var b=a.canvas.toDataURL();return window.open(b,\"Canvas Image\",\"left=0,top=0,width=\"+a.canvas.width+\",height=\"+a.canvas.height+\",toolbar=0,resizeable=0\"),Sk.builtin.none.none$}),b.download_canvas_image=new Sk.builtin.func(function(a,b){Sk.builtin.pyCheckArgs(\"download_canvas_image\",arguments,1,2);var c=\"canvas.png\";if(void 0!==b){if(!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"name must be a string\");c=b.$jsstr()}return a.canvas.toBlob(function(a){var b=document.createElement(\"a\");b.download=c,b.href=URL.createObjectURL(a),b.click(),URL.revokeObjectURL(b.href)},\"image/png\"),Sk.builtin.none.none$}),b.start=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgs(\"start\",arguments,1,1);var b=a.canvas.getContext(\"2d\");return b&&b.drawImage?(a.pycanvas=Sk.misceval.callsimArray(d.Canvas,[a.canvas]),a.resume(),a.cleanup=!1,Sk.builtin.none.none$):void alert(\"Cannot draw on canvas!\")}),b.stop=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"stop\",arguments,1,1),a.cleanup||Sk.csAdapter.closeFrame(a.gui_index),c(a),Sk.builtin.none.none$}),b.add_button=new Sk.builtin.func(function(a,b,c,e){if(Sk.builtin.pyCheckArgs(\"add_button\",arguments,3,4),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"text must be a string\");if(!Sk.builtin.checkFunction(c))throw new Sk.builtin.TypeError(\"handler must be a function\");if(void 0!==e){if(!Sk.builtin.checkInt(e))throw new Sk.builtin.TypeError(\"width must be an integer\");e=Sk.builtin.asnum$(e)}var f=Sk.currLineNo,g=document.createElement(\"button\"),h=document.createElement(\"br\");g.type=\"button\",g.className=\"btn btn-default btn-sm\",g.textContent=Sk.ffi.unwrapo(b),void 0!==e&&(g.style.width=e+\"px\",g.style.whiteSpace=\"normal\");return o(g,\"click\",function(){Sk.asyncHandler(c,[],f),a.canvas.focus()}),a.control.appendChild(g),a.control.appendChild(h),Sk.misceval.callsimArray(d.Control,[g])}),b.add_label=new Sk.builtin.func(function(a,b,c){if(Sk.builtin.pyCheckArgs(\"add_label\",arguments,2,3),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"text must be a string\");if(void 0!==c){if(!Sk.builtin.checkInt(c))throw new Sk.builtin.TypeError(\"width must be an integer\");c=Sk.builtin.asnum$(c)}var e=document.createElement(\"span\"),f=document.createElement(\"br\");return e.textContent=Sk.ffi.unwrapo(b),e.style.display=\"inline-block\",void 0!==c&&(e.style.width=c+\"px\"),a.control.appendChild(e),a.control.appendChild(f),Sk.misceval.callsimArray(d.Control,[e])}),b.add_input=new Sk.builtin.func(function(a,b,c,e){if(Sk.builtin.pyCheckArgs(\"add_input\",arguments,4,4),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"text must be a string\");if(!Sk.builtin.checkFunction(c))throw new Sk.builtin.TypeError(\"handler must be a function\");if(!Sk.builtin.checkInt(e))throw new Sk.builtin.TypeError(\"width must be an integer\");e=Sk.builtin.asnum$(e);var f=Sk.currLineNo,g=document.createElement(\"span\"),h=document.createElement(\"textarea\"),i=document.createElement(\"br\"),j=document.createElement(\"br\");g.textContent=Sk.ffi.unwrapo(b),h.rows=1,h.style.resize=\"none\",h.style.width=e+\"px\";return o(h,\"keypress\",function(b){if(13==b.keyCode){b.preventDefault();var d=Sk.ffi.basicwrap(h.value);Sk.asyncHandler(c,[d],f),a.canvas.focus()}}),a.control.appendChild(g),a.control.appendChild(i),a.control.appendChild(h),a.control.appendChild(j),Sk.misceval.callsimArray(d.TextAreaControl,[h])}),b.set_keyup_handler=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"set_keyup_handler\",arguments,2,2),!Sk.builtin.checkFunction(b))throw new Sk.builtin.TypeError(\"handler must be a function\");return a.keyuphandler=b,a.keyup_lineno=Sk.currLineNo,Sk.builtin.none.none$}),b.set_keydown_handler=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"set_keydown_handler\",arguments,2,2),!Sk.builtin.checkFunction(b))throw new Sk.builtin.TypeError(\"handler must be a function\");return a.keydownhandler=b,a.keydown_lineno=Sk.currLineNo,Sk.builtin.none.none$}),b.set_mouseclick_handler=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"set_mouseclick_handler\",arguments,2,2),!Sk.builtin.checkFunction(b))throw new Sk.builtin.TypeError(\"handler must be a function\");return a.mouseclickhandler=b,a.mouseclick_lineno=Sk.currLineNo,Sk.builtin.none.none$}),b.set_mousedrag_handler=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"set_mousedrag_handler\",arguments,2,2),!Sk.builtin.checkFunction(b))throw new Sk.builtin.TypeError(\"handler must be a function\");return a.mousedraghandler=b,a.mousedrag_lineno=Sk.currLineNo,Sk.builtin.none.none$}),b.set_draw_handler=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"set_draw_handler\",arguments,2,2),!Sk.builtin.checkFunction(b))throw new Sk.builtin.TypeError(\"handler must be a function\");return a.draw_handler=b,a.draw_lineno=Sk.currLineNo,Sk.builtin.none.none$})},\"Frame\",[]),d.create_frame=new Sk.builtin.func(function(a,b,c,e){if(Sk.builtin.pyCheckArgs(\"create_frame\",arguments,3,4),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"title must be a string\");if(!Sk.builtin.checkNumber(b))throw new Sk.builtin.TypeError(\"canvas width must be a number\");if(!Sk.builtin.checkNumber(c))throw new Sk.builtin.TypeError(\"canvas height must be a number\");if(void 0!==e){if(!Sk.builtin.checkNumber(e))throw new Sk.builtin.TypeError(\"control width must be a number\");if(0>Sk.builtin.asnum$(e))throw new Sk.builtin.ValueError(\"control width must be >= 0\")}if(0>Sk.builtin.asnum$(b))throw new Sk.builtin.ValueError(\"canvas width must be >= 0\");if(0>Sk.builtin.asnum$(c))throw new Sk.builtin.ValueError(\"canvas height must be >= 0\");return Sk.misceval.callsimArray(d.Frame,[a,b,c,e])});return d.Timer=Sk.misceval.buildClass(d,function(a,b){b.__init__=new Sk.builtin.func(function(a,b,c){a.interval=b,a.handler=c,a._timer=null,a.lineno=Sk.currLineNo,a.doResume=!1,e.push(a)}),b.start=new Sk.builtin.func(function(a){if(Sk.builtin.pyCheckArgs(\"start\",arguments,1,1),!a._timer)return a._timer=setInterval(function(){Sk.asyncHandler(a.handler,[],a.lineno)},Sk.builtin.asnum$(a.interval)),Sk.builtin.none.none$}),b.stop=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"stop\",arguments,1,1),a._timer&&(clearInterval(a._timer),a._timer=null),Sk.builtin.none.none$}),b.get_interval=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_interval\",arguments,1,1),a.interval}),b.is_running=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"is_running\",arguments,1,1),a._timer?Sk.builtin.bool.true$:Sk.builtin.bool.false$})},\"Timer\",[]),d.create_timer=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"create_timer\",arguments,2,2),!Sk.builtin.checkNumber(a))throw new Sk.builtin.TypeError(\"interval must be a number\");if(!Sk.builtin.checkFunction(b))throw new Sk.builtin.TypeError(\"handler must be a function\");if(0>=Sk.builtin.asnum$(a))throw new Sk.builtin.ValueError(\"interval must be > 0\");return Sk.misceval.callsimArray(d.Timer,[a,b])}),d};","src/lib/simplemap.js":"var $builtinmodule=function(){var a={};Sk.maps={};var b=[],c=0,d=[],e=[],f=!1,g=null,j=function(){return b.push({id:c,frame:{}}),c++},k=function(a,b,c){a.addEventListener(b,c),d.push({element:a,eventType:b,handler:c})},l=function(a,b,c,d){var f=a.event.addListener(b,c,d);e.push({element:b,eventType:c,handler:d,listenerID:f,gmap:a})},m=function(a){for(var c,d=0;d<b.length;d++)if(c=b[d],c.id===a){b.splice(d,1);break}};Sk.maps.cleanup=function(a){if(void 0!==a)return void m(a);for(var c,d=0;d<b.length;d++)c=b[d],Sk.csAdapter.closeFrame(c.frame.gui_index);b=[]},Sk.maps.isRunning=function(){return 0<b.length},Sk.maps.pause=function(){var a;for(i=0;i<d.length;i++)a=d[i],a.element.removeEventListener(a.eventType,a.handler);for(i=0;i<e.length;i++)a=e[i],a.gmap.event.removeListener(a.listenerID);f=!0},Sk.maps.resume=function(){if(f){for(i=0;i<d.length;i++)h=d[i],h.element.addEventListener(h.eventType,h.handler);for(i=0;i<e.length;i++){h=e[i];var a=h.gmap.event.addListener(h.element,h.eventType,h.handler);h.listenerID=a}f=!1}};a.Rice=new Sk.builtin.tuple([new Sk.builtin.float_(29.716467),new Sk.builtin.float_(-95.404213)]);a.Map=Sk.misceval.buildClass(a,function(c,d){d.__init__=new Sk.builtin.func(function(a,c,d,e,f,g){a.frameID=j(),a.title=c,a.latitude=Sk.builtin.asnum$(d.v[0]),a.longitude=Sk.builtin.asnum$(d.v[1]),a.width=Sk.builtin.asnum$(e),a.height=Sk.builtin.asnum$(f),a.ctrlWidth=0,a.ctrlMargin=0,void 0!==g&&(a.ctrlWidth=Sk.builtin.asnum$(g),a.ctrlMargin=10),a.margin=23;var k=a.width+2*a.margin+a.ctrlWidth+2*a.ctrlMargin+20,l=a.height+2*a.margin,n=c.html$deentify(),o=new Promise(function(b){var c=Sk.csAdapter.createNewFrame(n,k,l,function(){m(a.frameID)},{google_maps:!0,onload:function(){var d=a.frame_document.getElementsByTagName(\"body\")[0];d.style.margin=\"0px\",0<a.ctrlWidth&&(a.control=a.frame_document.createElement(\"div\"),a.control.style.height=a.height+\"px\",a.control.style.width=a.ctrlWidth+\"px\",a.control.style.position=\"relative\",a.control.style.cssFloat=\"left\",a.control.style.margin=a.ctrlMargin+\"px\",d.appendChild(a.control)),a.mapdiv=a.frame_document.createElement(\"div\"),a.mapdiv.style.height=a.height+\"px\",a.mapdiv.style.width=a.width+\"px\",a.mapdiv.style.position=\"relative\",a.mapdiv.style.cssFloat=\"right\",a.mapdiv.style.margin=a.margin+\"px\",d.appendChild(a.mapdiv),a.gmap=c.frame_window.google.maps;var e={zoom:15,center:new a.gmap.LatLng(a.latitude,a.longitude),mapTypeId:a.gmap.MapTypeId.ROADMAP,disableDefaultUI:!0,zoomControl:!0};a.map=new a.gmap.Map(a.mapdiv,e),b()}});a.gui_index=c.gui_index,a.frame_document=c.frame_document});a.all_markers=new Sk.builtin.set,a.all_lines=new Sk.builtin.set;for(var p=0;p<b.length;p++)if(b[p].id===a.frameID){b[p].frame=a;break}return Sk.misceval.promiseToSuspension(o)}),d.add_button=new Sk.builtin.func(function(a,b,c,d){if(Sk.builtin.pyCheckArgs(\"add_button\",arguments,3,4),void 0===a.control)throw new Sk.builtin.AssertionError(\"map has no control frame\");if(!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"text must be a string\");if(!Sk.builtin.checkFunction(c))throw new Sk.builtin.TypeError(\"handler must be a function\");if(void 0!==d&&!Sk.builtin.checkNumber(d))throw new Sk.builtin.TypeError(\"width must be a number\");var e=a.frame_document.createElement(\"button\"),f=Sk.currLineNo;e.type=\"button\",e.textContent=b.v,void 0!==d&&(e.style.width=Sk.builtin.asnum$(d)+\"px\");k(e,\"click\",function(){Sk.asyncHandler(c,[],f)}),a.control.appendChild(e)}),d.add_break=new Sk.builtin.func(function(a){if(Sk.builtin.pyCheckArgs(\"add_break\",arguments,1,1),void 0===a.control)throw new Sk.builtin.AssertionError(\"map has no control frame\");var b=a.frame_document.createElement(\"br\");a.control.appendChild(b)}),d.add_marker=new Sk.builtin.func(function(b,c,d,e,f,g){if(Sk.builtin.pyCheckArgs(\"add_marker\",arguments,6,6),!Sk.builtin.checkString(c))throw new Sk.builtin.TypeError(\"description must be a string\");if(!Sk.builtin.checkString(d))throw new Sk.builtin.TypeError(\"id must be a string\");if(!Sk.builtin.checkString(e))throw new Sk.builtin.TypeError(\"icon_url must be a string\");if(!(f instanceof Sk.builtin.tuple)||2!==f.v.length||!Sk.builtin.checkNumber(f.v[0])||!Sk.builtin.checkNumber(f.v[1]))throw new Sk.builtin.TypeError(\"coordinates must be given as a tuple of two numbers\");if(!Sk.builtin.checkFunction(g))throw new Sk.builtin.TypeError(\"handler must be a function\");return this_marker=Sk.misceval.callsimArray(a.Marker,[b,c,d,e,f,g]),Sk.builtin.set.prototype.add.func_code(b.all_markers,this_marker),this_marker}),d.draw_line=new Sk.builtin.func(function(b,c,d,e){if(Sk.builtin.pyCheckArgs(\"draw_line\",arguments,3,4),!(c instanceof a.Marker))throw new Sk.builtin.TypeError(\"expected Marker object for start argument, got \"+Sk.abstr.typeName(c));if(!(d instanceof a.Marker))throw new Sk.builtin.TypeError(\"expected Marker object for stop argument, got \"+Sk.abstr.typeName(d));return void 0===e&&(e=Sk.builtin.none.none$),this_line=Sk.misceval.callsimArray(a.Line,[b,c,d,e]),Sk.builtin.set.prototype.add.func_code(b.all_lines,this_line),this_line}),d.get_markers=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_markers\",arguments,1,1),a.all_markers}),d.get_lines=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_lines\",arguments,1,1),a.all_lines}),d.clear_markers=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgs(\"clear_markers\",arguments,1,1);for(var b=a.all_markers.tp$iter(),c=b.tp$iternext();void 0!==c;c=b.tp$iternext())c.__proto__.remove.func_code(c)}),d.clear_lines=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgs(\"clear_lines\",arguments,1,1);for(var b=a.all_lines.tp$iter(),c=b.tp$iternext();void 0!==c;c=b.tp$iternext())c.__proto__.remove.func_code(c)}),d.clear=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgs(\"clear\",arguments,1,1),d.clear_markers.func_code(a),d.clear_lines.func_code(a)}),d.__str__=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"__str__\",arguments,1,1),new Sk.builtin.str(\"<Map object: \"+a.title.v+\", (\"+a.latitude+\", \"+a.longitude+\")>\")})},\"Map\",[]),a.create_map=new Sk.builtin.func(function(b,c,d,e,f){if(Sk.builtin.pyCheckArgs(\"create_map\",arguments,4,5),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"title must be a string\");if(!Sk.builtin.checkInt(d))throw new Sk.builtin.TypeError(\"map width must be an integer\");if(!Sk.builtin.checkInt(e))throw new Sk.builtin.TypeError(\"map height must be an integer\");if(void 0!==f&&!Sk.builtin.checkInt(f))throw new Sk.builtin.TypeError(\"control width must be an integer\");if(0>=Sk.builtin.asnum$(d))throw new Sk.builtin.ValueError(\"map width must be > 0\");if(0>=Sk.builtin.asnum$(e))throw new Sk.builtin.ValueError(\"map height must be > 0\");if(0>=Sk.builtin.asnum$(f))throw new Sk.builtin.ValueError(\"control width must be > 0\");if(!(c instanceof Sk.builtin.tuple)||2!==c.v.length||!Sk.builtin.checkNumber(c.v[0])||!Sk.builtin.checkNumber(c.v[1]))throw new Sk.builtin.TypeError(\"coordinates must be given as a tuple of two numbers\");return Sk.misceval.callsimOrSuspendArray(a.Map,[b,c,d,e,f])});a.Marker=Sk.misceval.buildClass(a,function(a,b){b.__init__=new Sk.builtin.func(function(a,b,c,d,e,f,g){a.mapObj=b,a.description=c,a.loc_id=d,a.coordinates=f,a.handler=g,a.handler_lineno=Sk.currLineNo;var j=Sk.builtin.asnum$(f.v[0]),k=Sk.builtin.asnum$(f.v[1]);a.goog_marker=new a.mapObj.gmap.Marker({map:a.mapObj.map,position:new a.mapObj.gmap.LatLng(j,k),title:Sk.ffi.unwrapo(c),icon:e.v});l(a.mapObj.gmap,a.goog_marker,\"click\",function(){Sk.asyncHandler(g,[a],a.handler_lineno)})}),b.remove=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgs(\"remove\",arguments,1,1),a.goog_marker.setMap(null),Sk.builtin.set.prototype.discard.func_code(a.mapObj.all_markers,a)}),b.get_coordinates=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_coordinates\",arguments,1,1),a.coordinates}),b.get_description=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_description\",arguments,1,1),a.description}),b.get_id=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_id\",arguments,1,1),a.loc_id}),b.get_icon=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_icon\",arguments,1,1),new Sk.builtin.str(a.goog_marker.icon)}),b.set_icon=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"set_icon\",arguments,2,2),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"icon_url must be a string\");a.goog_marker.setIcon(b.v)}),b.__str__=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"__str__\",arguments,1,1),new Sk.builtin.str(\"<Marker object: \"+a.loc_id.v+\", \\\"\"+a.description.v+\"\\\">\")})},\"Marker\",[]);return a.Line=Sk.misceval.buildClass(a,function(a,b){b.__init__=new Sk.builtin.func(function(a,b,c,d,e){var f,j,k,l,m;if(e!==Sk.builtin.none.none$&&!Sk.builtin.checkSequence(e))throw new Sk.builtin.TypeError(\"path must be a sequence of two element sequences\");a.mapObj=b,a.start=c,a.stop=d;var n=c.goog_marker.getPosition(),o=d.goog_marker.getPosition();if(a.path=new a.mapObj.gmap.MVCArray,e===Sk.builtin.none.none$)a.path.push(n),g||(g=new a.mapObj.gmap.DirectionsService),g.route({origin:n,destination:o,travelMode:a.mapObj.gmap.DirectionsTravelMode.DRIVING},function(b,c){if(c===a.mapObj.gmap.DirectionsStatus.OK){for(var d=0,e=b.routes[0].overview_path.length;d<e;d++)a.path.push(b.routes[0].overview_path[d]);a.path.removeAt(0)}else a.path.push(o)});else for(f=e.tp$iter(),j=f.tp$iternext();void 0!==j;j=f.tp$iternext()){if(!Sk.builtin.checkSequence(j)||2!=j.sq$length())throw new Sk.builtin.TypeError(\"path must be a sequence of two element sequences\");if(k=j.mp$subscript(0),l=j.mp$subscript(1),!Sk.builtin.checkNumber(k)||!Sk.builtin.checkNumber(l))throw new Sk.builtin.TypeError(\"each point in path must be two numbers\");k=Sk.builtin.asnum$(k),l=Sk.builtin.asnum$(l),m=new a.mapObj.gmap.LatLng(k,l),a.path.push(m)}a.polyline=new a.mapObj.gmap.Polyline({map:a.mapObj.map,path:a.path,strokeWeight:2})}),b.set_color=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"set_color\",arguments,2,2),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"expected a String for hex_code argument, got \"+Sk.abstr.typeName(b));a.polyline.setOptions({strokeColor:b.v})}),b.remove=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgs(\"remove\",arguments,1,1),a.polyline.setMap(null),Sk.builtin.set.prototype.discard.func_code(a.mapObj.all_lines,a)}),b.get_start=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_start\",arguments,1,1),a.start}),b.get_stop=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"get_stop\",arguments,1,1),a.stop}),b.__str__=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgs(\"__str__\",arguments,1,1),new Sk.builtin.str(\"<Line object: (\"+a.start.loc_id.v+\", \"+a.stop.loc_id.v+\")>\")})},\"Line\",[]),a};","src/lib/simpleplot.js":"var $builtinmodule=function(){var a={};Sk.simpleplot={};var b=[],c=0,d=function(){return b.push({id:c,plot:{}}),c++},e=function(a){for(var c,d=0;d<b.length;d++)if(c=b[d],c.id===a){b.splice(d,1);break}};Sk.simpleplot.cleanup=function(a){if(void 0!==a)return void e(a);for(var c,d=0;d<b.length;d++)c=b[d],Sk.csAdapter.closeFrame(c.plot.gui_index);b=[]},Sk.simpleplot.isRunning=function(){return 0<b.length},Sk.simpleplot.pause=function(){},Sk.simpleplot.resume=function(){};var f=0,g=function(a,c,g){var h=d(),j={};j.title=a,j.width=c,j.height=g,j.margin=23,j.extraheight=5;var k=j.width+2*j.margin,l=j.height+2*j.margin+j.extraheight,m=\"plot_\"+f++,n=a.html$deentify(),o=Sk.csAdapter.createNewFrame(n,k,l,function(){e(h)});j.gui_index=o.gui_index,j.plot_document=o.frame_document;var p=j.plot_document.getElementsByTagName(\"body\")[0];p.style.margin=\"0px\",j.plotdiv=\"plotdiv\",j.plotarea=j.plot_document.createElement(\"div\"),j.plotarea.id=j.plotdiv,j.plotarea.style.width=c+\"px\",j.plotarea.style.height=g+\"px\",j.plotarea.style.marginLeft=j.margin+\"px\",j.plotarea.style.marginRight=j.margin+\"px\",j.plotarea.style.marginBottom=j.margin+\"px\",j.plotarea.style.marginTop=j.margin+\"px\",j.plot_document.body.appendChild(j.plotarea),j.canvas=j.plot_document.createElement(\"canvas\"),j.canvas.width=c,j.canvas.height=g,j.canvas.style.border=\"0px\",j.plotarea.appendChild(j.canvas);for(var q=0;q<b.length;q++)if(b[q].id==h){b[h].plot=j;break}return j},h=function(a){return!!(Sk.builtin.checkSequence(a)&&2==a.sq$length())&&!!(Sk.builtin.checkNumber(a.mp$subscript(0))&&Sk.builtin.checkNumber(a.mp$subscript(1)))};Chart.defaults.global.defaultFontColor=\"rgba(0,0,0,1)\";var i=function(a){var b,c,d,e,f,g,h;for(g=function(a,b){return void 0===a.min?(a.min=b.x,a.max=b.x,a):(a.min>b.x&&(a.min=b.x),a.max<b.x&&(a.max=b.x),a)},h={},h=a[0].data.reduce(g,h),b=1;b<a.length;b++)h=a[b].data.reduce(g,h);for(d=h.min,e=h.max,f=[],b=d;b<=e;b++)f[b-d]=b;for(b=0;b<a.length;b++){var k=[];for(c=0;c<a[b].data.length;c++)k[a[b].data[c].x-d]=a[b].data[c].y;a[b].data=k}return{labels:f,data:a}},l=function(c,d){var a=c[0],e=c[1],f=c[2];return\"rgba(\"+a+\",\"+e+\",\"+f+\",\"+d+\")\"},m=[[237,194,64],[175,216,248],[203,75,75],[77,167,77],[148,64,237]],n=function(a){var b,d,e,f=[],g=0,h=m.length;for(d=0;d<a;d++){for(b=m[d%h],0==d%h&&d&&(0<g?.5>g?g=-g-.2:g=0:g=-g),e=0;3>e;e++)b[e]*=1+g,b[e]=0>b[e]?0:b[e],b[e]=255<b[e]?255:b[e];f.push(b)}return f},o=function(a,b,c,e,f,m,o,p,q,r){var s,t,u,w,x,y,z,A,B,C=[],d=n(m.sq$length());for(s=0;s<m.sq$length();s++){if(u=m.mp$subscript(s),Sk.builtin.checkSequence(u))A=!0;else if(Sk.builtin.checkDict(u))A=!1;else throw new Sk.builtin.TypeError(\"data must be a sequence of sequences of sequences or a sequence of dictionaries\");if(x=[],A){if(1>u.sq$length())throw new Sk.builtin.TypeError(\"data must be a sequence of sequences of sequences or a sequence of dictionaries\");for(t=0;t<u.sq$length();t++){if(w=u.mp$subscript(t),!h(w))throw new Sk.builtin.TypeError(\"data must be a sequence of sequences of sequences or a sequence of dictionaries\");if(\"bars\"==r&&!Sk.builtin.checkInt(w.mp$subscript(0)))throw new Sk.builtin.ValueError(\"all x values must be integers in a bar chart\");x.push({x:Sk.builtin.asnum$(w.mp$subscript(0)),y:Sk.builtin.asnum$(w.mp$subscript(1))})}}else{var D,E,F;if(1>u.mp$length())throw new Sk.builtin.TypeError(\"data must be a sequence of sequences of sequences or a sequence of dictionaries\");for(D=u.tp$iter(),E=D.tp$iternext();void 0!==E;E=D.tp$iternext()){var F=u.mp$subscript(E);if(\"bars\"==r&&!Sk.builtin.checkInt(E))throw new Sk.builtin.ValueError(\"all x values must be integers in a bar chart\");x.push({x:Sk.builtin.asnum$(E),y:Sk.builtin.asnum$(F)})}x.sort(function(c,a){return c.x-a.x})}z={data:x};var G=d[s%d.length];\"bars\"==r?(z.backgroundColor=l(G,.5),z.borderColor=l(G,1),z.borderWidth=2):(\"scatter\"==r?z.pointRadius=3:(z.lineTension=0,z.pointRadius=o?3:0),z.pointStyle=\"circle\",z.pointBackgroundColor=\"rgba(255,255,255,1)\",z.pointBorderWidth=2,z.fill=!1,z.borderColor=l(G,.8)),void 0!==q&&(y=new Sk.builtin.str(q.mp$subscript(s)),z.label=Sk.ffi.unwrapo(y)),C.push(z)}var H,I=g(a,b,c),J={},K={display:!0,color:\"rgba(0,0,0,1)\",zeroLineColor:\"rgba(0,0,0,1)\",zeroLineWidth:2,tickMarkLength:0};if(\"bars\"==r){H=\"bar\",J.scales={xAxes:[{ticks:{padding:5},scaleLabel:{display:!0,labelString:Sk.ffi.unwrapo(e)},gridLines:K}],yAxes:[{type:\"linear\",ticks:{beginAtZero:!0,padding:5},scaleLabel:{display:!0,labelString:Sk.ffi.unwrapo(f)},gridLines:K}]};var m=i(C);B={labels:m.labels,datasets:m.data}}else H=\"line\",J.showLines=\"scatter\"!=r,J.scales={xAxes:[{type:\"linear\",position:\"bottom\",ticks:{padding:5},scaleLabel:{display:!0,labelString:Sk.ffi.unwrapo(e)},gridLines:K}],yAxes:[{type:\"linear\",ticks:{beginAtZero:!0,padding:5},scaleLabel:{display:!0,labelString:Sk.ffi.unwrapo(f)},gridLines:K}]},B={datasets:C};return J.legend=void 0===q?{display:!1}:{display:!0,labels:{boxWidth:10,padding:5}},J.title={display:!0,position:\"top\",text:Sk.ffi.unwrapo(a)},setTimeout(function(){I.chart=new Chart(I.canvas,{type:H,data:B,options:J})},0),Sk.builtin.none.none$};return a.plot_lines=new Sk.builtin.func(function(a,b,c,d,e,f,g,h){if(Sk.builtin.pyCheckArgs(\"plot_lines\",arguments,6,8),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"title must be a string\");if(!Sk.builtin.checkInt(b))throw new Sk.builtin.TypeError(\"plot width must be an integer\");if(b=Sk.builtin.asnum$(b),!Sk.builtin.checkInt(c))throw new Sk.builtin.TypeError(\"plot height must be an integer\");if(c=Sk.builtin.asnum$(c),!Sk.builtin.checkString(d))throw new Sk.builtin.TypeError(\"xlabel must be a string\");if(!Sk.builtin.checkString(e))throw new Sk.builtin.TypeError(\"ylabel must be a string\");if(!Sk.builtin.checkSequence(f))throw new Sk.builtin.TypeError(\"data must be a sequence of sequences of sequences or a sequence of dictionaries\");else if(1>f.sq$length())throw new Sk.builtin.TypeError(\"data must be a sequence of sequences of sequences or a sequence of dictionaries\");if(void 0!==g){if(!Sk.builtin.checkBool(g))throw new Sk.builtin.TypeError(\"points must be a boolean\");g=g.v}else g=!1;if(void 0!==h&&!Sk.builtin.checkSequence(h))throw new Sk.builtin.TypeError(\"labels must be a sequence\");if(0>=b)throw new Sk.builtin.ValueError(\"plot width must be > 0\");if(0>=c)throw new Sk.builtin.ValueError(\"plot height must be > 0\");return o(a,b,c,d,e,f,g,!1,h,\"lines\")}),a.plot_scatter=new Sk.builtin.func(function(a,b,c,d,e,f,g){if(Sk.builtin.pyCheckArgs(\"plot_scatter\",arguments,6,7),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"title must be a string\");if(!Sk.builtin.checkInt(b))throw new Sk.builtin.TypeError(\"plot width must be an integer\");if(b=Sk.builtin.asnum$(b),!Sk.builtin.checkInt(c))throw new Sk.builtin.TypeError(\"plot height must be an integer\");if(c=Sk.builtin.asnum$(c),!Sk.builtin.checkString(d))throw new Sk.builtin.TypeError(\"xlabel must be a string\");if(!Sk.builtin.checkString(e))throw new Sk.builtin.TypeError(\"ylabel must be a string\");if(!Sk.builtin.checkSequence(f))throw new Sk.builtin.TypeError(\"data must be a sequence of sequences of sequences or a sequence of dictionaries\");else if(1>f.sq$length())throw new Sk.builtin.TypeError(\"data must be a sequence of sequences of sequences or a sequence of dictionaries\");if(void 0!==g&&!Sk.builtin.checkSequence(g))throw new Sk.builtin.TypeError(\"labels must be a sequence\");if(0>=b)throw new Sk.builtin.ValueError(\"plot width must be > 0\");if(0>=c)throw new Sk.builtin.ValueError(\"plot height must be > 0\");return o(a,b,c,d,e,f,!0,!1,g,\"scatter\")}),a.plot_bars=new Sk.builtin.func(function(a,b,c,d,e,f,g){if(Sk.builtin.pyCheckArgs(\"plot_bars\",arguments,6,7),!Sk.builtin.checkString(a))throw new Sk.builtin.TypeError(\"title must be a string\");if(!Sk.builtin.checkInt(b))throw new Sk.builtin.TypeError(\"plot width must be an integer\");if(b=Sk.builtin.asnum$(b),!Sk.builtin.checkInt(c))throw new Sk.builtin.TypeError(\"plot height must be an integer\");if(c=Sk.builtin.asnum$(c),!Sk.builtin.checkString(d))throw new Sk.builtin.TypeError(\"xlabel must be a string\");if(!Sk.builtin.checkString(e))throw new Sk.builtin.TypeError(\"ylabel must be a string\");if(!Sk.builtin.checkSequence(f))throw new Sk.builtin.TypeError(\"data must be a sequence of sequences of sequences or a sequence of dictionaries\");else if(1>f.sq$length())throw new Sk.builtin.TypeError(\"data must be a sequence of sequences of sequences or a sequence of dictionaries\");if(void 0!==g&&!Sk.builtin.checkSequence(g))throw new Sk.builtin.TypeError(\"labels must be a sequence\");if(0>=b)throw new Sk.builtin.ValueError(\"plot width must be > 0\");if(0>=c)throw new Sk.builtin.ValueError(\"plot height must be > 0\");return o(a,b,c,d,e,f,!1,!0,g,\"bars\")}),a};","src/lib/site.py":"raise NotImplementedError(\"site is not yet implemented in Skulpt\")\n","src/lib/smtpd.py":"raise NotImplementedError(\"smtpd is not yet implemented in Skulpt\")\n","src/lib/smtplib.py":"raise NotImplementedError(\"smtplib is not yet implemented in Skulpt\")\n","src/lib/sndhdr.py":"raise NotImplementedError(\"sndhdr is not yet implemented in Skulpt\")\n","src/lib/socket.py":"raise NotImplementedError(\"socket is not yet implemented in Skulpt\")\n","src/lib/sqlite3/__init__.py":"raise NotImplementedError(\"sqlite3 is not yet implemented in Skulpt\")\n","src/lib/sre.py":"raise NotImplementedError(\"sre is not yet implemented in Skulpt\")\n","src/lib/sre_compile.py":"raise NotImplementedError(\"sre_compile is not yet implemented in Skulpt\")\n","src/lib/sre_constants.py":"raise NotImplementedError(\"sre_constants is not yet implemented in Skulpt\")\n","src/lib/sre_parse.py":"raise NotImplementedError(\"sre_parse is not yet implemented in Skulpt\")\n","src/lib/ssl.py":"raise NotImplementedError(\"ssl is not yet implemented in Skulpt\")\n","src/lib/stat.py":"raise NotImplementedError(\"stat is not yet implemented in Skulpt\")\n","src/lib/statvfs.py":"raise NotImplementedError(\"statvfs is not yet implemented in Skulpt\")\n","src/lib/string.js":"var $builtinmodule=function(){var a={};return a.ascii_lowercase=Sk.builtin.str(\"abcdefghijklmnopqrstuvwxyz\"),a.ascii_uppercase=Sk.builtin.str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"),a.ascii_letters=Sk.builtin.str(a.ascii_lowercase.v+a.ascii_uppercase.v),a.lowercase=Sk.builtin.str(\"abcdefghijklmnopqrstuvwxyz\"),a.uppercase=Sk.builtin.str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"),a.letters=Sk.builtin.str(a.lowercase.v+a.uppercase.v),a.digits=Sk.builtin.str(\"0123456789\"),a.hexdigits=Sk.builtin.str(\"0123456789abcdefABCDEF\"),a.octdigits=Sk.builtin.str(\"01234567\"),a.punctuation=Sk.builtin.str(\"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\"),a.whitespace=Sk.builtin.str(\"\\t\\n\\x0B\\f\\r \"),a.printable=Sk.builtin.str(a.digits.v+a.letters.v+a.punctuation.v+\" \\t\\n\\r\\x0B\\f\"),a.split=new Sk.builtin.func(function(a,b,c){return Sk.misceval.callsimArray(Sk.builtin.str.prototype.split,[a,b,c])}),a.capitalize=new Sk.builtin.func(function(a){return Sk.misceval.callsimArray(Sk.builtin.str.prototype.capitalize,[a])}),a.join=new Sk.builtin.func(function(a,b){return void 0===b&&(b=Sk.builtin.str(\" \")),Sk.misceval.callsimArray(Sk.builtin.str.prototype.join,[b,a])}),a.capwords=new Sk.builtin.func(function(b,c){if(Sk.builtin.pyCheckArgsLen(\"capwords\",arguments.length,1,2),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"s must be a string\");if(void 0===c&&(c=Sk.builtin.str(\" \")),!Sk.builtin.checkString(c))throw new Sk.builtin.TypeError(\"sep must be a string\");for(var d=Sk.misceval.callsimArray(a.split,[b,c]),e=[],f=0;f<d.v.length;f++){var g=Sk.builtin.list.prototype.list_subscript_.call(d,f),h=Sk.misceval.callsimArray(a.capitalize,[g]);e.push(h)}return Sk.misceval.callsimArray(a.join,[new Sk.builtin.list(e),c])}),a};","src/lib/stringold.py":"raise NotImplementedError(\"stringold is not yet implemented in Skulpt\")\n","src/lib/stringprep.py":"raise NotImplementedError(\"stringprep is not yet implemented in Skulpt\")\n","src/lib/struct.py":"raise NotImplementedError(\"struct is not yet implemented in Skulpt\")\n","src/lib/subprocess.py":"raise NotImplementedError(\"subprocess is not yet implemented in Skulpt\")\n","src/lib/sunau.py":"raise NotImplementedError(\"sunau is not yet implemented in Skulpt\")\n","src/lib/sunaudio.py":"raise NotImplementedError(\"sunaudio is not yet implemented in Skulpt\")\n","src/lib/symbol.py":"raise NotImplementedError(\"symbol is not yet implemented in Skulpt\")\n","src/lib/symtable.py":"raise NotImplementedError(\"symtable is not yet implemented in Skulpt\")\n","src/lib/tabnanny.py":"raise NotImplementedError(\"tabnanny is not yet implemented in Skulpt\")\n","src/lib/tarfile.py":"raise NotImplementedError(\"tarfile is not yet implemented in Skulpt\")\n","src/lib/telnetlib.py":"raise NotImplementedError(\"telnetlib is not yet implemented in Skulpt\")\n","src/lib/tempfile.py":"raise NotImplementedError(\"tempfile is not yet implemented in Skulpt\")\n","src/lib/test/__init__.py":"__author__ = 'bmiller'\n\ndef testEqual(actual, expected):\n    if type(expected) == type(1):\n        if actual == expected:\n            print('Pass')\n            return True\n    elif type(expected) == type(1.11):\n        if abs(actual-expected) < 0.00001:\n            print('Pass')\n            return True\n    else:\n        if actual == expected:\n            print('Pass')\n            return True\n    print('Test Failed: expected ' + str(expected) + ' but got ' + str(actual))\n    return False\n\ndef testNotEqual(actual, expected):\n    pass\n\n","src/lib/test/decimaltestdata/__init__.py":"raise NotImplementedError(\"decimaltestdata is not yet implemented in Skulpt\")\n","src/lib/test/test_support.py":"\"\"\"Supporting definitions for the Python regression tests.\"\"\"\n\nif __name__ != 'test.test_support':\n    raise ImportError('test_support must be imported from the test package')\n\nimport unittest\n\n\n# def run_unittest(*classes):\n#     \"\"\"Run tests from unittest.TestCase-derived classes.\"\"\"\n#     valid_types = (unittest.TestSuite, unittest.TestCase)\n#     suite = unittest.TestSuite()\n#     for cls in classes:\n#         if isinstance(cls, str):\n#             if cls in sys.modules:\n#                 suite.addTest(unittest.findTestCases(sys.modules[cls]))\n#             else:\n#                 raise ValueError(\"str arguments must be keys in sys.modules\")\n#         elif isinstance(cls, valid_types):\n#             suite.addTest(cls)\n#         else:\n#             suite.addTest(unittest.makeSuite(cls))\n#     _run_suite(suite)\n\ndef run_unittest(*classes):\n    \"\"\"Run tests from unittest.TestCase-derived classes.\"\"\"\n    for cls in classes:\n        print cls\n        if issubclass(cls, unittest.TestCase):\n            cls().main()\n        else:\n            print \"Don't know what to do with \", cls\n","src/lib/textwrap.py":"raise NotImplementedError(\"textwrap is not yet implemented in Skulpt\")\n","src/lib/this.py":"raise NotImplementedError(\"this is not yet implemented in Skulpt\")\n","src/lib/threading.py":"raise NotImplementedError(\"threading is not yet implemented in Skulpt\")\n","src/lib/time.js":"var $builtinmodule=function(){function a(a){if(!(a instanceof m))throw new Sk.builtin.TypeError(\"Required argument 'struct_time' must be of type: 'struct_time'\");var b,c=a.v.length,d=a.v;for(b=0;b<c;++b)if(!Sk.builtin.checkInt(d[b]))throw new Sk.builtin.TypeError(\"struct_time may only contain integers\");return!0}function b(a,b,d){var c=a.toString();return Array(b-c.length+1).join(d||\" \")+c}function c(a){return 0==(3&a)&&(0!=a%100||0==a%400)}function d(a,b){b=b||!1;var d=b?a.getUTCMonth():a.getMonth(),e=b?a.getUTCDate():a.getDate(),f=[0,31,59,90,120,151,181,212,243,273,304,334][d]+e;return 1<d&&c(b?a.getUTCFullYear():a.getFullYear())&&f++,f}function e(){var a=Math.max,b=new Date(2002,0,1),c=new Date(2002,6,1);return a(b.getTimezoneOffset(),c.getTimezoneOffset())}function f(a){return a.getTimezoneOffset()<e()}function g(a){var b,c=/\\((.*)\\)/.exec(a.toString());if(null!=this.navigator&&(b=this.navigator.userLanguage||this.navigator.language),c&&1<c.length)return c[1];if(void 0===b)return null;try{var d=a.toLocaleString(b,{timeZoneName:\"short\"});return c=d.split(\" \"),c[c.length-1]}catch(a){return null}}function h(a,b){return b=b||!1,new m([Sk.builtin.assk$(b?a.getUTCFullYear():a.getFullYear()),Sk.builtin.assk$((b?a.getUTCMonth():a.getMonth())+1),Sk.builtin.assk$(b?a.getUTCDate():a.getDate()),Sk.builtin.assk$(b?a.getUTCHours():a.getHours()),Sk.builtin.assk$(b?a.getUTCMinutes():a.getMinutes()),Sk.builtin.assk$(b?a.getUTCSeconds():a.getSeconds()),Sk.builtin.assk$(((b?a.getUTCDay():a.getDay())+6)%7),Sk.builtin.assk$(d(a,b)),Sk.builtin.assk$(b?0:f(a)?1:0)])}function i(a){Sk.builtin.pyCheckArgsLen(\"localtime\",arguments.length,0,1);var b=new Date;if(a){Sk.builtin.pyCheckType(\"secs\",\"number\",Sk.builtin.checkNumber(a));var c=Sk.builtin.asnum$(a);b.setTime(1e3*c)}return h(b)}function j(a){if(!a||Sk.builtin.checkNone(a)?a=i():!(a instanceof m)&&(a=new m(a)),a instanceof Sk.builtin.tuple&&9==a.v.length){var c=[o[Sk.builtin.asnum$(a.v[6])],n[Sk.builtin.asnum$(a.v[1])-1],b(Sk.builtin.asnum$(a.v[2]).toString(),2,\"0\"),b(Sk.builtin.asnum$(a.v[3]).toString(),2,\"0\")+\":\"+b(Sk.builtin.asnum$(a.v[4]).toString(),2,\"0\")+\":\"+b(Sk.builtin.asnum$(a.v[5]).toString(),2,\"0\"),b(Sk.builtin.asnum$(a.v[0]).toString(),4,\"0\")];return Sk.builtin.str(c.join(\" \"))}}function k(a){if(a instanceof Sk.builtin.tuple&&9==a.v.length){var b=new Date(Sk.builtin.asnum$(a.v[0]),Sk.builtin.asnum$(a.v[1])-1,Sk.builtin.asnum$(a.v[2]),Sk.builtin.asnum$(a.v[3]),Sk.builtin.asnum$(a.v[4]),Sk.builtin.asnum$(a.v[5]));return Sk.builtin.assk$(b.getTime()/1e3,void 0)}throw new Sk.builtin.TypeError(\"mktime() requires a struct_time or 9-tuple\")}var l={__file__:\"/src/lib/time/__init__.js\",__package__:Sk.builtin.none.none$},m=Sk.builtin.make_structseq(\"time\",\"struct_time\",{tm_year:\"year, for example, 1993\",tm_mon:\"month of year, range [1, 12]\",tm_mday:\"day of month, range [1, 31]\",tm_hour:\"hours, range [0, 23]\",tm_min:\"minutes, range [0, 59]\",tm_sec:\"seconds, range [0, 61]\",tm_wday:\"day of week, range [0, 6], Monday is 0\",tm_yday:\"day of year, range [1, 366]\",tm_isdst:\"1 if summer time is in effect, 0 if not, and -1 if unknown\"});l.struct_time=m,l.time=new Sk.builtin.func(function(){Sk.builtin.pyCheckArgsLen(\"time\",arguments.length,0,0);var a=Date.now();return\"undefined\"!=typeof window&&window.performance&&window.performance.now&&(a+=window.performance.now()%1),Sk.builtin.assk$(a/1e3,void 0)}),l.sleep=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgsLen(\"sleep\",arguments.length,1,1),Sk.builtin.pyCheckType(\"delay\",\"float\",Sk.builtin.checkNumber(a)),new Sk.misceval.promiseToSuspension(new Promise(function(b){Sk.setTimeout(function(){b(Sk.builtin.none.none$)},1e3*Sk.ffi.remapToJs(a))}))}),l.localtime=new Sk.builtin.func(i),l.gmtime=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"localtime\",arguments.length,0,1);var b=new Date;if(a){Sk.builtin.pyCheckType(\"secs\",\"number\",Sk.builtin.checkNumber(a));var c=Sk.builtin.asnum$(a);b.setTime(1e3*c)}return h(b,!0)});var n=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],o=[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"];return l.asctime=new Sk.builtin.func(j),l.ctime=new Sk.builtin.func(function(a){return j(i(a))}),l.mktime=new Sk.builtin.func(k),l.timezone=new Sk.builtin.int_(60*e()),l.altzone=new Sk.builtin.int_(60*function(){var a=Math.min,b=new Date(2002,0,1),c=new Date(2002,6,1);return a(b.getTimezoneOffset(),c.getTimezoneOffset())}()),l.daylight=new Sk.builtin.int_(f(new Date)?1:0),l.tzname=Sk.builtin.tuple(function(){var a=new Date(2002,0,1),b=new Date(2002,6,1);return f(a)?[Sk.builtin.str(g(b)),Sk.builtin.str(g(a))]:[Sk.builtin.str(g(a)),Sk.builtin.str(g(b))]}()),l.accept2dyear=Sk.builtin.assk$(1,Sk.builtin.nmber.int$),l.clock=new Sk.builtin.func(function(){var a=0;return a=\"undefined\"!=typeof window&&window.performance&&window.performance.now?window.performance.now()/1e3:new Date().getTime()/1e3,new Sk.builtin.float_(a)}),l.strftime=new Sk.builtin.func(function(b,c){var d;if(Sk.builtin.pyCheckArgsLen(\"strftime\",arguments.length,1,2),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"format must be a string\");return c?!(c instanceof m)&&(c=new m(c)):c=i(),a(c),d=Sk.ffi.remapToJs(b),Sk.ffi.remapToPy(strftime(d,new Date(1e3*k(c).v)))}),l.tzset=new Sk.builtin.func(function(){throw new Sk.builtin.NotImplementedError(\"time.tzset() is not yet implemented\")}),l.strptime=new Sk.builtin.func(function(a,b){Sk.builtin.pyCheckArgsLen(\"strptime\",arguments.length,1,2),Sk.builtin.pyCheckType(\"string\",\"string\",Sk.builtin.checkString(a)),void 0===b?b=new Sk.builtin.str(\"%a %b %d %H:%M:%S %Y\"):Sk.builtin.pyCheckType(\"format\",\"string\",Sk.builtin.checkString(b));let c=h(strptime(Sk.ffi.remapToJs(a),Sk.ffi.remapToJs(b),!0));return c.v[8]=new Sk.builtin.int_(-1),c}),l};","src/lib/timeit.py":"raise NotImplementedError(\"timeit is not yet implemented in Skulpt\")\n","src/lib/toaiff.py":"raise NotImplementedError(\"toaiff is not yet implemented in Skulpt\")\n","src/lib/token.py":"raise NotImplementedError(\"token is not yet implemented in Skulpt\")\n","src/lib/tokenize.py":"raise NotImplementedError(\"tokenize is not yet implemented in Skulpt\")\n","src/lib/trace.py":"raise NotImplementedError(\"trace is not yet implemented in Skulpt\")\n","src/lib/traceback.py":"raise NotImplementedError(\"traceback is not yet implemented in Skulpt\")\n","src/lib/tty.py":"raise NotImplementedError(\"tty is not yet implemented in Skulpt\")\n","src/lib/types.py":"\"\"\"\nThis file was modified from CPython.\nCopyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n2011, 2012, 2013, 2014, 2015 Python Software Foundation; All Rights Reserved\n\"\"\"\n\"\"\"Define names for all type symbols known in the standard interpreter.\nTypes that are part of optional modules (e.g. array) are not listed.\n\"\"\"\nimport sys\n\n# Iterators in Python aren't a matter of type but of protocol.  A large\n# and changing number of builtin types implement *some* flavor of\n# iterator.  Don't check the type!  Use hasattr to check for both\n# \"__iter__\" and \"next\" attributes instead.\n\nNoneType = type(None)\nTypeType = type\nObjectType = object\nIntType = int\nLongType = long\nFloatType = float\nBooleanType = bool\ntry:\n    ComplexType = complex\nexcept NameError:\n    pass\nStringType = str\n\n# StringTypes is already outdated.  Instead of writing \"type(x) in\n# types.StringTypes\", you should use \"isinstance(x, basestring)\".  But\n# we keep around for compatibility with Python 2.2.\ntry:\n    UnicodeType = unicode\n    StringTypes = (StringType, UnicodeType)\nexcept NameError:\n    StringTypes = (StringType,)\n\nBufferType = buffer\n\nTupleType = tuple\nListType = list\nDictType = DictionaryType = dict\n\ndef _f(): pass\nFunctionType = type(_f)\nLambdaType = type(lambda: None)         # Same as FunctionType\n#CodeType = type(_f.func_code)\n\ndef _g():\n    yield 1\nGeneratorType = type(_g())\n\nclass _C:\n    def _m(self): pass\nClassType = type(_C)\nUnboundMethodType = type(_C._m)         # Same as MethodType\n_x = _C()\nInstanceType = type(_x)\nMethodType = type(_x._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\n\nModuleType = type(sys)\nFileType = file\nXRangeType = xrange\n\n# try:\n#     raise TypeError\n# except TypeError:\n#     tb = sys.exc_info()[2]\n#     TracebackType = type(tb)\n#     FrameType = type(tb.tb_frame)\n#     del tb\n\nSliceType = slice\n# EllipsisType = type(Ellipsis)\n\n# DictProxyType = type(TypeType.__dict__)\nNotImplementedType = type(NotImplemented)\n\n# For Jython, the following two types are identical\n# GetSetDescriptorType = type(FunctionType.func_code)\n# MemberDescriptorType = type(FunctionType.func_globals)\n\ndel sys, _f, _g, _C, _x                           # Not for export\n__all__ = list(n for n in globals() if n[:1] != '_')\n","src/lib/unittest/__init__.py":"__author__ = 'bmiller'\n'''\nThis is the start of something that behaves like\nthe unittest module from cpython.\n\n'''\n\nclass TestCase:\n    def __init__(self):\n        self.numPassed = 0\n        self.numFailed = 0\n        self.assertPassed = 0\n        self.assertFailed = 0\n        self.verbosity = 1\n        self.tlist = []\n        testNames = {}\n        for name in dir(self):\n            if name[:4] == 'test' and name not in testNames:\n                self.tlist.append(getattr(self,name))\n                testNames[name]=True\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n    \n    def cleanName(self,funcName):\n    # work around skulpts lack of an __name__\n        funcName = str(funcName)\n        funcName = funcName[13:]\n        funcName = funcName[:funcName.find('<')-3]\n        return funcName\n\n    def main(self):\n\n        for func in self.tlist:\n            if self.verbosity > 1:\n                print('Running %s' % self.cleanName(func))\n            try:\n                self.setUp()\n                self.assertPassed = 0\n                self.assertFailed = 0\n                func()\n                self.tearDown()\n                if self.assertFailed == 0:\n                    self.numPassed += 1\n                else:\n                    self.numFailed += 1\n                    print('Tests failed in %s ' % self.cleanName(func))\n            except Exception as e:\n                self.assertFailed += 1\n                self.numFailed += 1\n                print('Test threw exception in %s (%s)' % (self.cleanName(func), e))\n        self.showSummary()\n\n    def assertEqual(self, actual, expected, feedback=\"\"):\n        res = actual==expected\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to equal %s\" % (str(actual),str(expected))\n        self.appendResult(res, actual ,expected, feedback)\n\n    def assertNotEqual(self, actual, expected, feedback=\"\"):\n        res = actual != expected\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to not equal %s\" % (str(actual),str(expected))\n        self.appendResult(res, actual, expected, feedback)\n\n    def assertTrue(self,x, feedback=\"\"):\n        res = bool(x) is True\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to be True\" % (str(x))\n        self.appendResult(res, x, True, feedback)\n\n    def assertFalse(self,x, feedback=\"\"):\n        res = not bool(x)\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to be False\" % (str(x))\n        self.appendResult(res, x, False, feedback)\n\n    def assertIs(self,a,b, feedback=\"\"):\n        res = a is b\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to be the same object as %s\" % (str(a),str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def assertIsNot(self,a,b, feedback=\"\"):\n        res = a is not b\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to not be the same object as %s\" % (str(a),str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def assertIsNone(self,x, feedback=\"\"):\n        res = x is None\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to be None\" % (str(x))\n        self.appendResult(res, x, None, feedback)\n\n    def assertIsNotNone(self,x, feedback=\"\"):\n        res = x is not None\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to not be None\" % (str(x))\n        self.appendResult(res, x, None, feedback)\n\n    def assertIn(self, a, b, feedback=\"\"):\n        res = a in b\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to be in %s\" % (str(a),str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def assertNotIn(self, a, b, feedback=\"\"):\n        res = a not in b\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to not be in %s\" % (str(a),str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def assertIsInstance(self,a,b, feedback=\"\"):\n        res = isinstance(a,b)\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to be an instance of %s\" % (str(a), str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def assertNotIsInstance(self,a,b, feedback=\"\"):\n        res = not isinstance(a,b)\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to not be an instance of %s\" % (str(a),str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def assertAlmostEqual(self, a, b, places=7, feedback=\"\", delta=None):\n\n        if delta is not None:\n            res = abs(a-b) <= delta\n        else:\n            if places is None:\n                places = 7\n            res = round(a-b, places) == 0\n        \n        if not res and feedback == \"\":\n            feedback = \"Expected %s to equal %s\" % (str(a),str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def assertNotAlmostEqual(self, a, b, places=7, feedback=\"\", delta=None):\n\n        if delta is not None:\n            res = not (a == b) and abs(a - b) > delta\n        else:\n            if places is None:\n                places = 7\n\n            res = round(a-b, places) != 0\n\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to not equal %s\" % (str(a),str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def assertGreater(self,a,b, feedback=\"\"):\n        res = a > b\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to be greater than %s\" % (str(a),str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def assertGreaterEqual(self,a,b, feedback=\"\"):\n        res = a >= b\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to be >= %s\" % (str(a),str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def assertLess(self, a, b, feedback=\"\"):\n        res = a < b\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to be less than %s\" % (str(a),str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def assertLessEqual(self,a,b, feedback=\"\"):\n        res = a <= b\n        if not res and feedback == \"\":\n            feedback = \"Expected %s to be <= %s\" % (str(a),str(b))\n        self.appendResult(res, a, b, feedback)\n\n    def appendResult(self,res,actual,expected,feedback):\n        if res:\n            msg = 'Pass'\n            self.assertPassed += 1\n        else:\n            msg = 'Fail: ' +  feedback\n            print(msg)\n            self.assertFailed += 1\n\n    def assertRaises(self, exception, callable=None, *args, **kwds):\n        # with is currently not supported hence we just try and catch\n        if callable is None:\n            raise NotImplementedError(\"assertRaises does currently not support assert contexts\")\n        if kwds:\n            raise NotImplementedError(\"assertRaises does currently not support **kwds\")\n\n        res = False\n        actualerror = str(exception())\n        try:\n            callable(*args)\n        except exception as ex:\n            res = True\n        except Exception as inst:\n            actualerror = str(inst)\n            print(\"ACT = \", actualerror, str(exception()))\n        else:\n            actualerror = \"No Error\"\n\n        self.appendResult(res, str(exception()), actualerror, \"\")\n\n    def fail(self, msg=None):\n        if msg is None:\n            msg = 'Fail'\n        else:\n            msg = 'Fail: ' + msg\n        print(msg)\n        self.assertFailed += 1\n\n    def showSummary(self):\n        pct = self.numPassed / (self.numPassed+self.numFailed) * 100\n        print(\"Ran %d tests, passed: %d failed: %d\\n\" % (self.numPassed+self.numFailed,\n                                               self.numPassed, self.numFailed))\n\n\n\ndef main(verbosity=1):\n    glob = globals() # globals() still needs work\n    for name in glob:\n        if type(glob[name]) == type and issubclass(glob[name], TestCase):\n            try:\n                tc = glob[name]()\n                tc.verbosity = verbosity\n                tc.main()\n            except:\n                print(\"Uncaught Error in: \", name)\n","src/lib/unittest/gui.py":"import document\nfrom unittest import TestCase\n\nclass TestCaseGui(TestCase):\n     def __init__(self):\n          TestCase.__init__(self)\n          self.divid = document.currentDiv()\n          self.mydiv = document.getElementById(self.divid)\n          res = document.getElementById(self.divid+'_unit_results')\n          if res:\n              self.resdiv = res\n              res.innerHTML = ''\n          else:\n              self.resdiv = document.createElement('div')\n              self.resdiv.setAttribute('id',self.divid+'_unit_results')\n              self.resdiv.setAttribute('class','unittest-results')\n              self.mydiv.appendChild(self.resdiv)\n\n\n     def main(self):\n         t = document.createElement('table')\n         self.resTable = t\n         self.resdiv.appendChild(self.resTable)\n\n         headers = ['Result','Actual Value','Expected Value','Notes']\n         row = document.createElement('tr')\n         for item in headers:\n             head = document.createElement('th')\n             head.setAttribute('class','ac-feedback')\n             head.innerHTML = item\n             head.setCSS('text-align','center')\n             row.appendChild(head)\n         self.resTable.appendChild(row)\n\n         for func in self.tlist:\n             try:\n                 self.setUp()\n                 func()\n                 self.tearDown()\n             except Exception as e:\n                 self.appendResult('Error', None, None, e)\n                 self.numFailed += 1\n                 self.showSummary()\n\n     def appendResult(self,res,actual,expected,param):\n         trimActual = False\n         if len(str(actual)) > 15:\n             trimActual = True\n             actualType = type(actual)\n         trimExpected = False\n         if len(str(expected)) > 15:\n             trimExpected = True\n             expectedType = type(expected)\n         row = document.createElement('tr')\n         err = False\n         if res == 'Error':\n             err = True\n             msg = 'Error: %s' % param\n             errorData = document.createElement('td')\n             errorData.setAttribute('class','ac-feedback')\n             errorData.innerHTML = 'ERROR'\n             errorData.setCSS('background-color','#de8e96')\n             errorData.setCSS('text-align','center')\n             row.appendChild(errorData)\n         elif res:\n             passed = document.createElement('td')\n             passed.setAttribute('class','ac-feedback')\n             passed.innerHTML = 'Pass'\n             passed.setCSS('background-color','#83d382')\n             passed.setCSS('text-align','center')\n             row.appendChild(passed)\n             self.numPassed += 1\n         else:\n             fail = document.createElement('td')\n             fail.setAttribute('class','ac-feedback')\n             fail.innerHTML = 'Fail'\n             fail.setCSS('background-color','#de8e96')\n             fail.setCSS('text-align','center')\n             row.appendChild(fail)\n             self.numFailed += 1\n\n\n         act = document.createElement('td')\n         act.setAttribute('class','ac-feedback')\n         if trimActual:\n             actHTML = str(actual)[:5] + \"...\" + str(actual)[-5:]\n             if actualType == str:\n                 actHTML = repr(actHTML)\n             act.innerHTML = actHTML\n         else:\n             act.innerHTML = repr(actual)\n         act.setCSS('text-align','center')\n         row.appendChild(act)\n\n         expect = document.createElement('td')\n         expect.setAttribute('class','ac-feedback')\n\n         if trimExpected:\n             expectedHTML = str(expected)[:5] + \"...\" + str(expected)[-5:]\n             if expectedType == str:\n                 expectedHTML = repr(expectedHTML)\n             expect.innerHTML = expectedHTML\n         else:\n             expect.innerHTML = repr(expected)\n         expect.setCSS('text-align','center')\n         row.appendChild(expect)\n         inp = document.createElement('td')\n         inp.setAttribute('class','ac-feedback')\n\n         if err:\n             inp.innerHTML = msg\n         else:\n             inp.innerHTML = param\n         inp.setCSS('text-align','center')\n         row.appendChild(inp)\n         self.resTable.appendChild(row)\n\n\n     def showSummary(self):\n         pct = self.numPassed / (self.numPassed+self.numFailed) * 100\n         pTag = document.createElement('p')\n         pTag.innerHTML = \"You passed: \" + str(pct) + \"% of the tests\"\n         self.resdiv.appendChild(pTag)\n","src/lib/urllib/__init__.js":"var $builtinmodule=function(){return{}};","src/lib/urllib/request.js":"var $builtinmodule=function(){var a={},b=function(a,b,c){var d,e=b?b:{},f=void 0===c?5e3:c;if(AbortController){var g=new AbortController;e.signal=g.signal,d=fetch(a,e),setTimeout(function(){g.abort()},f)}else d=fetch(a,e);return d};return a.Response=Sk.misceval.buildClass(a,function(a,b){var c=new Sk.builtin.str(\"<Response>\");b.__init__=new Sk.builtin.func(function(a,b,c){if(Sk.builtin.pyCheckArgsLen(\"file\",arguments.length,3,3),!Sk.builtin.checkString(b))throw new Sk.builtin.TypeError(\"data must be a string\");if(!Sk.builtin.checkString(c))throw new Sk.builtin.TypeError(\"url must be a string\");a.data=b.v,a.pos=0,a.url=c}),b.__str__=new Sk.builtin.func(function(){return Sk.builtin.pyCheckArgsLen(\"__str__\",arguments.length,1,1),c}),b.geturl=new Sk.builtin.func(function(a){return Sk.builtin.pyCheckArgsLen(\"getrul\",arguments.length,1,1),a.url}),b.read=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgsLen(\"read\",arguments.length,1,2),void 0!==b){if(!Sk.builtin.checkInt(b))throw new Sk.builtin.TypeError(\"size must be an int\");b=Sk.builtin.asnum$(b),0>b&&(b=a.data.length)}else b=a.data.length;a.pos+b>a.data.length&&(b=a.data.length-a.pos);var c=new Sk.builtin.bytes(a.data.substr(a.pos,b),Sk.builtin.str.$utf8);return a.pos+=b,c});var d=function(a,b){if(void 0!==b){if(!Sk.builtin.checkInt(b))throw new Sk.builtin.TypeError(\"size must be an int\");b=Sk.builtin.asnum$(b),0>b&&(b=a.data.length)}else b=a.data.length;var c=a.data.indexOf(\"\\n\",a.pos);-1!==c&&(c-=a.pos,b>c&&(b=c+1)),a.pos+b>a.data.length&&(b=a.data.length-a.pos);var d=new Sk.builtin.bytes(a.data.substr(a.pos,b),Sk.builtin.str.$utf8);return a.pos+=b,d};b.readline=new Sk.builtin.func(function(a,b){return Sk.builtin.pyCheckArgsLen(\"readline\",arguments.length,1,2),d(a,b)}),b.readlines=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgsLen(\"readlines\",arguments.length,1,2);for(var b=[],c=d(a);0!=c.sq$length();)b.push(c),c=d(a);return new Sk.builtin.list(b)}),b.__iter__=new Sk.builtin.func(function(a){var b={tp$iter:function(){return b},$obj:a,tp$iternext:function(){var a=d(b.$obj);return a==Sk.builtin.str.$emptystr?void 0:a}};return b})},\"Response\",[]),a.urlopen=new Sk.builtin.func(function(c,d,e){if(Sk.builtin.pyCheckArgsLen(\"urlopen\",arguments.length,1,3),!Sk.builtin.checkString(c))throw new Sk.builtin.TypeError(\"URL currently must be a string\");if(void 0===d&&(d=Sk.builtin.none.none$),!Sk.builtin.checkNone(d))throw new Sk.builtin.TypeError(\"currently, data must be None\");if(void 0===e)e=10;else if(!Sk.builtin.checkNumber(e))throw new Sk.builtin.TypeError(\"timeout must be a number\");else e=Sk.builtin.asnum$(e);var f=Sk.ffi.unwrapo(c);f.startsWith(\"http://\")&&(f=f.slice(5));var g={};d!==Sk.builtin.none.none$&&(g.method=\"POST\",g.body=Sk.ffi.unwrapo(d));var h=b(f,g,1e3*e).then(function(a){return a.ok?a.text():Promise.reject(new Sk.builtin.IOError(\"unable to open '\"+f+\"' (\"+a.statusText+\")\"))}).then(function(b){var c=Sk.misceval.callsimArray(a.Response,[new Sk.builtin.str(b),new Sk.builtin.str(f)]);return Sk.setExecStartNow(!0),c}).catch(function(a){return\"AbortError\"===a.name?Promise.reject(new Sk.builtin.IOError(\"request for '\"+f+\"' timed out\")):Promise.reject(a)});return new Sk.misceval.promiseToSuspension(h)}),a};","src/lib/urllib2.js":"var $builtinmodule=function(){var a={},b=function(a,b,c){var d,e=b?b:{},f=void 0===c?5e3:c;if(AbortController){var g=new AbortController;e.signal=g.signal,d=fetch(a,e),setTimeout(function(){g.abort()},f)}else d=fetch(a,e);return d};return a.NetFile=Sk.misceval.buildClass(a,function(a,b){b.__init__=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"file\",arguments,2,2),b.__class__!=Sk.builtin.str)throw new Sk.builtin.TypeError(\"data must be a string\");a.data=b.v,a.pos=0}),b.read=new Sk.builtin.func(function(a,b){if(Sk.builtin.pyCheckArgs(\"read\",arguments,1,2),void 0!==b){if(!Sk.builtin.checkInt(b))throw new Sk.builtin.TypeError(\"size must be an int\");b=Sk.builtin.asnum$(b),0>b&&(b=a.data.length)}else b=a.data.length;a.pos+b>a.data.length&&(b=a.data.length-a.pos);var c=new Sk.builtin.str(a.data.substr(a.pos,b));return a.pos+=b,c});var c=function(a,b){if(void 0!==b){if(!Sk.builtin.checkInt(b))throw new Sk.builtin.TypeError(\"size must be an int\");b=Sk.builtin.asnum$(b),0>b&&(b=a.data.length)}else b=a.data.length;var c=a.data.indexOf(\"\\n\",a.pos);-1!==c&&(c-=a.pos,b>c&&(b=c+1)),a.pos+b>a.data.length&&(b=a.data.length-a.pos);var d=new Sk.builtin.str(a.data.substr(a.pos,b));return a.pos+=b,d};b.readline=new Sk.builtin.func(function(a,b){return Sk.builtin.pyCheckArgs(\"readline\",arguments,1,2),c(a,b)}),b.readlines=new Sk.builtin.func(function(a){Sk.builtin.pyCheckArgs(\"readlines\",arguments,1,2);for(var b=[],d=c(a);d!=Sk.builtin.str.$emptystr;)b.push(d),d=c(a);return new Sk.builtin.list(b)}),b.__iter__=new Sk.builtin.func(function(a){var b={tp$iter:function(){return b},$obj:a,tp$iternext:function(){var a=c(b.$obj);return a==Sk.builtin.str.$emptystr?void 0:a}};return b})},\"NetFile\",[]),a.urlopen=new Sk.builtin.func(function(c,d,e){if(Sk.builtin.pyCheckArgs(\"urlopen\",arguments,1,3),!Sk.builtin.checkString(c))throw new Sk.builtin.TypeError(\"URL must be a string\");if(void 0===d&&(d=Sk.builtin.none.none$),!Sk.builtin.checkNone(d))throw new Sk.builtin.TypeError(\"currently, data must be None\");if(void 0===e)e=10;else if(!Sk.builtin.checkNumber(e))throw new Sk.builtin.TypeError(\"timeout must be a number\");else e=Sk.builtin.asnum$(e);var f=Sk.ffi.unwrapo(c);f.startsWith(\"http://\")&&(f=f.slice(5));var g={};d!==Sk.builtin.none.none$&&(g.method=\"POST\",g.body=Sk.ffi.unwrapo(d));var h=b(f,g,1e3*e).then(function(a){return a.ok?a.text():Promise.reject(new Sk.builtin.IOError(\"unable to open '\"+f+\"' (\"+a.statusText+\")\"))}).then(function(b){var c=Sk.misceval.callsimArray(a.NetFile,[new Sk.builtin.str(b)]);return Sk.setExecStartNow(!0),c}).catch(function(a){return\"AbortError\"===a.name?Promise.reject(new Sk.builtin.IOError(\"request for '\"+f+\"' timed out\")):Promise.reject(a)});return new Sk.misceval.promiseToSuspension(h)}),a};","src/lib/urlparse.py":"raise NotImplementedError(\"urlparse is not yet implemented in Skulpt\")\n","src/lib/user.py":"raise NotImplementedError(\"user is not yet implemented in Skulpt\")\n","src/lib/uu.py":"raise NotImplementedError(\"uu is not yet implemented in Skulpt\")\n","src/lib/uuid.py":"raise NotImplementedError(\"uuid is not yet implemented in Skulpt\")\n","src/lib/warnings.py":"raise NotImplementedError(\"warnings is not yet implemented in Skulpt\")\n","src/lib/wave.py":"raise NotImplementedError(\"wave is not yet implemented in Skulpt\")\n","src/lib/weakref.py":"raise NotImplementedError(\"weakref is not yet implemented in Skulpt\")\n","src/lib/webbrowser.py":"raise NotImplementedError(\"webbrowser is not yet implemented in Skulpt\")\n","src/lib/whichdb.py":"raise NotImplementedError(\"whichdb is not yet implemented in Skulpt\")\n","src/lib/wsgiref/__init__.py":"raise NotImplementedError(\"wsgiref is not yet implemented in Skulpt\")\n","src/lib/xdrlib.py":"raise NotImplementedError(\"xdrlib is not yet implemented in Skulpt\")\n","src/lib/xml/__init__.py":"raise NotImplementedError(\"xml is not yet implemented in Skulpt\")\n","src/lib/xml/dom/__init__.py":"raise NotImplementedError(\"dom is not yet implemented in Skulpt\")\n","src/lib/xml/etree/__init__.py":"raise NotImplementedError(\"etree is not yet implemented in Skulpt\")\n","src/lib/xml/parsers/__init__.py":"raise NotImplementedError(\"parsers is not yet implemented in Skulpt\")\n","src/lib/xml/sax/__init__.py":"raise NotImplementedError(\"sax is not yet implemented in Skulpt\")\n","src/lib/xmllib.py":"raise NotImplementedError(\"xmllib is not yet implemented in Skulpt\")\n","src/lib/xmlrpclib.py":"raise NotImplementedError(\"xmlrpclib is not yet implemented in Skulpt\")\n","src/lib/zipfile.py":"raise NotImplementedError(\"zipfile is not yet implemented in Skulpt\")\n"}}